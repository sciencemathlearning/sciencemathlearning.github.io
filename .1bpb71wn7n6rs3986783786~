function x() {
    function h(t, e) {
        this.x = t || 0,
        this.y = e || 0
    }
    function t(t, e) {
        this.pos = t || new h,
        this.r = e || 0
    }
    function n(t, e) {
        this.pos = t || new h,
        this.angle = 0,
        this.offset = new h,
        this.u(e || [])
    }
    function l(t, e, i) {
        this.pos = t || new h,
        this.w = e || 0,
        this.h = i || 0
    }
    function e() {
        this.b = this.a = null,
        this.overlapN = new h,
        this.overlapV = new h,
        this.clear()
    }
    function u(t, e, i) {
        for (var n = Number.MAX_VALUE, s = -Number.MAX_VALUE, r = t.length, o = 0; o < r; o++) {
            var a = t[o].f(e);
            a < n && (n = a),
            s < a && (s = a)
        }
        i[0] = n,
        i[1] = s
    }
    function c(t, e, i, n, s, r) {
        var o = d.pop()
          , a = d.pop();
        return e = (t = y.pop().c(e).sub(t)).f(s),
        u(i, s, o),
        u(n, s, a),
        a[0] += e,
        a[1] += e,
        o[0] > a[1] || a[0] > o[1] ? (y.push(t),
        d.push(o),
        d.push(a),
        !0) : (r && (o[0] < a[0] ? (r.aInB = !1,
        o[1] < a[1] ? (i = o[1] - a[0],
        r.bInA = !1) : i = (i = o[1] - a[0]) < (n = a[1] - o[0]) ? i : -n) : (r.bInA = !1,
        o[1] > a[1] ? (i = o[0] - a[1],
        r.aInB = !1) : i = (i = o[1] - a[0]) < (n = a[1] - o[0]) ? i : -n),
        (n = Math.abs(i)) < r.overlap && (r.overlap = n,
        r.overlapN.c(s),
        i < 0 && r.overlapN.reverse())),
        y.push(t),
        d.push(o),
        d.push(a),
        !1)
    }
    function v(t, e) {
        var i = t.g()
          , n = e.f(t);
        return n < 0 ? -1 : i < n ? 1 : 0
    }
    function s(t, e, i) {
        for (var n = y.pop().c(e.pos).sub(t.pos), s = e.r, r = s * s, o = t.calcPoints, a = o.length, h = y.pop(), l = y.pop(), u = 0; u < a; u++) {
            var c = u === a - 1 ? 0 : u + 1
              , d = 0 === u ? a - 1 : u - 1
              , p = 0
              , f = null;
            h.c(t.edges[u]),
            l.c(n).sub(o[u]),
            i && l.g() > r && (i.aInB = !1);
            var g = v(h, l);
            if (-1 === g) {
                if (h.c(t.edges[d]),
                1 === (g = v(h, c = y.pop().c(n).sub(o[d])))) {
                    if (s < (g = l.j()))
                        return y.push(n),
                        y.push(h),
                        y.push(l),
                        y.push(c),
                        !1;
                    i && (i.bInA = !1,
                    f = l.normalize(),
                    p = s - g)
                }
                y.push(c)
            } else if (1 === g) {
                if (h.c(t.edges[c]),
                l.c(n).sub(o[c]),
                -1 === (g = v(h, l))) {
                    if (s < (g = l.j()))
                        return y.push(n),
                        y.push(h),
                        y.push(l),
                        !1;
                    i && (i.bInA = !1,
                    f = l.normalize(),
                    p = s - g)
                }
            } else {
                if (c = h.m().normalize(),
                g = l.f(c),
                d = Math.abs(g),
                0 < g && s < d)
                    return y.push(n),
                    y.push(c),
                    y.push(l),
                    !1;
                i && (f = c,
                p = s - g,
                0 <= g || p < 2 * s) && (i.bInA = !1)
            }
            f && i && Math.abs(p) < Math.abs(i.overlap) && (i.overlap = p,
            i.overlapN.c(f))
        }
        return i && (i.a = t,
        i.b = e,
        i.overlapV.c(i.overlapN).scale(i.overlap)),
        y.push(n),
        y.push(h),
        y.push(l),
        !0
    }
    function r(t, e, i) {
        for (var n = t.calcPoints, s = n.length, r = e.calcPoints, o = r.length, a = 0; a < s; a++)
            if (c(t.pos, e.pos, n, r, t.normals[a], i))
                return !1;
        for (a = 0; a < o; a++)
            if (c(t.pos, e.pos, n, r, e.normals[a], i))
                return !1;
        return i && (i.a = t,
        i.b = e,
        i.overlapV.c(i.overlapN).scale(i.overlap)),
        !0
    }
    var i = {};
    i.Vector = h,
    (i.V = h).prototype.copy = h.prototype.c = function(t) {
        return this.x = t.x,
        this.y = t.y,
        this
    }
    ,
    h.prototype.clone = h.prototype.clone = function() {
        return new h(this.x,this.y)
    }
    ,
    h.prototype.perp = h.prototype.m = function() {
        var t = this.x;
        return this.x = this.y,
        this.y = -t,
        this
    }
    ,
    h.prototype.rotate = h.prototype.rotate = function(t) {
        var e = this.x
          , i = this.y;
        return this.x = e * Math.cos(t) - i * Math.sin(t),
        this.y = e * Math.sin(t) + i * Math.cos(t),
        this
    }
    ,
    h.prototype.reverse = h.prototype.reverse = function() {
        return this.x = -this.x,
        this.y = -this.y,
        this
    }
    ,
    h.prototype.normalize = h.prototype.normalize = function() {
        var t = this.j();
        return 0 < t && (this.x /= t,
        this.y /= t),
        this
    }
    ,
    h.prototype.add = h.prototype.add = function(t) {
        return this.x += t.x,
        this.y += t.y,
        this
    }
    ,
    h.prototype.sub = h.prototype.sub = function(t) {
        return this.x -= t.x,
        this.y -= t.y,
        this
    }
    ,
    h.prototype.scale = h.prototype.scale = function(t, e) {
        return this.x *= t,
        this.y *= e || t,
        this
    }
    ,
    h.prototype.project = h.prototype.o = function(t) {
        var e = this.f(t) / t.g();
        return this.x = e * t.x,
        this.y = e * t.y,
        this
    }
    ,
    h.prototype.projectN = h.prototype.s = function(t) {
        var e = this.f(t);
        return this.x = e * t.x,
        this.y = e * t.y,
        this
    }
    ,
    h.prototype.reflect = function(t) {
        var e = this.x
          , i = this.y;
        return this.o(t).scale(2),
        this.x -= e,
        this.y -= i,
        this
    }
    ,
    h.prototype.reflectN = function(t) {
        var e = this.x
          , i = this.y;
        return this.s(t).scale(2),
        this.x -= e,
        this.y -= i,
        this
    }
    ,
    h.prototype.dot = h.prototype.f = function(t) {
        return this.x * t.x + this.y * t.y
    }
    ,
    h.prototype.len2 = h.prototype.g = function() {
        return this.f(this)
    }
    ,
    h.prototype.len = h.prototype.j = function() {
        return Math.sqrt(this.g())
    }
    ,
    (i.Circle = t).prototype.getAABB = function() {
        var t = this.r;
        return new l(this.pos.clone().sub(new h(t,t)),2 * t,2 * t).l()
    }
    ,
    (i.Polygon = n).prototype.setPoints = n.prototype.u = function(t) {
        if (!this.points || this.points.length !== t.length) {
            var e, i = this.calcPoints = [], n = this.edges = [], s = this.normals = [];
            for (e = 0; e < t.length; e++)
                i.push(new h),
                n.push(new h),
                s.push(new h)
        }
        return this.points = t,
        this.i(),
        this
    }
    ,
    n.prototype.setAngle = function(t) {
        return this.angle = t,
        this.i(),
        this
    }
    ,
    n.prototype.setOffset = function(t) {
        return this.offset = t,
        this.i(),
        this
    }
    ,
    n.prototype.rotate = n.prototype.rotate = function(t) {
        for (var e = this.points, i = e.length, n = 0; n < i; n++)
            e[n].rotate(t);
        return this.i(),
        this
    }
    ,
    n.prototype.translate = n.prototype.translate = function(t, e) {
        for (var i = this.points, n = i.length, s = 0; s < n; s++)
            i[s].x += t,
            i[s].y += e;
        return this.i(),
        this
    }
    ,
    n.prototype.i = function() {
        var t, e = this.calcPoints, i = this.edges, n = this.normals, s = this.points, r = this.offset, o = this.angle, a = s.length;
        for (t = 0; t < a; t++) {
            var h = e[t].c(s[t]);
            h.x += r.x,
            h.y += r.y,
            0 !== o && h.rotate(o)
        }
        for (t = 0; t < a; t++)
            s = e[t],
            s = i[t].c(t < a - 1 ? e[t + 1] : e[0]).sub(s),
            n[t].c(s).m().normalize()
    }
    ,
    n.prototype.getAABB = function() {
        for (var t = this.calcPoints, e = t.length, i = t[0].x, n = t[0].y, s = t[0].x, r = t[0].y, o = 1; o < e; o++) {
            var a = t[o];
            a.x < i ? i = a.x : a.x > s && (s = a.x),
            a.y < n ? n = a.y : a.y > r && (r = a.y)
        }
        return new l(this.pos.clone().add(new h(i,n)),s - i,r - n).l()
    }
    ,
    (i.Box = l).prototype.toPolygon = l.prototype.l = function() {
        var t = this.pos
          , e = this.w
          , i = this.h;
        return new n(new h(t.x,t.y),[new h, new h(e,0), new h(e,i), new h(0,i)])
    }
    ,
    (i.Response = e).prototype.clear = e.prototype.clear = function() {
        return this.bInA = this.aInB = !0,
        this.overlap = Number.MAX_VALUE,
        this
    }
    ;
    for (var y = [], o = 0; o < 10; o++)
        y.push(new h);
    var d = [];
    for (o = 0; o < 5; o++)
        d.push([]);
    var a = new e
      , p = new l(new h,1e-6,1e-6).l();
    return i.isSeparatingAxis = c,
    i.pointInCircle = function(t, e) {
        var i = y.pop().c(t).sub(e.pos)
          , n = e.r * e.r
          , s = i.g();
        return y.push(i),
        s <= n
    }
    ,
    i.pointInPolygon = function(t, e) {
        p.pos.c(t),
        a.clear();
        var i = r(p, e, a);
        return i && (i = a.aInB),
        i
    }
    ,
    i.testCircleCircle = function(t, e, i) {
        var n = y.pop().c(e.pos).sub(t.pos)
          , s = t.r + e.r
          , r = n.g();
        return s * s < r ? (y.push(n),
        !1) : (i && (r = Math.sqrt(r),
        i.a = t,
        i.b = e,
        i.overlap = s - r,
        i.overlapN.c(n.normalize()),
        i.overlapV.c(n).scale(i.overlap),
        i.aInB = t.r <= e.r && r <= e.r - t.r,
        i.bInA = e.r <= t.r && r <= t.r - e.r),
        y.push(n),
        !0)
    }
    ,
    i.testPolygonCircle = s,
    i.testCirclePolygon = function(t, e, i) {
        if ((t = s(e, t, i)) && i) {
            e = i.a;
            var n = i.aInB;
            i.overlapN.reverse(),
            i.overlapV.reverse(),
            i.a = i.b,
            i.b = e,
            i.aInB = i.bInA,
            i.bInA = n
        }
        return t
    }
    ,
    i.testPolygonPolygon = r,
    i
}
!function(t, e) {
    "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define("Phaser", [], e) : "object" == typeof exports ? exports.Phaser = e() : t.Phaser = e()
}(this, function() {
    return n = {},
    s.m = i = [function(t, e) {
        function r(t, e, i, n) {
            for (var s in e)
                if (e.hasOwnProperty(s)) {
                    var r = (l = e,
                    u = s,
                    p = d = void 0,
                    p = (c = i) ? l[u] : Object.getOwnPropertyDescriptor(l, u),
                    !c && p.value && "object" == typeof p.value && (p = p.value),
                    !(!p || !((d = p).get && "function" == typeof d.get || d.set && "function" == typeof d.set)) && (void 0 === p.enumerable && (p.enumerable = !0),
                    void 0 === p.configurable && (p.configurable = !0),
                    p));
                    if (!1 !== r) {
                        if (o = (n || t).prototype,
                        a = s,
                        h = void 0,
                        (h = Object.getOwnPropertyDescriptor(o, a)) && (h.value && "object" == typeof h.value && (h = h.value),
                        !1 === h.configurable)) {
                            if (f.ignoreFinals)
                                continue;
                            throw new Error("cannot override final property '" + s + "', set Class.ignoreFinals = true to skip")
                        }
                        Object.defineProperty(t.prototype, s, r)
                    } else
                        t.prototype[s] = e[s]
                }
            var o, a, h, l, u, c, d, p
        }
        function o(t, e) {
            if (e) {
                Array.isArray(e) || (e = [e]);
                for (var i = 0; i < e.length; i++)
                    r(t, e[i].prototype || e[i])
            }
        }
        function f(t) {
            var e, i, n;
            if ((t = t || {}).initialize) {
                if ("function" != typeof t.initialize)
                    throw new Error("initialize must be a function");
                n = t.initialize,
                delete t.initialize
            } else
                n = t.Extends ? (i = t.Extends,
                function() {
                    i.apply(this, arguments)
                }
                ) : function() {}
                ;
            t.Extends ? (n.prototype = Object.create(t.Extends.prototype),
            n.prototype.constructor = n,
            e = t.Extends,
            delete t.Extends) : n.prototype.constructor = n;
            var s = null;
            return t.Mixins && (s = t.Mixins,
            delete t.Mixins),
            o(n, s),
            r(n, t, !0, e),
            n
        }
        f.extend = r,
        f.mixin = o,
        f.ignoreFinals = !1,
        t.exports = f
    }
    , function(t, e) {
        t.exports = function() {}
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            var n = typeof t;
            return t && "number" != n && "string" != n && t.hasOwnProperty(e) && void 0 !== t[e] ? t[e] : i
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(124)
          , r = new n({
            initialize: function(t, e) {
                this.x = 0,
                this.y = 0,
                "object" == typeof t ? (this.x = t.x || 0,
                this.y = t.y || 0) : (void 0 === e && (e = t),
                this.x = t || 0,
                this.y = e || 0)
            },
            clone: function() {
                return new r(this.x,this.y)
            },
            copy: function(t) {
                return this.x = t.x || 0,
                this.y = t.y || 0,
                this
            },
            setFromObject: function(t) {
                return this.x = t.x || 0,
                this.y = t.y || 0,
                this
            },
            set: function(t, e) {
                return void 0 === e && (e = t),
                this.x = t,
                this.y = e,
                this
            },
            setTo: function(t, e) {
                return this.set(t, e)
            },
            setToPolar: function(t, e) {
                return null == e && (e = 1),
                this.x = Math.cos(t) * e,
                this.y = Math.sin(t) * e,
                this
            },
            equals: function(t) {
                return this.x === t.x && this.y === t.y
            },
            fuzzyEquals: function(t, e) {
                return s(this.x, t.x, e) && s(this.y, t.y, e)
            },
            angle: function() {
                var t = Math.atan2(this.y, this.x);
                return t < 0 && (t += 2 * Math.PI),
                t
            },
            setAngle: function(t) {
                return this.setToPolar(t, this.length())
            },
            add: function(t) {
                return this.x += t.x,
                this.y += t.y,
                this
            },
            subtract: function(t) {
                return this.x -= t.x,
                this.y -= t.y,
                this
            },
            multiply: function(t) {
                return this.x *= t.x,
                this.y *= t.y,
                this
            },
            scale: function(t) {
                return isFinite(t) ? (this.x *= t,
                this.y *= t) : (this.x = 0,
                this.y = 0),
                this
            },
            divide: function(t) {
                return this.x /= t.x,
                this.y /= t.y,
                this
            },
            negate: function() {
                return this.x = -this.x,
                this.y = -this.y,
                this
            },
            distance: function(t) {
                var e = t.x - this.x
                  , i = t.y - this.y;
                return Math.sqrt(e * e + i * i)
            },
            distanceSq: function(t) {
                var e = t.x - this.x
                  , i = t.y - this.y;
                return e * e + i * i
            },
            length: function() {
                var t = this.x
                  , e = this.y;
                return Math.sqrt(t * t + e * e)
            },
            setLength: function(t) {
                return this.normalize().scale(t)
            },
            lengthSq: function() {
                var t = this.x
                  , e = this.y;
                return t * t + e * e
            },
            normalize: function() {
                var t = this.x
                  , e = this.y
                  , i = t * t + e * e;
                return 0 < i && (i = 1 / Math.sqrt(i),
                this.x = t * i,
                this.y = e * i),
                this
            },
            normalizeRightHand: function() {
                var t = this.x;
                return this.x = -1 * this.y,
                this.y = t,
                this
            },
            normalizeLeftHand: function() {
                var t = this.x;
                return this.x = this.y,
                this.y = -1 * t,
                this
            },
            dot: function(t) {
                return this.x * t.x + this.y * t.y
            },
            cross: function(t) {
                return this.x * t.y - this.y * t.x
            },
            lerp: function(t, e) {
                void 0 === e && (e = 0);
                var i = this.x
                  , n = this.y;
                return this.x = i + e * (t.x - i),
                this.y = n + e * (t.y - n),
                this
            },
            transformMat3: function(t) {
                var e = this.x
                  , i = this.y
                  , n = t.val;
                return this.x = n[0] * e + n[3] * i + n[6],
                this.y = n[1] * e + n[4] * i + n[7],
                this
            },
            transformMat4: function(t) {
                var e = this.x
                  , i = this.y
                  , n = t.val;
                return this.x = n[0] * e + n[4] * i + n[12],
                this.y = n[1] * e + n[5] * i + n[13],
                this
            },
            reset: function() {
                return this.x = 0,
                this.y = 0,
                this
            },
            limit: function(t) {
                var e = this.length();
                return e && t < e && this.scale(t / e),
                this
            },
            reflect: function(t) {
                return t = t.clone().normalize(),
                this.subtract(t.scale(2 * this.dot(t)))
            },
            mirror: function(t) {
                return this.reflect(t).negate()
            },
            rotate: function(t) {
                var e = Math.cos(t)
                  , i = Math.sin(t);
                return this.set(e * this.x - i * this.y, i * this.x + e * this.y)
            }
        });
        r.ZERO = new r,
        r.RIGHT = new r(1,0),
        r.LEFT = new r(-1,0),
        r.UP = new r(0,-1),
        r.DOWN = new r(0,1),
        r.ONE = new r(1,1),
        t.exports = r
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(56)
          , r = new n({
            initialize: function(t, e) {
                void 0 === t && (t = 0),
                void 0 === e && (e = t),
                this.type = s.POINT,
                this.x = t,
                this.y = e
            },
            setTo: function(t, e) {
                return void 0 === t && (t = 0),
                void 0 === e && (e = t),
                this.x = t,
                this.y = e,
                this
            }
        });
        t.exports = r
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(24)
          , r = i(20)
          , o = new n({
            initialize: function(t) {
                this.scene = t,
                this.systems = t.sys,
                this.events = t.sys.events,
                this.displayList,
                this.updateList,
                this.events.once(r.BOOT, this.boot, this),
                this.events.on(r.START, this.start, this)
            },
            boot: function() {
                this.displayList = this.systems.displayList,
                this.updateList = this.systems.updateList,
                this.events.once(r.DESTROY, this.destroy, this)
            },
            start: function() {
                this.events.once(r.SHUTDOWN, this.shutdown, this)
            },
            existing: function(t) {
                return (t.renderCanvas || t.renderWebGL) && this.displayList.add(t),
                t.preUpdate && this.updateList.add(t),
                t
            },
            shutdown: function() {
                this.events.off(r.SHUTDOWN, this.shutdown, this)
            },
            destroy: function() {
                this.shutdown(),
                this.events.off(r.START, this.start, this),
                this.scene = null,
                this.systems = null,
                this.events = null,
                this.displayList = null,
                this.updateList = null
            }
        });
        o.register = function(t, e) {
            o.prototype.hasOwnProperty(t) || (o.prototype[t] = e)
        }
        ,
        o.remove = function(t) {
            o.prototype.hasOwnProperty(t) && delete o.prototype[t]
        }
        ,
        s.register("GameObjectFactory", o, "add"),
        t.exports = o
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            if (t && "number" != typeof t) {
                if (t.hasOwnProperty(e))
                    return t[e];
                if (-1 === e.indexOf("."))
                    return i;
                for (var n = e.split("."), s = t, r = i, o = 0; o < n.length; o++) {
                    if (!s.hasOwnProperty(n[o])) {
                        r = i;
                        break
                    }
                    r = s[n[o]],
                    s = s[n[o]]
                }
                return r
            }
            return i
        }
    }
    , function(t, e) {
        t.exports = function(t) {
            if ("object" != typeof t || t.nodeType || t === t.window)
                return !1;
            try {
                if (t.constructor && !{}.hasOwnProperty.call(t.constructor.prototype, "isPrototypeOf"))
                    return !1
            } catch (t) {
                return !1
            }
            return !0
        }
    }
    , function(t, e) {
        var i = {}
          , n = {
            install: function(t) {
                for (var e in i)
                    t[e] = i[e]
            },
            register: function(t, e) {
                i[t] = e
            },
            destroy: function() {
                i = {}
            }
        };
        t.exports = n
    }
    , function(t, e, i) {
        "use strict";
        var n = Object.prototype.hasOwnProperty
          , p = "~";
        function s() {}
        function a(t, e, i) {
            this.fn = t,
            this.context = e,
            this.once = i || !1
        }
        function r(t, e, i, n, s) {
            if ("function" != typeof i)
                throw new TypeError("The listener must be a function");
            var r = new a(i,n || t,s)
              , o = p ? p + e : e;
            return t._events[o] ? t._events[o].fn ? t._events[o] = [t._events[o], r] : t._events[o].push(r) : (t._events[o] = r,
            t._eventsCount++),
            t
        }
        function l(t, e) {
            0 == --t._eventsCount ? t._events = new s : delete t._events[e]
        }
        function o() {
            this._events = new s,
            this._eventsCount = 0
        }
        Object.create && (s.prototype = Object.create(null),
        (new s).__proto__ || (p = !1)),
        o.prototype.eventNames = function() {
            var t, e, i = [];
            if (0 === this._eventsCount)
                return i;
            for (e in t = this._events)
                n.call(t, e) && i.push(p ? e.slice(1) : e);
            return Object.getOwnPropertySymbols ? i.concat(Object.getOwnPropertySymbols(t)) : i
        }
        ,
        o.prototype.listeners = function(t) {
            var e = p ? p + t : t
              , i = this._events[e];
            if (!i)
                return [];
            if (i.fn)
                return [i.fn];
            for (var n = 0, s = i.length, r = new Array(s); n < s; n++)
                r[n] = i[n].fn;
            return r
        }
        ,
        o.prototype.listenerCount = function(t) {
            var e = p ? p + t : t
              , i = this._events[e];
            return i ? i.fn ? 1 : i.length : 0
        }
        ,
        o.prototype.emit = function(t, e, i, n, s, r) {
            var o = p ? p + t : t;
            if (!this._events[o])
                return !1;
            var a, h = this._events[o], l = arguments.length;
            if (h.fn) {
                switch (h.once && this.removeListener(t, h.fn, void 0, !0),
                l) {
                case 1:
                    return h.fn.call(h.context),
                    !0;
                case 2:
                    return h.fn.call(h.context, e),
                    !0;
                case 3:
                    return h.fn.call(h.context, e, i),
                    !0;
                case 4:
                    return h.fn.call(h.context, e, i, n),
                    !0;
                case 5:
                    return h.fn.call(h.context, e, i, n, s),
                    !0;
                case 6:
                    return h.fn.call(h.context, e, i, n, s, r),
                    !0
                }
                for (d = 1,
                a = new Array(l - 1); d < l; d++)
                    a[d - 1] = arguments[d];
                h.fn.apply(h.context, a)
            } else
                for (var u, c = h.length, d = 0; d < c; d++)
                    switch (h[d].once && this.removeListener(t, h[d].fn, void 0, !0),
                    l) {
                    case 1:
                        h[d].fn.call(h[d].context);
                        break;
                    case 2:
                        h[d].fn.call(h[d].context, e);
                        break;
                    case 3:
                        h[d].fn.call(h[d].context, e, i);
                        break;
                    case 4:
                        h[d].fn.call(h[d].context, e, i, n);
                        break;
                    default:
                        if (!a)
                            for (u = 1,
                            a = new Array(l - 1); u < l; u++)
                                a[u - 1] = arguments[u];
                        h[d].fn.apply(h[d].context, a)
                    }
            return !0
        }
        ,
        o.prototype.on = function(t, e, i) {
            return r(this, t, e, i, !1)
        }
        ,
        o.prototype.once = function(t, e, i) {
            return r(this, t, e, i, !0)
        }
        ,
        o.prototype.removeListener = function(t, e, i, n) {
            var s = p ? p + t : t;
            if (!this._events[s])
                return this;
            if (!e)
                return l(this, s),
                this;
            var r = this._events[s];
            if (r.fn)
                r.fn !== e || n && !r.once || i && r.context !== i || l(this, s);
            else {
                for (var o = 0, a = [], h = r.length; o < h; o++)
                    (r[o].fn !== e || n && !r[o].once || i && r[o].context !== i) && a.push(r[o]);
                a.length ? this._events[s] = 1 === a.length ? a[0] : a : l(this, s)
            }
            return this
        }
        ,
        o.prototype.removeAllListeners = function(t) {
            var e;
            return t ? (e = p ? p + t : t,
            this._events[e] && l(this, e)) : (this._events = new s,
            this._eventsCount = 0),
            this
        }
        ,
        o.prototype.off = o.prototype.removeListener,
        o.prototype.addListener = o.prototype.on,
        o.prefixed = p,
        o.EventEmitter = o,
        t.exports = o
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(57)
          , r = i(171)
          , o = i(306)
          , a = i(56)
          , h = i(47)
          , l = i(174)
          , u = new n({
            initialize: function(t, e, i, n) {
                void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                void 0 === n && (n = 0),
                this.type = a.RECTANGLE,
                this.x = t,
                this.y = e,
                this.width = i,
                this.height = n
            },
            contains: function(t, e) {
                return s(this, t, e)
            },
            getPoint: function(t, e) {
                return r(this, t, e)
            },
            getPoints: function(t, e, i) {
                return o(this, t, e, i)
            },
            getRandomPoint: function(t) {
                return l(this, t)
            },
            setTo: function(t, e, i, n) {
                return this.x = t,
                this.y = e,
                this.width = i,
                this.height = n,
                this
            },
            setEmpty: function() {
                return this.setTo(0, 0, 0, 0)
            },
            setPosition: function(t, e) {
                return void 0 === e && (e = t),
                this.x = t,
                this.y = e,
                this
            },
            setSize: function(t, e) {
                return void 0 === e && (e = t),
                this.width = t,
                this.height = e,
                this
            },
            isEmpty: function() {
                return this.width <= 0 || this.height <= 0
            },
            getLineA: function(t) {
                return void 0 === t && (t = new h),
                t.setTo(this.x, this.y, this.right, this.y),
                t
            },
            getLineB: function(t) {
                return void 0 === t && (t = new h),
                t.setTo(this.right, this.y, this.right, this.bottom),
                t
            },
            getLineC: function(t) {
                return void 0 === t && (t = new h),
                t.setTo(this.right, this.bottom, this.x, this.bottom),
                t
            },
            getLineD: function(t) {
                return void 0 === t && (t = new h),
                t.setTo(this.x, this.bottom, this.x, this.y),
                t
            },
            left: {
                get: function() {
                    return this.x
                },
                set: function(t) {
                    t >= this.right ? this.width = 0 : this.width = this.right - t,
                    this.x = t
                }
            },
            right: {
                get: function() {
                    return this.x + this.width
                },
                set: function(t) {
                    t <= this.x ? this.width = 0 : this.width = t - this.x
                }
            },
            top: {
                get: function() {
                    return this.y
                },
                set: function(t) {
                    t >= this.bottom ? this.height = 0 : this.height = this.bottom - t,
                    this.y = t
                }
            },
            bottom: {
                get: function() {
                    return this.y + this.height
                },
                set: function(t) {
                    t <= this.y ? this.height = 0 : this.height = t - this.y
                }
            },
            centerX: {
                get: function() {
                    return this.x + this.width / 2
                },
                set: function(t) {
                    this.x = t - this.width / 2
                }
            },
            centerY: {
                get: function() {
                    return this.y + this.height / 2
                },
                set: function(t) {
                    this.y = t - this.height / 2
                }
            }
        });
        t.exports = u
    }
    , function(t, e, i) {
        t.exports = {
            Alpha: i(607),
            AlphaSingle: i(303),
            BlendMode: i(304),
            ComputedSize: i(608),
            Crop: i(609),
            Depth: i(305),
            Flip: i(610),
            GetBounds: i(611),
            Mask: i(309),
            Origin: i(632),
            PathFollower: i(633),
            Pipeline: i(167),
            ScrollFactor: i(312),
            Size: i(634),
            Texture: i(635),
            TextureCrop: i(636),
            Tint: i(637),
            ToJSON: i(176),
            Transform: i(313),
            TransformMatrix: i(25),
            Visible: i(314)
        }
    }
    , function(t, e) {
        t.exports = {
            getTintFromFloats: function(t, e, i, n) {
                return ((255 & (255 * n | 0)) << 24 | (255 & (255 * t | 0)) << 16 | (255 & (255 * e | 0)) << 8 | 255 & (255 * i | 0)) >>> 0
            },
            getTintAppendFloatAlpha: function(t, e) {
                return ((255 & (255 * e | 0)) << 24 | t) >>> 0
            },
            getTintAppendFloatAlphaAndSwap: function(t, e) {
                return ((255 & (255 * e | 0)) << 24 | (255 & (0 | t)) << 16 | (255 & (t >> 8 | 0)) << 8 | 255 & (t >> 16 | 0)) >>> 0
            },
            getFloatsFromUintRGB: function(t) {
                return [(255 & (t >> 16 | 0)) / 255, (255 & (t >> 8 | 0)) / 255, (255 & (0 | t)) / 255]
            },
            checkShaderMax: function(t, e) {
                e && -1 !== e || (e = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS));
                for (var i = t.createShader(t.FRAGMENT_SHADER), n = ["precision mediump float;", "void main(void){", "float test = 0.1;", "%forloop%", "gl_FragColor = vec4(0.0);", "}"].join("\n"); ; ) {
                    var s = n.replace(/%forloop%/gi, function(t) {
                        for (var e = "", i = 0; i < t; ++i)
                            0 < i && (e += "\nelse "),
                            i < t - 1 && (e += "if(test == " + i + ".0){}");
                        return e
                    }(e));
                    if (t.shaderSource(i, s),
                    t.compileShader(i),
                    t.getShaderParameter(i, t.COMPILE_STATUS))
                        break;
                    e = e / 2 | 0
                }
                return e
            },
            parseFragmentShaderMaxTextures: function(t, e) {
                if (!t)
                    return "";
                for (var i = "", n = 0; n < e; n++)
                    0 < n && (i += "\n\telse "),
                    n < e - 1 && (i += "if (outTexId < " + n + ".5)"),
                    i += "\n\t{",
                    i += "\n\t\ttexture = texture2D(uMainSampler[" + n + "], outTexCoord);",
                    i += "\n\t}";
                return (t = t.replace(/%count%/gi, e.toString())).replace(/%forloop%/gi, i)
            }
        }
    }
    , function(t, e, i) {
        var s = i(193)
          , r = i(6);
        t.exports = function(t, e, i) {
            var n = r(t, e, null);
            if (null === n)
                return i;
            if (Array.isArray(n))
                return s.RND.pick(n);
            if ("object" == typeof n) {
                if (n.hasOwnProperty("randInt"))
                    return s.RND.integerInRange(n.randInt[0], n.randInt[1]);
                if (n.hasOwnProperty("randFloat"))
                    return s.RND.realInRange(n.randFloat[0], n.randFloat[1])
            } else if ("function" == typeof n)
                return n(e);
            return n
        }
    }
    , function(t, e) {
        var i = {
            PI2: 2 * Math.PI,
            TAU: .5 * Math.PI,
            EPSILON: 1e-6,
            DEG_TO_RAD: Math.PI / 180,
            RAD_TO_DEG: 180 / Math.PI,
            RND: null,
            MIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER || -9007199254740991,
            MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || 9007199254740991
        };
        t.exports = i
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(176)
          , r = i(101)
          , o = i(9)
          , a = i(75)
          , h = i(20)
          , l = new n({
            Extends: o,
            initialize: function(t, e) {
                o.call(this),
                this.scene = t,
                this.displayList = null,
                this.type = e,
                this.state = 0,
                this.parentContainer = null,
                this.name = "",
                this.active = !0,
                this.tabIndex = -1,
                this.data = null,
                this.renderFlags = 15,
                this.cameraFilter = 0,
                this.input = null,
                this.body = null,
                this.ignoreDestroy = !1,
                this.on(a.ADDED_TO_SCENE, this.addedToScene, this),
                this.on(a.REMOVED_FROM_SCENE, this.removedFromScene, this),
                t.sys.queueDepthSort()
            },
            setActive: function(t) {
                return this.active = t,
                this
            },
            setName: function(t) {
                return this.name = t,
                this
            },
            setState: function(t) {
                return this.state = t,
                this
            },
            setDataEnabled: function() {
                return this.data || (this.data = new r(this)),
                this
            },
            setData: function(t, e) {
                return this.data || (this.data = new r(this)),
                this.data.set(t, e),
                this
            },
            incData: function(t, e) {
                return this.data || (this.data = new r(this)),
                this.data.inc(t, e),
                this
            },
            toggleData: function(t) {
                return this.data || (this.data = new r(this)),
                this.data.toggle(t),
                this
            },
            getData: function(t) {
                return this.data || (this.data = new r(this)),
                this.data.get(t)
            },
            setInteractive: function(t, e, i) {
                return this.scene.sys.input.enable(this, t, e, i),
                this
            },
            disableInteractive: function() {
                return this.input && (this.input.enabled = !1),
                this
            },
            removeInteractive: function() {
                return this.scene.sys.input.clear(this),
                this.input = void 0,
                this
            },
            addedToScene: function() {},
            removedFromScene: function() {},
            update: function() {},
            toJSON: function() {
                return s(this)
            },
            willRender: function(t) {
                return !(l.RENDER_MASK !== this.renderFlags || 0 !== this.cameraFilter && this.cameraFilter & t.id)
            },
            getIndexList: function() {
                for (var t = this, e = this.parentContainer, i = []; e && (i.unshift(e.getIndex(t)),
                (t = e).parentContainer); )
                    e = e.parentContainer;
                return this.displayList ? i.unshift(this.displayList.getIndex(t)) : i.unshift(this.scene.sys.displayList.getIndex(t)),
                i
            },
            addToDisplayList: function(t) {
                return void 0 === t && (t = this.scene.sys.displayList),
                this.displayList && this.displayList !== t && this.removeFromDisplayList(),
                t.exists(this) || ((this.displayList = t).add(this, !0),
                t.queueDepthSort(),
                this.emit(a.ADDED_TO_SCENE, this, this.scene),
                t.events.emit(h.ADDED_TO_SCENE, this, this.scene)),
                this
            },
            addToUpdateList: function() {
                return this.scene && this.preUpdate && this.scene.sys.updateList.add(this),
                this
            },
            removeFromDisplayList: function() {
                var t = this.displayList || this.scene.sys.displayList;
                return t.exists(this) && (t.remove(this, !0),
                t.queueDepthSort(),
                this.displayList = null,
                this.emit(a.REMOVED_FROM_SCENE, this, this.scene),
                t.events.emit(h.REMOVED_FROM_SCENE, this, this.scene)),
                this
            },
            removeFromUpdateList: function() {
                return this.scene && this.preUpdate && this.scene.sys.updateList.remove(this),
                this
            },
            destroy: function(t) {
                this.scene && !this.ignoreDestroy && (void 0 === t && (t = !1),
                this.preDestroy && this.preDestroy.call(this),
                this.emit(a.DESTROY, this, t),
                this.removeAllListeners(),
                this.postPipelines && this.resetPostPipeline(!0),
                this.removeFromDisplayList(),
                this.removeFromUpdateList(),
                this.input && (this.scene.sys.input.clear(this),
                this.input = void 0),
                this.data && (this.data.destroy(),
                this.data = void 0),
                this.body && (this.body.destroy(),
                this.body = void 0),
                this.active = !1,
                this.visible = !1,
                this.scene = void 0,
                this.parentContainer = void 0)
            }
        });
        l.RENDER_MASK = 15,
        t.exports = l
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(24)
          , r = i(20)
          , o = new n({
            initialize: function(t) {
                this.scene = t,
                this.systems = t.sys,
                this.events = t.sys.events,
                this.displayList,
                this.updateList,
                this.events.once(r.BOOT, this.boot, this),
                this.events.on(r.START, this.start, this)
            },
            boot: function() {
                this.displayList = this.systems.displayList,
                this.updateList = this.systems.updateList,
                this.events.once(r.DESTROY, this.destroy, this)
            },
            start: function() {
                this.events.once(r.SHUTDOWN, this.shutdown, this)
            },
            shutdown: function() {
                this.events.off(r.SHUTDOWN, this.shutdown, this)
            },
            destroy: function() {
                this.shutdown(),
                this.events.off(r.START, this.start, this),
                this.scene = null,
                this.systems = null,
                this.events = null,
                this.displayList = null,
                this.updateList = null
            }
        });
        o.register = function(t, e) {
            o.prototype.hasOwnProperty(t) || (o.prototype[t] = e)
        }
        ,
        o.remove = function(t) {
            o.prototype.hasOwnProperty(t) && delete o.prototype[t]
        }
        ,
        s.register("GameObjectCreator", o, "make"),
        t.exports = o
    }
    , function(t, e, i) {
        var u = i(7)
          , c = function() {
            var t, e, i, n, s, r, o = arguments[0] || {}, a = 1, h = arguments.length, l = !1;
            for ("boolean" == typeof o && (l = o,
            o = arguments[1] || {},
            a = 2),
            h === a && (o = this,
            --a); a < h; a++)
                if (null != (t = arguments[a]))
                    for (e in t)
                        i = o[e],
                        o !== (n = t[e]) && (l && n && (u(n) || (s = Array.isArray(n))) ? (r = s ? (s = !1,
                        i && Array.isArray(i) ? i : []) : i && u(i) ? i : {},
                        o[e] = c(l, r, n)) : void 0 !== n && (o[e] = n));
            return o
        };
        t.exports = c
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            return Math.max(e, Math.min(i, t))
        }
    }
    , function(t, e, i) {
        var n = i(25)
          , o = new n
          , a = new n
          , h = new n
          , l = {
            camera: o,
            sprite: a,
            calc: h
        };
        t.exports = function(t, e, i) {
            var n = o
              , s = a
              , r = h;
            return s.applyITRS(t.x, t.y, t.rotation, t.scaleX, t.scaleY),
            n.copyFrom(e.matrix),
            i ? (n.multiplyWithOffset(i, -e.scrollX * t.scrollFactorX, -e.scrollY * t.scrollFactorY),
            s.e = t.x,
            s.f = t.y) : (s.e -= e.scrollX * t.scrollFactorX,
            s.f -= e.scrollY * t.scrollFactorY),
            n.multiply(s, r),
            l
        }
    }
    , function(t, e, i) {
        t.exports = {
            ADDED_TO_SCENE: i(656),
            BOOT: i(657),
            CREATE: i(658),
            DESTROY: i(659),
            PAUSE: i(660),
            POST_UPDATE: i(661),
            PRE_RENDER: i(662),
            PRE_UPDATE: i(663),
            READY: i(664),
            REMOVED_FROM_SCENE: i(665),
            RENDER: i(666),
            RESUME: i(667),
            SHUTDOWN: i(668),
            SLEEP: i(669),
            START: i(670),
            TRANSITION_COMPLETE: i(671),
            TRANSITION_INIT: i(672),
            TRANSITION_OUT: i(673),
            TRANSITION_START: i(674),
            TRANSITION_WAKE: i(675),
            UPDATE: i(676),
            WAKE: i(677)
        }
    }
    , function(t, e) {
        t.exports = {
            LOADER_IDLE: 0,
            LOADER_LOADING: 1,
            LOADER_PROCESSING: 2,
            LOADER_COMPLETE: 3,
            LOADER_SHUTDOWN: 4,
            LOADER_DESTROYED: 5,
            FILE_PENDING: 10,
            FILE_LOADING: 11,
            FILE_LOADED: 12,
            FILE_FAILED: 13,
            FILE_PROCESSING: 14,
            FILE_ERRORED: 16,
            FILE_COMPLETE: 17,
            FILE_DESTROYED: 18,
            FILE_POPULATED: 19
        }
    }
    , function(t, e, i) {
        t.exports = {
            BLUR: i(612),
            BOOT: i(613),
            CONTEXT_LOST: i(614),
            CONTEXT_RESTORED: i(615),
            DESTROY: i(616),
            FOCUS: i(617),
            HIDDEN: i(618),
            PAUSE: i(619),
            POST_RENDER: i(620),
            POST_STEP: i(621),
            PRE_RENDER: i(622),
            PRE_STEP: i(623),
            READY: i(624),
            RESUME: i(625),
            STEP: i(626),
            VISIBLE: i(627)
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(21)
          , r = i(95)
          , o = i(2)
          , a = i(155)
          , h = i(240)
          , l = i(517)
          , u = i(156)
          , c = new n({
            initialize: function(t, e) {
                this.loader = t,
                this.cache = o(e, "cache", !1),
                this.type = o(e, "type", !1),
                this.key = o(e, "key", !1);
                var i = this.key;
                if (t.prefix && "" !== t.prefix && (this.key = t.prefix + i),
                !this.type || !this.key)
                    throw new Error("Invalid Loader." + this.type + " key");
                var n = o(e, "url");
                void 0 === n ? n = t.path + i + "." + o(e, "extension", "") : "string" != typeof n || n.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/) || (n = t.path + n),
                this.url = n,
                this.src = "",
                this.xhrSettings = u(o(e, "responseType", void 0)),
                o(e, "xhrSettings", !1) && (this.xhrSettings = h(this.xhrSettings, o(e, "xhrSettings", {}))),
                this.xhrLoader = null,
                this.state = "function" == typeof this.url ? s.FILE_POPULATED : s.FILE_PENDING,
                this.bytesTotal = 0,
                this.bytesLoaded = -1,
                this.percentComplete = -1,
                this.crossOrigin = void 0,
                this.data = void 0,
                this.config = o(e, "config", {}),
                this.multiFile,
                this.linkFile
            },
            setLink: function(t) {
                (this.linkFile = t).linkFile = this
            },
            resetXHR: function() {
                this.xhrLoader && (this.xhrLoader.onload = void 0,
                this.xhrLoader.onerror = void 0,
                this.xhrLoader.onprogress = void 0)
            },
            load: function() {
                this.state === s.FILE_POPULATED ? this.loader.nextFile(this, !0) : (this.state = s.FILE_LOADING,
                this.src = a(this, this.loader.baseURL),
                0 === this.src.indexOf("data:") ? console.warn("Local data URIs are not supported: " + this.key) : this.xhrLoader = l(this, this.loader.xhr))
            },
            onLoad: function(t, e) {
                var i = t.responseURL && (0 === t.responseURL.indexOf("file://") || 0 === t.responseURL.indexOf("capacitor://")) && 0 === e.target.status
                  , n = !(e.target && 200 !== e.target.status) || i;
                4 === t.readyState && 400 <= t.status && t.status <= 599 && (n = !1),
                this.state = s.FILE_LOADED,
                this.resetXHR(),
                this.loader.nextFile(this, n)
            },
            onError: function() {
                this.resetXHR(),
                this.loader.nextFile(this, !1)
            },
            onProgress: function(t) {
                t.lengthComputable && (this.bytesLoaded = t.loaded,
                this.bytesTotal = t.total,
                this.percentComplete = Math.min(this.bytesLoaded / this.bytesTotal, 1),
                this.loader.emit(r.FILE_PROGRESS, this, this.percentComplete))
            },
            onProcess: function() {
                this.state = s.FILE_PROCESSING,
                this.onProcessComplete()
            },
            onProcessComplete: function() {
                this.state = s.FILE_COMPLETE,
                this.multiFile && this.multiFile.onFileComplete(this),
                this.loader.fileProcessComplete(this)
            },
            onProcessError: function() {
                this.state = s.FILE_ERRORED,
                this.multiFile && this.multiFile.onFileFailed(this),
                this.loader.fileProcessComplete(this)
            },
            hasCacheConflict: function() {
                return this.cache && this.cache.exists(this.key)
            },
            addToCache: function() {
                this.cache && this.cache.add(this.key, this.data),
                this.pendingDestroy()
            },
            pendingDestroy: function(t) {
                void 0 === t && (t = this.data);
                var e = this.key
                  , i = this.type;
                this.loader.emit(r.FILE_COMPLETE, e, i, t),
                this.loader.emit(r.FILE_KEY_COMPLETE + i + "-" + e, e, i, t),
                this.loader.flagForRemoval(this)
            },
            destroy: function() {
                this.loader = null,
                this.cache = null,
                this.xhrSettings = null,
                this.multiFile = null,
                this.linkFile = null,
                this.data = null
            }
        });
        c.createObjectURL = function(t, e, i) {
            var n;
            "function" == typeof URL ? t.src = URL.createObjectURL(e) : ((n = new FileReader).onload = function() {
                t.removeAttribute("crossOrigin"),
                t.src = "data:" + (e.type || i) + ";base64," + n.result.split(",")[1]
            }
            ,
            n.onerror = t.onerror,
            n.readAsDataURL(e))
        }
        ,
        c.revokeObjectURL = function(t) {
            "function" == typeof URL && URL.revokeObjectURL(t.src)
        }
        ,
        t.exports = c
    }
    , function(t, e) {
        var s = {}
          , r = {}
          , i = {
            register: function(t, e, i, n) {
                void 0 === n && (n = !1),
                s[t] = {
                    plugin: e,
                    mapping: i,
                    custom: n
                }
            },
            registerCustom: function(t, e, i, n) {
                r[t] = {
                    plugin: e,
                    mapping: i,
                    data: n
                }
            },
            hasCore: function(t) {
                return s.hasOwnProperty(t)
            },
            hasCustom: function(t) {
                return r.hasOwnProperty(t)
            },
            getCore: function(t) {
                return s[t]
            },
            getCustom: function(t) {
                return r[t]
            },
            getCustomClass: function(t) {
                return r.hasOwnProperty(t) ? r[t].plugin : null
            },
            remove: function(t) {
                s.hasOwnProperty(t) && delete s[t]
            },
            removeCustom: function(t) {
                r.hasOwnProperty(t) && delete r[t]
            },
            destroyCorePlugins: function() {
                for (var t in s)
                    s.hasOwnProperty(t) && delete s[t]
            },
            destroyCustomPlugins: function() {
                for (var t in r)
                    r.hasOwnProperty(t) && delete r[t]
            }
        };
        t.exports = i
    }
    , function(t, e, i) {
        var n = i(0)
          , r = i(14)
          , c = i(3)
          , s = new n({
            initialize: function(t, e, i, n, s, r) {
                void 0 === t && (t = 1),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                void 0 === n && (n = 1),
                void 0 === s && (s = 0),
                void 0 === r && (r = 0),
                this.matrix = new Float32Array([t, e, i, n, s, r, 0, 0, 1]),
                this.decomposedMatrix = {
                    translateX: 0,
                    translateY: 0,
                    scaleX: 1,
                    scaleY: 1,
                    rotation: 0
                }
            },
            a: {
                get: function() {
                    return this.matrix[0]
                },
                set: function(t) {
                    this.matrix[0] = t
                }
            },
            b: {
                get: function() {
                    return this.matrix[1]
                },
                set: function(t) {
                    this.matrix[1] = t
                }
            },
            c: {
                get: function() {
                    return this.matrix[2]
                },
                set: function(t) {
                    this.matrix[2] = t
                }
            },
            d: {
                get: function() {
                    return this.matrix[3]
                },
                set: function(t) {
                    this.matrix[3] = t
                }
            },
            e: {
                get: function() {
                    return this.matrix[4]
                },
                set: function(t) {
                    this.matrix[4] = t
                }
            },
            f: {
                get: function() {
                    return this.matrix[5]
                },
                set: function(t) {
                    this.matrix[5] = t
                }
            },
            tx: {
                get: function() {
                    return this.matrix[4]
                },
                set: function(t) {
                    this.matrix[4] = t
                }
            },
            ty: {
                get: function() {
                    return this.matrix[5]
                },
                set: function(t) {
                    this.matrix[5] = t
                }
            },
            rotation: {
                get: function() {
                    return Math.acos(this.a / this.scaleX) * (Math.atan(-this.c / this.a) < 0 ? -1 : 1)
                }
            },
            rotationNormalized: {
                get: function() {
                    var t = this.matrix
                      , e = t[0]
                      , i = t[1]
                      , n = t[2]
                      , s = t[3];
                    return e || i ? 0 < i ? Math.acos(e / this.scaleX) : -Math.acos(e / this.scaleX) : n || s ? r.TAU - (0 < s ? Math.acos(-n / this.scaleY) : -Math.acos(n / this.scaleY)) : 0
                }
            },
            scaleX: {
                get: function() {
                    return Math.sqrt(this.a * this.a + this.b * this.b)
                }
            },
            scaleY: {
                get: function() {
                    return Math.sqrt(this.c * this.c + this.d * this.d)
                }
            },
            loadIdentity: function() {
                var t = this.matrix;
                return t[0] = 1,
                t[1] = 0,
                t[2] = 0,
                t[3] = 1,
                t[4] = 0,
                t[5] = 0,
                this
            },
            translate: function(t, e) {
                var i = this.matrix;
                return i[4] = i[0] * t + i[2] * e + i[4],
                i[5] = i[1] * t + i[3] * e + i[5],
                this
            },
            scale: function(t, e) {
                var i = this.matrix;
                return i[0] *= t,
                i[1] *= t,
                i[2] *= e,
                i[3] *= e,
                this
            },
            rotate: function(t) {
                var e = Math.sin(t)
                  , i = Math.cos(t)
                  , n = this.matrix
                  , s = n[0]
                  , r = n[1]
                  , o = n[2]
                  , a = n[3];
                return n[0] = s * i + o * e,
                n[1] = r * i + a * e,
                n[2] = s * -e + o * i,
                n[3] = r * -e + a * i,
                this
            },
            multiply: function(t, e) {
                var i = this.matrix
                  , n = t.matrix
                  , s = i[0]
                  , r = i[1]
                  , o = i[2]
                  , a = i[3]
                  , h = i[4]
                  , l = i[5]
                  , u = n[0]
                  , c = n[1]
                  , d = n[2]
                  , p = n[3]
                  , f = n[4]
                  , g = n[5]
                  , v = void 0 === e ? this : e;
                return v.a = u * s + c * o,
                v.b = u * r + c * a,
                v.c = d * s + p * o,
                v.d = d * r + p * a,
                v.e = f * s + g * o + h,
                v.f = f * r + g * a + l,
                v
            },
            multiplyWithOffset: function(t, e, i) {
                var n = this.matrix
                  , s = t.matrix
                  , r = n[0]
                  , o = n[1]
                  , a = n[2]
                  , h = n[3]
                  , l = e * r + i * a + n[4]
                  , u = e * o + i * h + n[5]
                  , c = s[0]
                  , d = s[1]
                  , p = s[2]
                  , f = s[3]
                  , g = s[4]
                  , v = s[5];
                return n[0] = c * r + d * a,
                n[1] = c * o + d * h,
                n[2] = p * r + f * a,
                n[3] = p * o + f * h,
                n[4] = g * r + v * a + l,
                n[5] = g * o + v * h + u,
                this
            },
            transform: function(t, e, i, n, s, r) {
                var o = this.matrix
                  , a = o[0]
                  , h = o[1]
                  , l = o[2]
                  , u = o[3]
                  , c = o[4]
                  , d = o[5];
                return o[0] = t * a + e * l,
                o[1] = t * h + e * u,
                o[2] = i * a + n * l,
                o[3] = i * h + n * u,
                o[4] = s * a + r * l + c,
                o[5] = s * h + r * u + d,
                this
            },
            transformPoint: function(t, e, i) {
                void 0 === i && (i = {
                    x: 0,
                    y: 0
                });
                var n = this.matrix
                  , s = n[0]
                  , r = n[1]
                  , o = n[2]
                  , a = n[3]
                  , h = n[4]
                  , l = n[5];
                return i.x = t * s + e * o + h,
                i.y = t * r + e * a + l,
                i
            },
            invert: function() {
                var t = this.matrix
                  , e = t[0]
                  , i = t[1]
                  , n = t[2]
                  , s = t[3]
                  , r = t[4]
                  , o = t[5]
                  , a = e * s - i * n;
                return t[0] = s / a,
                t[1] = -i / a,
                t[2] = -n / a,
                t[3] = e / a,
                t[4] = (n * o - s * r) / a,
                t[5] = -(e * o - i * r) / a,
                this
            },
            copyFrom: function(t) {
                var e = this.matrix;
                return e[0] = t.a,
                e[1] = t.b,
                e[2] = t.c,
                e[3] = t.d,
                e[4] = t.e,
                e[5] = t.f,
                this
            },
            copyFromArray: function(t) {
                var e = this.matrix;
                return e[0] = t[0],
                e[1] = t[1],
                e[2] = t[2],
                e[3] = t[3],
                e[4] = t[4],
                e[5] = t[5],
                this
            },
            copyToContext: function(t) {
                var e = this.matrix;
                return t.transform(e[0], e[1], e[2], e[3], e[4], e[5]),
                t
            },
            setToContext: function(t) {
                var e = this.matrix;
                return t.setTransform(e[0], e[1], e[2], e[3], e[4], e[5]),
                t
            },
            copyToArray: function(t) {
                var e = this.matrix;
                return void 0 === t ? t = [e[0], e[1], e[2], e[3], e[4], e[5]] : (t[0] = e[0],
                t[1] = e[1],
                t[2] = e[2],
                t[3] = e[3],
                t[4] = e[4],
                t[5] = e[5]),
                t
            },
            setTransform: function(t, e, i, n, s, r) {
                var o = this.matrix;
                return o[0] = t,
                o[1] = e,
                o[2] = i,
                o[3] = n,
                o[4] = s,
                o[5] = r,
                this
            },
            decomposeMatrix: function() {
                var t, e, i = this.decomposedMatrix, n = this.matrix, s = n[0], r = n[1], o = n[2], a = n[3], h = s * a - r * o;
                return i.translateX = n[4],
                i.translateY = n[5],
                s || r ? (t = Math.sqrt(s * s + r * r),
                i.rotation = 0 < r ? Math.acos(s / t) : -Math.acos(s / t),
                i.scaleX = t,
                i.scaleY = h / t) : o || a ? (e = Math.sqrt(o * o + a * a),
                i.rotation = .5 * Math.PI - (0 < a ? Math.acos(-o / e) : -Math.acos(o / e)),
                i.scaleX = h / e,
                i.scaleY = e) : (i.rotation = 0,
                i.scaleX = 0,
                i.scaleY = 0),
                i
            },
            applyITRS: function(t, e, i, n, s) {
                var r = this.matrix
                  , o = Math.sin(i)
                  , a = Math.cos(i);
                return r[4] = t,
                r[5] = e,
                r[0] = a * n,
                r[1] = o * n,
                r[2] = -o * s,
                r[3] = a * s,
                this
            },
            applyInverse: function(t, e, i) {
                void 0 === i && (i = new c);
                var n = this.matrix
                  , s = n[0]
                  , r = n[1]
                  , o = n[2]
                  , a = n[3]
                  , h = n[4]
                  , l = n[5]
                  , u = 1 / (s * a + o * -r);
                return i.x = a * u * t + -o * u * e + (l * o - h * a) * u,
                i.y = s * u * e + -r * u * t + (-l * s + h * r) * u,
                i
            },
            getX: function(t, e) {
                return t * this.a + e * this.c + this.e
            },
            getY: function(t, e) {
                return t * this.b + e * this.d + this.f
            },
            getXRound: function(t, e, i) {
                var n = this.getX(t, e);
                return i && (n = Math.round(n)),
                n
            },
            getYRound: function(t, e, i) {
                var n = this.getY(t, e);
                return i && (n = Math.round(n)),
                n
            },
            getCSSMatrix: function() {
                var t = this.matrix;
                return "matrix(" + t[0] + "," + t[1] + "," + t[2] + "," + t[3] + "," + t[4] + "," + t[5] + ")"
            },
            destroy: function() {
                this.matrix = null,
                this.decomposedMatrix = null
            }
        });
        t.exports = s
    }
    , function(t, e, i) {
        var p = i(2);
        t.exports = function(t, e, i, n, s, r) {
            void 0 === t && (t = 0),
            void 0 === e && (e = 0),
            void 0 === i && (i = r.width),
            void 0 === n && (n = r.height);
            var o = p(s = s || {}, "isNotEmpty", !1)
              , a = p(s, "isColliding", !1)
              , h = p(s, "hasInterestingFace", !1);
            t < 0 && (i += t,
            t = 0),
            e < 0 && (n += e,
            e = 0),
            t + i > r.width && (i = Math.max(r.width - t, 0)),
            e + n > r.height && (n = Math.max(r.height - e, 0));
            for (var l = [], u = e; u < e + n; u++)
                for (var c = t; c < t + i; c++) {
                    var d = r.data[u][c];
                    if (null !== d) {
                        if (o && -1 === d.index)
                            continue;
                        if (a && !d.collides)
                            continue;
                        if (h && !d.hasInterestingFace)
                            continue;
                        l.push(d)
                    }
                }
            return l
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i, n, s, r) {
            var o;
            void 0 === n && (n = 0),
            void 0 === s && (s = 0),
            void 0 === r && (r = 1);
            var a = 0
              , h = t.length;
            if (1 === r)
                for (o = s; o < h; o++)
                    t[o][e] = i + a * n,
                    a++;
            else
                for (o = s; 0 <= o; o--)
                    t[o][e] = i + a * n,
                    a++;
            return t
        }
    }
    , function(t, e, i) {
        var l = i(35)
          , u = i(13);
        t.exports = function(t, e, i) {
            e.x = u(i, "x", 0),
            e.y = u(i, "y", 0),
            e.depth = u(i, "depth", 0),
            e.flipX = u(i, "flipX", !1),
            e.flipY = u(i, "flipY", !1);
            var n = u(i, "scale", null);
            "number" == typeof n ? e.setScale(n) : null !== n && (e.scaleX = u(n, "x", 1),
            e.scaleY = u(n, "y", 1));
            var s = u(i, "scrollFactor", null);
            "number" == typeof s ? e.setScrollFactor(s) : null !== s && (e.scrollFactorX = u(s, "x", 1),
            e.scrollFactorY = u(s, "y", 1)),
            e.rotation = u(i, "rotation", 0);
            var r = u(i, "angle", null);
            null !== r && (e.angle = r),
            e.alpha = u(i, "alpha", 1);
            var o, a, h = u(i, "origin", null);
            return "number" == typeof h ? e.setOrigin(h) : null !== h && (o = u(h, "x", .5),
            a = u(h, "y", .5),
            e.setOrigin(o, a)),
            e.blendMode = u(i, "blendMode", l.NORMAL),
            e.visible = u(i, "visible", !0),
            u(i, "add", !0) && t.sys.displayList.add(e),
            e.preUpdate && t.sys.updateList.add(e),
            e
        }
    }
    , function(t, e) {
        t.exports = {
            ORTHOGONAL: 0,
            ISOMETRIC: 1,
            STAGGERED: 2,
            HEXAGONAL: 3
        }
    }
    , function(t, e, i) {
        var a = i(19);
        t.exports = function(t, e, i, n, s) {
            var r = n.alpha * i.alpha;
            if (r <= 0)
                return !1;
            var o = a(i, n, s).calc;
            return e.globalCompositeOperation = t.blendModes[i.blendMode],
            e.globalAlpha = r,
            e.save(),
            o.setToContext(e),
            e.imageSmoothingEnabled = !(!t.antialias || i.frame && i.frame.source.scaleMode),
            !0
        }
    }
    , function(t, e, i) {
        var a, h = i(33), l = i(192), u = [], c = !1;
        function n(t, e, i, n, s) {
            void 0 === e && (e = 1),
            void 0 === i && (i = 1),
            void 0 === n && (n = h.CANVAS),
            void 0 === s && (s = !1);
            var r = a(n)
              , o = (null === r ? (r = {
                parent: t,
                canvas: document.createElement("canvas"),
                type: n
            },
            n === h.CANVAS && u.push(r)) : r.parent = t,
            r.canvas);
            return s && (r.parent = o),
            o.width = e,
            o.height = i,
            c && n === h.CANVAS && l.disable(o.getContext("2d")),
            o
        }
        function s() {
            var e = 0;
            return u.forEach(function(t) {
                t.parent && e++
            }),
            e
        }
        t.exports = {
            create2D: function(t, e, i) {
                return n(t, e, i, h.CANVAS)
            },
            create: n,
            createWebGL: function(t, e, i) {
                return n(t, e, i, h.WEBGL)
            },
            disableSmoothing: function() {
                c = !0
            },
            enableSmoothing: function() {
                c = !1
            },
            first: a = function(t) {
                if (void 0 === t && (t = h.CANVAS),
                t === h.WEBGL)
                    return null;
                for (var e = 0; e < u.length; e++) {
                    var i = u[e];
                    if (!i.parent && i.type === t)
                        return i
                }
                return null
            }
            ,
            free: function() {
                return u.length - s()
            },
            pool: u,
            remove: function(e) {
                var i = e instanceof HTMLCanvasElement;
                u.forEach(function(t) {
                    (i && t.canvas === e || !i && t.parent === e) && (t.parent = null,
                    t.canvas.width = 1,
                    t.canvas.height = 1)
                })
            },
            total: s
        }
    }
    , function(t, e) {
        var h = {};
        t.exports = h,
        function() {
            h._nextId = 0,
            h._seed = 0,
            h._nowStartTime = +new Date,
            h.extend = function(t, e) {
                for (var i, n = "boolean" == typeof e ? (i = 2,
                e) : (i = 1,
                !0), s = i; s < arguments.length; s++) {
                    var r = arguments[s];
                    if (r)
                        for (var o in r)
                            !n || !r[o] || r[o].constructor !== Object || t[o] && t[o].constructor !== Object ? t[o] = r[o] : (t[o] = t[o] || {},
                            h.extend(t[o], n, r[o]))
                }
                return t
            }
            ,
            h.clone = function(t, e) {
                return h.extend({}, e, t)
            }
            ,
            h.keys = function(t) {
                if (Object.keys)
                    return Object.keys(t);
                var e = [];
                for (var i in t)
                    e.push(i);
                return e
            }
            ,
            h.values = function(t) {
                var e = [];
                if (Object.keys) {
                    for (var i = Object.keys(t), n = 0; n < i.length; n++)
                        e.push(t[i[n]]);
                    return e
                }
                for (var s in t)
                    e.push(t[s]);
                return e
            }
            ,
            h.get = function(t, e, i, n) {
                e = e.split(".").slice(i, n);
                for (var s = 0; s < e.length; s += 1)
                    t = t[e[s]];
                return t
            }
            ,
            h.set = function(t, e, i, n, s) {
                var r = e.split(".").slice(n, s);
                return h.get(t, e, 0, -1)[r[r.length - 1]] = i
            }
            ,
            h.shuffle = function(t) {
                for (var e = t.length - 1; 0 < e; e--) {
                    var i = Math.floor(h.random() * (e + 1))
                      , n = t[e];
                    t[e] = t[i],
                    t[i] = n
                }
                return t
            }
            ,
            h.choose = function(t) {
                return t[Math.floor(h.random() * t.length)]
            }
            ,
            h.isElement = function(t) {
                return "undefined" != typeof HTMLElement ? t instanceof HTMLElement : !!(t && t.nodeType && t.nodeName)
            }
            ,
            h.isArray = function(t) {
                return "[object Array]" === Object.prototype.toString.call(t)
            }
            ,
            h.isFunction = function(t) {
                return "function" == typeof t
            }
            ,
            h.isPlainObject = function(t) {
                return "object" == typeof t && t.constructor === Object
            }
            ,
            h.isString = function(t) {
                return "[object String]" === Object.prototype.toString.call(t)
            }
            ,
            h.clamp = function(t, e, i) {
                return t < e ? e : i < t ? i : t
            }
            ,
            h.sign = function(t) {
                return t < 0 ? -1 : 1
            }
            ,
            h.now = function() {
                if ("undefined" != typeof window && window.performance) {
                    if (window.performance.now)
                        return window.performance.now();
                    if (window.performance.webkitNow)
                        return window.performance.webkitNow()
                }
                return new Date - h._nowStartTime
            }
            ,
            h.random = function(t, e) {
                return e = void 0 !== e ? e : 1,
                (t = void 0 !== t ? t : 0) + i() * (e - t)
            }
            ;
            var i = function() {
                return h._seed = (9301 * h._seed + 49297) % 233280,
                h._seed / 233280
            };
            h.colorToNumber = function(t) {
                return 3 == (t = t.replace("#", "")).length && (t = t.charAt(0) + t.charAt(0) + t.charAt(1) + t.charAt(1) + t.charAt(2) + t.charAt(2)),
                parseInt(t, 16)
            }
            ,
            h.logLevel = 1,
            h.log = function() {
                console && 0 < h.logLevel && h.logLevel <= 3 && console.log.apply(console, ["matter-js:"].concat(Array.prototype.slice.call(arguments)))
            }
            ,
            h.info = function() {
                console && 0 < h.logLevel && h.logLevel <= 2 && console.info.apply(console, ["matter-js:"].concat(Array.prototype.slice.call(arguments)))
            }
            ,
            h.warn = function() {
                console && 0 < h.logLevel && h.logLevel <= 3 && console.warn.apply(console, ["matter-js:"].concat(Array.prototype.slice.call(arguments)))
            }
            ,
            h.nextId = function() {
                return h._nextId++
            }
            ,
            h.indexOf = function(t, e) {
                if (t.indexOf)
                    return t.indexOf(e);
                for (var i = 0; i < t.length; i++)
                    if (t[i] === e)
                        return i;
                return -1
            }
            ,
            h.map = function(t, e) {
                if (t.map)
                    return t.map(e);
                for (var i = [], n = 0; n < t.length; n += 1)
                    i.push(e(t[n]));
                return i
            }
            ,
            h.topologicalSort = function(t) {
                var e = []
                  , i = []
                  , n = [];
                for (var s in t)
                    i[s] || n[s] || h._topologicalSort(s, i, n, t, e);
                return e
            }
            ,
            h._topologicalSort = function(t, e, i, n, s) {
                var r = n[t] || [];
                i[t] = !0;
                for (var o = 0; o < r.length; o += 1) {
                    var a = r[o];
                    i[a] || e[a] || h._topologicalSort(a, e, i, n, s)
                }
                i[t] = !1,
                e[t] = !0,
                s.push(t)
            }
            ,
            h.chain = function() {
                for (var r = [], t = 0; t < arguments.length; t += 1) {
                    var e = arguments[t];
                    e._chained ? r.push.apply(r, e._chained) : r.push(e)
                }
                function i() {
                    for (var t, e = new Array(arguments.length), i = 0, n = arguments.length; i < n; i++)
                        e[i] = arguments[i];
                    for (i = 0; i < r.length; i += 1) {
                        var s = r[i].apply(t, e);
                        void 0 !== s && (t = s)
                    }
                    return t
                }
                return i._chained = r,
                i
            }
            ,
            h.chainPathBefore = function(t, e, i) {
                return h.set(t, e, h.chain(i, h.get(t, e)))
            }
            ,
            h.chainPathAfter = function(t, e, i) {
                return h.set(t, e, h.chain(h.get(t, e), i))
            }
        }()
    }
    , function(t, e, i) {
        var n = {
            VERSION: "3.55.2",
            BlendModes: i(35),
            ScaleModes: i(168),
            AUTO: 0,
            CANVAS: 1,
            WEBGL: 2,
            HEADLESS: 3,
            FOREVER: -1,
            NONE: 4,
            UP: 5,
            DOWN: 6,
            LEFT: 7,
            RIGHT: 8
        };
        t.exports = n
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(11)
          , r = i(15)
          , o = i(47)
          , a = new n({
            Extends: r,
            Mixins: [s.AlphaSingle, s.BlendMode, s.Depth, s.GetBounds, s.Mask, s.Origin, s.Pipeline, s.ScrollFactor, s.Transform, s.Visible],
            initialize: function(t, e, i) {
                void 0 === e && (e = "Shape"),
                r.call(this, t, e),
                this.geom = i,
                this.pathData = [],
                this.pathIndexes = [],
                this.fillColor = 16777215,
                this.fillAlpha = 1,
                this.strokeColor = 16777215,
                this.strokeAlpha = 1,
                this.lineWidth = 1,
                this.isFilled = !1,
                this.isStroked = !1,
                this.closePath = !0,
                this._tempLine = new o,
                this.width = 0,
                this.height = 0,
                this.initPipeline()
            },
            setFillStyle: function(t, e) {
                return void 0 === e && (e = 1),
                void 0 === t ? this.isFilled = !1 : (this.fillColor = t,
                this.fillAlpha = e,
                this.isFilled = !0),
                this
            },
            setStrokeStyle: function(t, e, i) {
                return void 0 === i && (i = 1),
                void 0 === t ? this.isStroked = !1 : (this.lineWidth = t,
                this.strokeColor = e,
                this.strokeAlpha = i,
                this.isStroked = !0),
                this
            },
            setClosePath: function(t) {
                return this.closePath = t,
                this
            },
            setSize: function(t, e) {
                return this.width = t,
                this.height = e,
                this
            },
            setDisplaySize: function(t, e) {
                return this.displayWidth = t,
                this.displayHeight = e,
                this
            },
            preDestroy: function() {
                this.geom = null,
                this._tempLine = null,
                this.pathData = [],
                this.pathIndexes = []
            },
            displayWidth: {
                get: function() {
                    return this.scaleX * this.width
                },
                set: function(t) {
                    this.scaleX = t / this.width
                }
            },
            displayHeight: {
                get: function() {
                    return this.scaleY * this.height
                },
                set: function(t) {
                    this.scaleY = t / this.height
                }
            }
        });
        t.exports = a
    }
    , function(t, e) {
        t.exports = {
            SKIP_CHECK: -1,
            NORMAL: 0,
            ADD: 1,
            MULTIPLY: 2,
            SCREEN: 3,
            OVERLAY: 4,
            DARKEN: 5,
            LIGHTEN: 6,
            COLOR_DODGE: 7,
            COLOR_BURN: 8,
            HARD_LIGHT: 9,
            SOFT_LIGHT: 10,
            DIFFERENCE: 11,
            EXCLUSION: 12,
            HUE: 13,
            SATURATION: 14,
            COLOR: 15,
            LUMINOSITY: 16,
            ERASE: 17,
            SOURCE_IN: 18,
            SOURCE_OUT: 19,
            SOURCE_ATOP: 20,
            DESTINATION_OVER: 21,
            DESTINATION_IN: 22,
            DESTINATION_OUT: 23,
            DESTINATION_ATOP: 24,
            LIGHTER: 25,
            COPY: 26,
            XOR: 27
        }
    }
    , function(t, e, i) {
        var n = i(14);
        t.exports = function(t) {
            return t * n.DEG_TO_RAD
        }
    }
    , function(t, e, i) {
        t.exports = {
            DESTROY: i(743),
            FADE_IN_COMPLETE: i(744),
            FADE_IN_START: i(745),
            FADE_OUT_COMPLETE: i(746),
            FADE_OUT_START: i(747),
            FLASH_COMPLETE: i(748),
            FLASH_START: i(749),
            FOLLOW_UPDATE: i(750),
            PAN_COMPLETE: i(751),
            PAN_START: i(752),
            POST_RENDER: i(753),
            PRE_RENDER: i(754),
            ROTATE_COMPLETE: i(755),
            ROTATE_START: i(756),
            SHAKE_COMPLETE: i(757),
            SHAKE_START: i(758),
            ZOOM_COMPLETE: i(759),
            ZOOM_START: i(760)
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , r = i(103)
          , o = i(328)
          , s = i(188)
          , a = i(329)
          , h = new n({
            initialize: function(t, e, i, n) {
                void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                void 0 === n && (n = 255),
                this.r = 0,
                this.g = 0,
                this.b = 0,
                this.a = 255,
                this._h = 0,
                this._s = 0,
                this._v = 0,
                this._locked = !1,
                this.gl = [0, 0, 0, 1],
                this._color = 0,
                this._color32 = 0,
                this._rgba = "",
                this.setTo(t, e, i, n)
            },
            transparent: function() {
                return this._locked = !0,
                this.red = 0,
                this.green = 0,
                this.blue = 0,
                this.alpha = 0,
                this._locked = !1,
                this.update(!0)
            },
            setTo: function(t, e, i, n, s) {
                return void 0 === n && (n = 255),
                void 0 === s && (s = !0),
                this._locked = !0,
                this.red = t,
                this.green = e,
                this.blue = i,
                this.alpha = n,
                this._locked = !1,
                this.update(s)
            },
            setGLTo: function(t, e, i, n) {
                return void 0 === n && (n = 1),
                this._locked = !0,
                this.redGL = t,
                this.greenGL = e,
                this.blueGL = i,
                this.alphaGL = n,
                this._locked = !1,
                this.update(!0)
            },
            setFromRGB: function(t) {
                return this._locked = !0,
                this.red = t.r,
                this.green = t.g,
                this.blue = t.b,
                t.hasOwnProperty("a") && (this.alpha = t.a),
                this._locked = !1,
                this.update(!0)
            },
            setFromHSV: function(t, e, i) {
                return s(t, e, i, this)
            },
            update: function(t) {
                if (void 0 === t && (t = !1),
                this._locked)
                    return this;
                var e = this.r
                  , i = this.g
                  , n = this.b
                  , s = this.a;
                return this._color = r(e, i, n),
                this._color32 = o(e, i, n, s),
                this._rgba = "rgba(" + e + "," + i + "," + n + "," + s / 255 + ")",
                t && a(e, i, n, this),
                this
            },
            updateHSV: function() {
                var t = this.r
                  , e = this.g
                  , i = this.b;
                return a(t, e, i, this),
                this
            },
            clone: function() {
                return new h(this.r,this.g,this.b,this.a)
            },
            gray: function(t) {
                return this.setTo(t, t, t)
            },
            random: function(t, e) {
                void 0 === t && (t = 0),
                void 0 === e && (e = 255);
                var i = Math.floor(t + Math.random() * (e - t))
                  , n = Math.floor(t + Math.random() * (e - t))
                  , s = Math.floor(t + Math.random() * (e - t));
                return this.setTo(i, n, s)
            },
            randomGray: function(t, e) {
                void 0 === t && (t = 0),
                void 0 === e && (e = 255);
                var i = Math.floor(t + Math.random() * (e - t));
                return this.setTo(i, i, i)
            },
            saturate: function(t) {
                return this.s += t / 100,
                this
            },
            desaturate: function(t) {
                return this.s -= t / 100,
                this
            },
            lighten: function(t) {
                return this.v += t / 100,
                this
            },
            darken: function(t) {
                return this.v -= t / 100,
                this
            },
            brighten: function(t) {
                var e = this.r
                  , i = this.g
                  , n = this.b;
                e = Math.max(0, Math.min(255, e - Math.round(-t / 100 * 255))),
                i = Math.max(0, Math.min(255, i - Math.round(-t / 100 * 255))),
                n = Math.max(0, Math.min(255, n - Math.round(-t / 100 * 255)));
                return this.setTo(e, i, n)
            },
            color: {
                get: function() {
                    return this._color
                }
            },
            color32: {
                get: function() {
                    return this._color32
                }
            },
            rgba: {
                get: function() {
                    return this._rgba
                }
            },
            redGL: {
                get: function() {
                    return this.gl[0]
                },
                set: function(t) {
                    this.gl[0] = Math.min(Math.abs(t), 1),
                    this.r = Math.floor(255 * this.gl[0]),
                    this.update(!0)
                }
            },
            greenGL: {
                get: function() {
                    return this.gl[1]
                },
                set: function(t) {
                    this.gl[1] = Math.min(Math.abs(t), 1),
                    this.g = Math.floor(255 * this.gl[1]),
                    this.update(!0)
                }
            },
            blueGL: {
                get: function() {
                    return this.gl[2]
                },
                set: function(t) {
                    this.gl[2] = Math.min(Math.abs(t), 1),
                    this.b = Math.floor(255 * this.gl[2]),
                    this.update(!0)
                }
            },
            alphaGL: {
                get: function() {
                    return this.gl[3]
                },
                set: function(t) {
                    this.gl[3] = Math.min(Math.abs(t), 1),
                    this.a = Math.floor(255 * this.gl[3]),
                    this.update()
                }
            },
            red: {
                get: function() {
                    return this.r
                },
                set: function(t) {
                    t = Math.floor(Math.abs(t)),
                    this.r = Math.min(t, 255),
                    this.gl[0] = t / 255,
                    this.update(!0)
                }
            },
            green: {
                get: function() {
                    return this.g
                },
                set: function(t) {
                    t = Math.floor(Math.abs(t)),
                    this.g = Math.min(t, 255),
                    this.gl[1] = t / 255,
                    this.update(!0)
                }
            },
            blue: {
                get: function() {
                    return this.b
                },
                set: function(t) {
                    t = Math.floor(Math.abs(t)),
                    this.b = Math.min(t, 255),
                    this.gl[2] = t / 255,
                    this.update(!0)
                }
            },
            alpha: {
                get: function() {
                    return this.a
                },
                set: function(t) {
                    t = Math.floor(Math.abs(t)),
                    this.a = Math.min(t, 255),
                    this.gl[3] = t / 255,
                    this.update()
                }
            },
            h: {
                get: function() {
                    return this._h
                },
                set: function(t) {
                    this._h = t,
                    s(t, this._s, this._v, this)
                }
            },
            s: {
                get: function() {
                    return this._s
                },
                set: function(t) {
                    this._s = t,
                    s(this._h, t, this._v, this)
                }
            },
            v: {
                get: function() {
                    return this._v
                },
                set: function(t) {
                    this._v = t,
                    s(this._h, this._s, t, this)
                }
            }
        });
        t.exports = h
    }
    , function(t, e, i) {
        var n = new (i(0))({
            initialize: function(t, e, i) {
                this.x = 0,
                this.y = 0,
                this.z = 0,
                "object" == typeof t ? (this.x = t.x || 0,
                this.y = t.y || 0,
                this.z = t.z || 0) : (this.x = t || 0,
                this.y = e || 0,
                this.z = i || 0)
            },
            up: function() {
                return this.x = 0,
                this.y = 1,
                this.z = 0,
                this
            },
            min: function(t) {
                return this.x = Math.min(this.x, t.x),
                this.y = Math.min(this.y, t.y),
                this.z = Math.min(this.z, t.z),
                this
            },
            max: function(t) {
                return this.x = Math.max(this.x, t.x),
                this.y = Math.max(this.y, t.y),
                this.z = Math.max(this.z, t.z),
                this
            },
            clone: function() {
                return new n(this.x,this.y,this.z)
            },
            addVectors: function(t, e) {
                return this.x = t.x + e.x,
                this.y = t.y + e.y,
                this.z = t.z + e.z,
                this
            },
            crossVectors: function(t, e) {
                var i = t.x
                  , n = t.y
                  , s = t.z
                  , r = e.x
                  , o = e.y
                  , a = e.z;
                return this.x = n * a - s * o,
                this.y = s * r - i * a,
                this.z = i * o - n * r,
                this
            },
            equals: function(t) {
                return this.x === t.x && this.y === t.y && this.z === t.z
            },
            copy: function(t) {
                return this.x = t.x,
                this.y = t.y,
                this.z = t.z || 0,
                this
            },
            set: function(t, e, i) {
                return "object" == typeof t ? (this.x = t.x || 0,
                this.y = t.y || 0,
                this.z = t.z || 0) : (this.x = t || 0,
                this.y = e || 0,
                this.z = i || 0),
                this
            },
            setFromMatrixPosition: function(t) {
                return this.fromArray(t.val, 12)
            },
            setFromMatrixColumn: function(t, e) {
                return this.fromArray(t.val, 4 * e)
            },
            fromArray: function(t, e) {
                return void 0 === e && (e = 0),
                this.x = t[e],
                this.y = t[e + 1],
                this.z = t[e + 2],
                this
            },
            add: function(t) {
                return this.x += t.x,
                this.y += t.y,
                this.z += t.z || 0,
                this
            },
            addScalar: function(t) {
                return this.x += t,
                this.y += t,
                this.z += t,
                this
            },
            addScale: function(t, e) {
                return this.x += t.x * e,
                this.y += t.y * e,
                this.z += t.z * e || 0,
                this
            },
            subtract: function(t) {
                return this.x -= t.x,
                this.y -= t.y,
                this.z -= t.z || 0,
                this
            },
            multiply: function(t) {
                return this.x *= t.x,
                this.y *= t.y,
                this.z *= t.z || 1,
                this
            },
            scale: function(t) {
                return isFinite(t) ? (this.x *= t,
                this.y *= t,
                this.z *= t) : (this.x = 0,
                this.y = 0,
                this.z = 0),
                this
            },
            divide: function(t) {
                return this.x /= t.x,
                this.y /= t.y,
                this.z /= t.z || 1,
                this
            },
            negate: function() {
                return this.x = -this.x,
                this.y = -this.y,
                this.z = -this.z,
                this
            },
            distance: function(t) {
                var e = t.x - this.x
                  , i = t.y - this.y
                  , n = t.z - this.z || 0;
                return Math.sqrt(e * e + i * i + n * n)
            },
            distanceSq: function(t) {
                var e = t.x - this.x
                  , i = t.y - this.y
                  , n = t.z - this.z || 0;
                return e * e + i * i + n * n
            },
            length: function() {
                var t = this.x
                  , e = this.y
                  , i = this.z;
                return Math.sqrt(t * t + e * e + i * i)
            },
            lengthSq: function() {
                var t = this.x
                  , e = this.y
                  , i = this.z;
                return t * t + e * e + i * i
            },
            normalize: function() {
                var t = this.x
                  , e = this.y
                  , i = this.z
                  , n = t * t + e * e + i * i;
                return 0 < n && (n = 1 / Math.sqrt(n),
                this.x = t * n,
                this.y = e * n,
                this.z = i * n),
                this
            },
            dot: function(t) {
                return this.x * t.x + this.y * t.y + this.z * t.z
            },
            cross: function(t) {
                var e = this.x
                  , i = this.y
                  , n = this.z
                  , s = t.x
                  , r = t.y
                  , o = t.z;
                return this.x = i * o - n * r,
                this.y = n * s - e * o,
                this.z = e * r - i * s,
                this
            },
            lerp: function(t, e) {
                void 0 === e && (e = 0);
                var i = this.x
                  , n = this.y
                  , s = this.z;
                return this.x = i + e * (t.x - i),
                this.y = n + e * (t.y - n),
                this.z = s + e * (t.z - s),
                this
            },
            applyMatrix3: function(t) {
                var e = this.x
                  , i = this.y
                  , n = this.z
                  , s = t.val;
                return this.x = s[0] * e + s[3] * i + s[6] * n,
                this.y = s[1] * e + s[4] * i + s[7] * n,
                this.z = s[2] * e + s[5] * i + s[8] * n,
                this
            },
            applyMatrix4: function(t) {
                var e = this.x
                  , i = this.y
                  , n = this.z
                  , s = t.val
                  , r = 1 / (s[3] * e + s[7] * i + s[11] * n + s[15]);
                return this.x = (s[0] * e + s[4] * i + s[8] * n + s[12]) * r,
                this.y = (s[1] * e + s[5] * i + s[9] * n + s[13]) * r,
                this.z = (s[2] * e + s[6] * i + s[10] * n + s[14]) * r,
                this
            },
            transformMat3: function(t) {
                var e = this.x
                  , i = this.y
                  , n = this.z
                  , s = t.val;
                return this.x = e * s[0] + i * s[3] + n * s[6],
                this.y = e * s[1] + i * s[4] + n * s[7],
                this.z = e * s[2] + i * s[5] + n * s[8],
                this
            },
            transformMat4: function(t) {
                var e = this.x
                  , i = this.y
                  , n = this.z
                  , s = t.val;
                return this.x = s[0] * e + s[4] * i + s[8] * n + s[12],
                this.y = s[1] * e + s[5] * i + s[9] * n + s[13],
                this.z = s[2] * e + s[6] * i + s[10] * n + s[14],
                this
            },
            transformCoordinates: function(t) {
                var e = this.x
                  , i = this.y
                  , n = this.z
                  , s = t.val
                  , r = e * s[0] + i * s[4] + n * s[8] + s[12]
                  , o = e * s[1] + i * s[5] + n * s[9] + s[13]
                  , a = e * s[2] + i * s[6] + n * s[10] + s[14]
                  , h = e * s[3] + i * s[7] + n * s[11] + s[15];
                return this.x = r / h,
                this.y = o / h,
                this.z = a / h,
                this
            },
            transformQuat: function(t) {
                var e = this.x
                  , i = this.y
                  , n = this.z
                  , s = t.x
                  , r = t.y
                  , o = t.z
                  , a = t.w
                  , h = a * e + r * n - o * i
                  , l = a * i + o * e - s * n
                  , u = a * n + s * i - r * e
                  , c = -s * e - r * i - o * n;
                return this.x = h * a + c * -s + l * -o - u * -r,
                this.y = l * a + c * -r + u * -s - h * -o,
                this.z = u * a + c * -o + h * -r - l * -s,
                this
            },
            project: function(t) {
                var e = this.x
                  , i = this.y
                  , n = this.z
                  , s = t.val
                  , r = s[0]
                  , o = s[1]
                  , a = s[2]
                  , h = s[3]
                  , l = s[4]
                  , u = s[5]
                  , c = s[6]
                  , d = s[7]
                  , p = s[8]
                  , f = s[9]
                  , g = s[10]
                  , v = s[11]
                  , y = s[12]
                  , m = s[13]
                  , x = s[14]
                  , w = 1 / (e * h + i * d + n * v + s[15]);
                return this.x = (e * r + i * l + n * p + y) * w,
                this.y = (e * o + i * u + n * f + m) * w,
                this.z = (e * a + i * c + n * g + x) * w,
                this
            },
            projectViewMatrix: function(t, e) {
                return this.applyMatrix4(t).applyMatrix4(e)
            },
            unprojectViewMatrix: function(t, e) {
                return this.applyMatrix4(t).applyMatrix4(e)
            },
            unproject: function(t, e) {
                var i = t.x
                  , n = t.y
                  , s = t.z
                  , r = t.w
                  , o = this.x - i
                  , a = r - this.y - 1 - n
                  , h = this.z;
                return this.x = 2 * o / s - 1,
                this.y = 2 * a / r - 1,
                this.z = 2 * h - 1,
                this.project(e)
            },
            reset: function() {
                return this.x = 0,
                this.y = 0,
                this.z = 0,
                this
            }
        });
        n.ZERO = new n,
        n.RIGHT = new n(1,0,0),
        n.LEFT = new n(-1,0,0),
        n.UP = new n(0,-1,0),
        n.DOWN = new n(0,1,0),
        n.FORWARD = new n(0,0,1),
        n.BACK = new n(0,0,-1),
        n.ONE = new n(1,1,1),
        t.exports = n
    }
    , function(t, e) {
        t.exports = {
            CSV: 0,
            TILED_JSON: 1,
            ARRAY_2D: 2,
            WELTMEISTER: 3
        }
    }
    , function(t, e, i) {
        var f = {};
        t.exports = f;
        var g = i(64)
          , u = i(83)
          , s = i(165)
          , r = i(32)
          , v = i(84)
          , c = i(271);
        !function() {
            f._inertiaScale = 4,
            f._nextCollidingGroupId = 1,
            f._nextNonCollidingGroupId = -1,
            f._nextCategory = 1,
            f.create = function(t) {
                var e = {
                    id: r.nextId(),
                    type: "body",
                    label: "Body",
                    parts: [],
                    plugin: {},
                    angle: 0,
                    vertices: null,
                    position: {
                        x: 0,
                        y: 0
                    },
                    force: {
                        x: 0,
                        y: 0
                    },
                    torque: 0,
                    positionImpulse: {
                        x: 0,
                        y: 0
                    },
                    previousPositionImpulse: {
                        x: 0,
                        y: 0
                    },
                    constraintImpulse: {
                        x: 0,
                        y: 0,
                        angle: 0
                    },
                    totalContacts: 0,
                    speed: 0,
                    angularSpeed: 0,
                    velocity: {
                        x: 0,
                        y: 0
                    },
                    angularVelocity: 0,
                    isSensor: !1,
                    isStatic: !1,
                    isSleeping: !1,
                    motion: 0,
                    sleepThreshold: 60,
                    density: .001,
                    restitution: 0,
                    friction: .1,
                    frictionStatic: .5,
                    frictionAir: .01,
                    collisionFilter: {
                        category: 1,
                        mask: 4294967295,
                        group: 0
                    },
                    slop: .05,
                    timeScale: 1,
                    events: null,
                    bounds: null,
                    chamfer: null,
                    circleRadius: 0,
                    positionPrev: null,
                    anglePrev: 0,
                    parent: null,
                    axes: null,
                    area: 0,
                    mass: 0,
                    inverseMass: 0,
                    inertia: 0,
                    inverseInertia: 0,
                    _original: null,
                    render: {
                        visible: !0,
                        opacity: 1,
                        sprite: {
                            xOffset: 0,
                            yOffset: 0
                        },
                        fillColor: null,
                        fillOpacity: null,
                        lineColor: null,
                        lineOpacity: null,
                        lineThickness: null
                    },
                    gameObject: null,
                    scale: {
                        x: 1,
                        y: 1
                    },
                    centerOfMass: {
                        x: 0,
                        y: 0
                    },
                    centerOffset: {
                        x: 0,
                        y: 0
                    },
                    gravityScale: {
                        x: 1,
                        y: 1
                    },
                    ignoreGravity: !1,
                    ignorePointer: !1,
                    onCollideCallback: null,
                    onCollideEndCallback: null,
                    onCollideActiveCallback: null,
                    onCollideWith: {}
                };
                !t.hasOwnProperty("position") && t.hasOwnProperty("vertices") ? t.position = g.centre(t.vertices) : t.hasOwnProperty("vertices") || (e.vertices = g.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"));
                var i = r.extend(e, t);
                return n(i, t),
                i.setOnCollideWith = function(t, e) {
                    return e ? this.onCollideWith[t.id] = e : delete this.onCollideWith[t.id],
                    this
                }
                ,
                i
            }
            ,
            f.nextGroup = function(t) {
                return t ? f._nextNonCollidingGroupId-- : f._nextCollidingGroupId++
            }
            ,
            f.nextCategory = function() {
                return f._nextCategory = f._nextCategory << 1,
                f._nextCategory
            }
            ;
            var n = function(t, e) {
                e = e || {},
                f.set(t, {
                    bounds: t.bounds || v.create(t.vertices),
                    positionPrev: t.positionPrev || u.clone(t.position),
                    anglePrev: t.anglePrev || t.angle,
                    vertices: t.vertices,
                    parts: t.parts || [t],
                    isStatic: t.isStatic,
                    isSleeping: t.isSleeping,
                    parent: t.parent || t
                });
                var i, n, s, r, o = t.bounds;
                g.rotate(t.vertices, t.angle, t.position),
                c.rotate(t.axes, t.angle),
                v.update(o, t.vertices, t.velocity),
                f.set(t, {
                    axes: e.axes || t.axes,
                    area: e.area || t.area,
                    mass: e.mass || t.mass,
                    inertia: e.inertia || t.inertia
                }),
                1 === t.parts.length && (i = t.centerOfMass,
                n = t.centerOffset,
                s = o.max.x - o.min.x,
                r = o.max.y - o.min.y,
                i.x = -(o.min.x - t.position.x) / s,
                i.y = -(o.min.y - t.position.y) / r,
                n.x = s * i.x,
                n.y = r * i.y)
            };
            f.set = function(t, e, i) {
                var n;
                for (n in "string" == typeof e && (n = e,
                (e = {})[n] = i),
                e)
                    if (Object.prototype.hasOwnProperty.call(e, n))
                        switch (i = e[n],
                        n) {
                        case "isStatic":
                            f.setStatic(t, i);
                            break;
                        case "isSleeping":
                            s.set(t, i);
                            break;
                        case "mass":
                            f.setMass(t, i);
                            break;
                        case "density":
                            f.setDensity(t, i);
                            break;
                        case "inertia":
                            f.setInertia(t, i);
                            break;
                        case "vertices":
                            f.setVertices(t, i);
                            break;
                        case "position":
                            f.setPosition(t, i);
                            break;
                        case "angle":
                            f.setAngle(t, i);
                            break;
                        case "velocity":
                            f.setVelocity(t, i);
                            break;
                        case "angularVelocity":
                            f.setAngularVelocity(t, i);
                            break;
                        case "parts":
                            f.setParts(t, i);
                            break;
                        case "centre":
                            f.setCentre(t, i);
                            break;
                        default:
                            t[n] = i
                        }
            }
            ,
            f.setStatic = function(t, e) {
                for (var i = 0; i < t.parts.length; i++) {
                    var n = t.parts[i];
                    (n.isStatic = e) ? (n._original = {
                        restitution: n.restitution,
                        friction: n.friction,
                        mass: n.mass,
                        inertia: n.inertia,
                        density: n.density,
                        inverseMass: n.inverseMass,
                        inverseInertia: n.inverseInertia
                    },
                    n.restitution = 0,
                    n.friction = 1,
                    n.mass = n.inertia = n.density = 1 / 0,
                    n.inverseMass = n.inverseInertia = 0,
                    n.positionPrev.x = n.position.x,
                    n.positionPrev.y = n.position.y,
                    n.anglePrev = n.angle,
                    n.angularVelocity = 0,
                    n.speed = 0,
                    n.angularSpeed = 0,
                    n.motion = 0) : n._original && (n.restitution = n._original.restitution,
                    n.friction = n._original.friction,
                    n.mass = n._original.mass,
                    n.inertia = n._original.inertia,
                    n.density = n._original.density,
                    n.inverseMass = n._original.inverseMass,
                    n.inverseInertia = n._original.inverseInertia,
                    n._original = null)
                }
            }
            ,
            f.setMass = function(t, e) {
                var i = t.inertia / (t.mass / 6);
                t.inertia = e / 6 * i,
                t.inverseInertia = 1 / t.inertia,
                t.mass = e,
                t.inverseMass = 1 / t.mass,
                t.density = t.mass / t.area
            }
            ,
            f.setDensity = function(t, e) {
                f.setMass(t, e * t.area),
                t.density = e
            }
            ,
            f.setInertia = function(t, e) {
                t.inertia = e,
                t.inverseInertia = 1 / t.inertia
            }
            ,
            f.setVertices = function(t, e) {
                e[0].body === t ? t.vertices = e : t.vertices = g.create(e, t),
                t.axes = c.fromVertices(t.vertices),
                t.area = g.area(t.vertices),
                f.setMass(t, t.density * t.area);
                var i = g.centre(t.vertices);
                g.translate(t.vertices, i, -1),
                f.setInertia(t, f._inertiaScale * g.inertia(t.vertices, t.mass)),
                g.translate(t.vertices, t.position),
                v.update(t.bounds, t.vertices, t.velocity)
            }
            ,
            f.setParts = function(t, e, i) {
                for (e = e.slice(0),
                t.parts.length = 0,
                t.parts.push(t),
                t.parent = t,
                r = 0; r < e.length; r++) {
                    var n = e[r];
                    n !== t && (n.parent = t).parts.push(n)
                }
                if (1 !== t.parts.length) {
                    if (i = void 0 === i || i) {
                        for (var s = [], r = 0; r < e.length; r++)
                            s = s.concat(e[r].vertices);
                        g.clockwiseSort(s);
                        var o = g.hull(s)
                          , a = g.centre(o);
                        f.setVertices(t, o),
                        g.translate(t.vertices, a)
                    }
                    var h = f._totalProperties(t)
                      , l = h.centre.x
                      , u = h.centre.y
                      , c = t.bounds
                      , d = t.centerOfMass
                      , p = t.centerOffset;
                    v.update(c, t.vertices, t.velocity),
                    d.x = -(c.min.x - l) / (c.max.x - c.min.x),
                    d.y = -(c.min.y - u) / (c.max.y - c.min.y),
                    p.x = l,
                    p.y = u,
                    t.area = h.area,
                    (t.parent = t).position.x = l,
                    t.position.y = u,
                    t.positionPrev.x = l,
                    t.positionPrev.y = u,
                    f.setMass(t, h.mass),
                    f.setInertia(t, h.inertia),
                    f.setPosition(t, h.centre)
                }
            }
            ,
            f.setCentre = function(t, e, i) {
                i ? (t.positionPrev.x += e.x,
                t.positionPrev.y += e.y,
                t.position.x += e.x,
                t.position.y += e.y) : (t.positionPrev.x = e.x - (t.position.x - t.positionPrev.x),
                t.positionPrev.y = e.y - (t.position.y - t.positionPrev.y),
                t.position.x = e.x,
                t.position.y = e.y)
            }
            ,
            f.setPosition = function(t, e) {
                var i = u.sub(e, t.position);
                t.positionPrev.x += i.x,
                t.positionPrev.y += i.y;
                for (var n = 0; n < t.parts.length; n++) {
                    var s = t.parts[n];
                    s.position.x += i.x,
                    s.position.y += i.y,
                    g.translate(s.vertices, i),
                    v.update(s.bounds, s.vertices, t.velocity)
                }
            }
            ,
            f.setAngle = function(t, e) {
                var i = e - t.angle;
                t.anglePrev += i;
                for (var n = 0; n < t.parts.length; n++) {
                    var s = t.parts[n];
                    s.angle += i,
                    g.rotate(s.vertices, i, t.position),
                    c.rotate(s.axes, i),
                    v.update(s.bounds, s.vertices, t.velocity),
                    0 < n && u.rotateAbout(s.position, i, t.position, s.position)
                }
            }
            ,
            f.setVelocity = function(t, e) {
                t.positionPrev.x = t.position.x - e.x,
                t.positionPrev.y = t.position.y - e.y,
                t.velocity.x = e.x,
                t.velocity.y = e.y,
                t.speed = u.magnitude(t.velocity)
            }
            ,
            f.setAngularVelocity = function(t, e) {
                t.anglePrev = t.angle - e,
                t.angularVelocity = e,
                t.angularSpeed = Math.abs(t.angularVelocity)
            }
            ,
            f.translate = function(t, e) {
                f.setPosition(t, u.add(t.position, e))
            }
            ,
            f.rotate = function(t, e, i) {
                var n, s, r, o;
                i && (n = Math.cos(e),
                s = Math.sin(e),
                r = t.position.x - i.x,
                o = t.position.y - i.y,
                f.setPosition(t, {
                    x: i.x + (r * n - o * s),
                    y: i.y + (r * s + o * n)
                })),
                f.setAngle(t, t.angle + e)
            }
            ,
            f.scale = function(t, e, i, n) {
                var s = 0
                  , r = 0;
                n = n || t.position;
                for (var o = 0; o < t.parts.length; o++) {
                    var a = t.parts[o];
                    a.scale.x = e,
                    a.scale.y = i,
                    g.scale(a.vertices, e, i, n),
                    a.axes = c.fromVertices(a.vertices),
                    a.area = g.area(a.vertices),
                    f.setMass(a, t.density * a.area),
                    g.translate(a.vertices, {
                        x: -a.position.x,
                        y: -a.position.y
                    }),
                    f.setInertia(a, f._inertiaScale * g.inertia(a.vertices, a.mass)),
                    g.translate(a.vertices, {
                        x: a.position.x,
                        y: a.position.y
                    }),
                    0 < o && (s += a.area,
                    r += a.inertia),
                    a.position.x = n.x + (a.position.x - n.x) * e,
                    a.position.y = n.y + (a.position.y - n.y) * i,
                    v.update(a.bounds, a.vertices, t.velocity)
                }
                1 < t.parts.length && (t.area = s,
                t.isStatic || (f.setMass(t, t.density * s),
                f.setInertia(t, r))),
                t.circleRadius && (e === i ? t.circleRadius *= e : t.circleRadius = null)
            }
            ,
            f.update = function(t, e, i, n) {
                var s = Math.pow(e * i * t.timeScale, 2)
                  , r = 1 - t.frictionAir * i * t.timeScale
                  , o = t.position.x - t.positionPrev.x
                  , a = t.position.y - t.positionPrev.y;
                t.velocity.x = o * r * n + t.force.x / t.mass * s,
                t.velocity.y = a * r * n + t.force.y / t.mass * s,
                t.positionPrev.x = t.position.x,
                t.positionPrev.y = t.position.y,
                t.position.x += t.velocity.x,
                t.position.y += t.velocity.y,
                t.angularVelocity = (t.angle - t.anglePrev) * r * n + t.torque / t.inertia * s,
                t.anglePrev = t.angle,
                t.angle += t.angularVelocity,
                t.speed = u.magnitude(t.velocity),
                t.angularSpeed = Math.abs(t.angularVelocity);
                for (var h = 0; h < t.parts.length; h++) {
                    var l = t.parts[h];
                    g.translate(l.vertices, t.velocity),
                    0 < h && (l.position.x += t.velocity.x,
                    l.position.y += t.velocity.y),
                    0 !== t.angularVelocity && (g.rotate(l.vertices, t.angularVelocity, t.position),
                    c.rotate(l.axes, t.angularVelocity),
                    0 < h && u.rotateAbout(l.position, t.angularVelocity, t.position, l.position)),
                    v.update(l.bounds, l.vertices, t.velocity)
                }
            }
            ,
            f.applyForce = function(t, e, i) {
                t.force.x += i.x,
                t.force.y += i.y;
                var n = e.x - t.position.x
                  , s = e.y - t.position.y;
                t.torque += n * i.y - s * i.x
            }
            ,
            f._totalProperties = function(t) {
                for (var e = {
                    mass: 0,
                    area: 0,
                    inertia: 0,
                    centre: {
                        x: 0,
                        y: 0
                    }
                }, i = 1 === t.parts.length ? 0 : 1; i < t.parts.length; i++) {
                    var n = t.parts[i]
                      , s = n.mass !== 1 / 0 ? n.mass : 1;
                    e.mass += s,
                    e.area += n.area,
                    e.inertia += n.inertia,
                    e.centre = u.add(e.centre, u.mult(n.position, s))
                }
                return e.centre = u.div(e.centre, e.mass),
                e
            }
        }()
    }
    , function(t, e) {
        t.exports = function(t) {
            return t.y + t.height - t.height * t.originY
        }
    }
    , function(t, e) {
        t.exports = function(t) {
            return t.x - t.width * t.originX
        }
    }
    , function(t, e) {
        t.exports = function(t) {
            return t.x + t.width - t.width * t.originX
        }
    }
    , function(t, e) {
        t.exports = function(t) {
            return t.y - t.height * t.originY
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i, n, s, r) {
            var o;
            void 0 === n && (n = 0),
            void 0 === s && (s = 0),
            void 0 === r && (r = 1);
            var a = 0
              , h = t.length;
            if (1 === r)
                for (o = s; o < h; o++)
                    t[o][e] += i + a * n,
                    a++;
            else
                for (o = s; 0 <= o; o--)
                    t[o][e] += i + a * n,
                    a++;
            return t
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(307)
          , r = i(172)
          , o = i(56)
          , a = i(173)
          , h = i(3)
          , l = new n({
            initialize: function(t, e, i, n) {
                void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                void 0 === n && (n = 0),
                this.type = o.LINE,
                this.x1 = t,
                this.y1 = e,
                this.x2 = i,
                this.y2 = n
            },
            getPoint: function(t, e) {
                return s(this, t, e)
            },
            getPoints: function(t, e, i) {
                return r(this, t, e, i)
            },
            getRandomPoint: function(t) {
                return a(this, t)
            },
            setTo: function(t, e, i, n) {
                return void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                void 0 === n && (n = 0),
                this.x1 = t,
                this.y1 = e,
                this.x2 = i,
                this.y2 = n,
                this
            },
            getPointA: function(t) {
                return void 0 === t && (t = new h),
                t.set(this.x1, this.y1),
                t
            },
            getPointB: function(t) {
                return void 0 === t && (t = new h),
                t.set(this.x2, this.y2),
                t
            },
            left: {
                get: function() {
                    return Math.min(this.x1, this.x2)
                },
                set: function(t) {
                    this.x1 <= this.x2 ? this.x1 = t : this.x2 = t
                }
            },
            right: {
                get: function() {
                    return Math.max(this.x1, this.x2)
                },
                set: function(t) {
                    this.x1 > this.x2 ? this.x1 = t : this.x2 = t
                }
            },
            top: {
                get: function() {
                    return Math.min(this.y1, this.y2)
                },
                set: function(t) {
                    this.y1 <= this.y2 ? this.y1 = t : this.y2 = t
                }
            },
            bottom: {
                get: function() {
                    return Math.max(this.y1, this.y2)
                },
                set: function(t) {
                    this.y1 > this.y2 ? this.y1 = t : this.y2 = t
                }
            }
        });
        t.exports = l
    }
    , function(t, e) {
        t.exports = function(t, e, i, n) {
            var s = i || e.fillColor
              , r = n || e.fillAlpha
              , o = (16711680 & s) >>> 16
              , a = (65280 & s) >>> 8
              , h = 255 & s;
            t.fillStyle = "rgba(" + o + "," + a + "," + h + "," + r + ")"
        }
    }
    , function(t, e, i) {
        var n = new (i(0))({
            initialize: function(t, e, i, n) {
                var s = [];
                n.forEach(function(t) {
                    t && s.push(t)
                }),
                this.loader = t,
                this.type = e,
                this.key = i,
                this.multiKeyIndex = t.multiKeyIndex++,
                this.files = s,
                this.complete = !1,
                this.pending = s.length,
                this.failed = 0,
                this.config = {},
                this.baseURL = t.baseURL,
                this.path = t.path,
                this.prefix = t.prefix;
                for (var r = 0; r < s.length; r++)
                    s[r].multiFile = this
            },
            isReadyToProcess: function() {
                return 0 === this.pending && 0 === this.failed && !this.complete
            },
            addToMultiFile: function(t) {
                return this.files.push(t),
                (t.multiFile = this).pending++,
                this.complete = !1,
                this
            },
            onFileComplete: function(t) {
                -1 !== this.files.indexOf(t) && this.pending--
            },
            onFileFailed: function(t) {
                -1 !== this.files.indexOf(t) && this.failed++
            }
        });
        t.exports = n
    }
    , function(t, e) {
        t.exports = function(t, e, i, n) {
            var s = t - i
              , r = e - n;
            return Math.sqrt(s * s + r * r)
        }
    }
    , function(t, e, i) {
        t.exports = {
            BOOT: i(922),
            DESTROY: i(923),
            DRAG_END: i(924),
            DRAG_ENTER: i(925),
            DRAG: i(926),
            DRAG_LEAVE: i(927),
            DRAG_OVER: i(928),
            DRAG_START: i(929),
            DROP: i(930),
            GAME_OUT: i(931),
            GAME_OVER: i(932),
            GAMEOBJECT_DOWN: i(933),
            GAMEOBJECT_DRAG_END: i(934),
            GAMEOBJECT_DRAG_ENTER: i(935),
            GAMEOBJECT_DRAG: i(936),
            GAMEOBJECT_DRAG_LEAVE: i(937),
            GAMEOBJECT_DRAG_OVER: i(938),
            GAMEOBJECT_DRAG_START: i(939),
            GAMEOBJECT_DROP: i(940),
            GAMEOBJECT_MOVE: i(941),
            GAMEOBJECT_OUT: i(942),
            GAMEOBJECT_OVER: i(943),
            GAMEOBJECT_POINTER_DOWN: i(944),
            GAMEOBJECT_POINTER_MOVE: i(945),
            GAMEOBJECT_POINTER_OUT: i(946),
            GAMEOBJECT_POINTER_OVER: i(947),
            GAMEOBJECT_POINTER_UP: i(948),
            GAMEOBJECT_POINTER_WHEEL: i(949),
            GAMEOBJECT_UP: i(950),
            GAMEOBJECT_WHEEL: i(951),
            MANAGER_BOOT: i(952),
            MANAGER_PROCESS: i(953),
            MANAGER_UPDATE: i(954),
            POINTER_DOWN: i(955),
            POINTER_DOWN_OUTSIDE: i(956),
            POINTER_MOVE: i(957),
            POINTER_OUT: i(958),
            POINTER_OVER: i(959),
            POINTER_UP: i(960),
            POINTER_UP_OUTSIDE: i(961),
            POINTER_WHEEL: i(962),
            POINTERLOCK_CHANGE: i(963),
            PRE_UPDATE: i(964),
            SHUTDOWN: i(965),
            START: i(966),
            UPDATE: i(967)
        }
    }
    , function(t, e) {
        t.exports = function(t, e) {
            return t.y = e + t.height * t.originY,
            t
        }
    }
    , function(t, e) {
        t.exports = function(t, e) {
            return t.x = e + t.width * t.originX,
            t
        }
    }
    , function(t, e) {
        t.exports = function(t, e) {
            return t.x = e - t.width + t.width * t.originX,
            t
        }
    }
    , function(t, e) {
        t.exports = function(t, e) {
            return t.y = e - t.height + t.height * t.originY,
            t
        }
    }
    , function(t, e) {
        t.exports = {
            CIRCLE: 0,
            ELLIPSE: 1,
            LINE: 2,
            POINT: 3,
            POLYGON: 4,
            RECTANGLE: 5,
            TRIANGLE: 6
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            return !(t.width <= 0 || t.height <= 0) && t.x <= e && t.x + t.width >= e && t.y <= i && t.y + t.height >= i
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , m = i(175)
          , s = i(9)
          , v = i(374)
          , x = i(2)
          , y = i(69)
          , w = i(91)
          , b = i(141)
          , T = i(12)
          , S = i(375)
          , r = new n({
            Extends: s,
            initialize: function(t) {
                s.call(this);
                var e = t.game
                  , i = e.renderer
                  , n = i.gl;
                this.name = x(t, "name", "WebGLPipeline"),
                this.game = e,
                this.renderer = i,
                this.manager,
                this.gl = n,
                this.view = e.canvas,
                this.width = 0,
                this.height = 0,
                this.vertexCount = 0,
                this.vertexCapacity = 0,
                this.vertexData,
                this.vertexBuffer,
                this.topology = x(t, "topology", n.TRIANGLES),
                this.bytes,
                this.vertexViewF32,
                this.vertexViewU32,
                this.active = !0,
                this.currentUnit = 0,
                this.forceZero = x(t, "forceZero", !1),
                this.hasBooted = !1,
                this.isPostFX = !1,
                this.renderTargets = [],
                this.currentRenderTarget,
                this.shaders = [],
                this.currentShader,
                this.projectionMatrix,
                this.projectionWidth = 0,
                this.projectionHeight = 0,
                this.config = t,
                this.glReset = !1
            },
            boot: function() {
                var t = this.gl
                  , e = this.config
                  , i = this.renderer;
                this.isPostFX || (this.projectionMatrix = (new y).identity());
                var n = this.renderTargets
                  , s = x(e, "renderTarget", !1);
                "boolean" == typeof s && s && (s = 1);
                var r = i.width
                  , o = i.height;
                if ("number" == typeof s)
                    for (d = 0; d < s; d++)
                        n.push(new b(i,r,o,1,0,!0));
                else if (Array.isArray(s))
                    for (d = 0; d < s.length; d++) {
                        var a = x(s[d], "scale", 1)
                          , h = x(s[d], "minFilter", 0)
                          , l = x(s[d], "autoClear", 1);
                        n.push(new b(i,r,o,a,h,l))
                    }
                n.length && (this.currentRenderTarget = n[0]),
                this.setShadersFromConfig(e);
                for (var u = this.shaders, c = 0, d = 0; d < u.length; d++)
                    u[d].vertexSize > c && (c = u[d].vertexSize);
                var p = x(e, "batchSize", i.config.batchSize);
                this.vertexCapacity = 6 * p;
                var f = new ArrayBuffer(this.vertexCapacity * c);
                this.vertexData = f,
                this.bytes = new Uint8Array(f),
                this.vertexViewF32 = new Float32Array(f),
                this.vertexViewU32 = new Uint32Array(f);
                var g = x(e, "vertices", null);
                for (g ? (this.vertexViewF32.set(g),
                this.vertexBuffer = i.createVertexBuffer(f, t.STATIC_DRAW)) : this.vertexBuffer = i.createVertexBuffer(f.byteLength, t.DYNAMIC_DRAW),
                this.setVertexBuffer(),
                d = u.length - 1; 0 <= d; d--)
                    u[d].rebind();
                this.hasBooted = !0,
                i.on(w.RESIZE, this.resize, this),
                i.on(w.PRE_RENDER, this.onPreRender, this),
                i.on(w.RENDER, this.onRender, this),
                i.on(w.POST_RENDER, this.onPostRender, this),
                this.emit(v.BOOT, this),
                this.onBoot()
            },
            onBoot: function() {},
            onResize: function() {},
            setShader: function(t, e) {
                var i = this.renderer;
                return t === this.currentShader && i.currentProgram === this.currentShader.program || (this.flush(),
                i.resetTextures(),
                this.setVertexBuffer() && !e && (e = !0),
                t.bind(e, !1),
                this.currentShader = t),
                this
            },
            getShaderByName: function(t) {
                for (var e = this.shaders, i = 0; i < e.length; i++)
                    if (e[i].name === t)
                        return e[i]
            },
            setShadersFromConfig: function(t) {
                var e = this.shaders
                  , i = this.renderer;
                for (d = 0; d < e.length; d++)
                    e[d].destroy();
                var n = "vertShader"
                  , s = "fragShader"
                  , r = "attributes"
                  , o = x(t, n, null)
                  , a = T.parseFragmentShaderMaxTextures(x(t, s, null), i.maxTextures)
                  , h = x(t, r, null)
                  , l = x(t, "shaders", [])
                  , u = l.length;
                if (0 === u)
                    o && a && (this.shaders = [new S(this,"default",o,a,m(h))]);
                else {
                    for (var c = [], d = 0; d < u; d++) {
                        var p = l[d]
                          , f = x(p, "name", "default")
                          , g = x(p, n, o)
                          , v = T.parseFragmentShaderMaxTextures(x(p, s, a), i.maxTextures)
                          , y = x(p, r, h);
                        g && v && c.push(new S(this,f,g,v,m(y)))
                    }
                    this.shaders = c
                }
                return 0 === this.shaders.length ? console.warn("Pipeline: " + this.name + " - Invalid shader config") : this.currentShader = this.shaders[0],
                this
            },
            setGameObject: function(t, e) {
                return void 0 === e && (e = t.frame),
                this.currentUnit = this.renderer.setTextureSource(e.source),
                this.currentUnit
            },
            shouldFlush: function(t) {
                return void 0 === t && (t = 0),
                this.vertexCount + t > this.vertexCapacity
            },
            resize: function(t, e) {
                t === this.width && e === this.height || this.flush(),
                this.width = t,
                this.height = e;
                for (var i = this.renderTargets, n = 0; n < i.length; n++)
                    i[n].resize(t, e);
                return this.setProjectionMatrix(t, e),
                this.emit(v.RESIZE, t, e, this),
                this.onResize(t, e),
                this
            },
            setProjectionMatrix: function(t, e) {
                var i = this.projectionMatrix;
                if (!i)
                    return this;
                this.projectionWidth = t,
                this.projectionHeight = e,
                i.ortho(0, t, e, 0, -1e3, 1e3);
                for (var n = this.shaders, s = "uProjectionMatrix", r = 0; r < n.length; r++) {
                    var o = n[r];
                    o.hasUniform(s) && (o.resetUniform(s),
                    o.setMatrix4fv(s, !1, i.val, o))
                }
                return this
            },
            updateProjectionMatrix: function() {
                var t, e;
                this.projectionMatrix && (t = this.renderer.projectionWidth,
                e = this.renderer.projectionHeight,
                this.projectionWidth === t && this.projectionHeight === e || this.setProjectionMatrix(t, e))
            },
            bind: function(t) {
                if (void 0 === t && (t = this.currentShader),
                this.glReset)
                    return this.rebind(t);
                var e = this.setVertexBuffer();
                return t.bind(e),
                this.currentShader = t,
                this.emit(v.BIND, this, t),
                this.onActive(t),
                this
            },
            rebind: function(t) {
                this.setVertexBuffer();
                for (var e = this.shaders, i = e.length - 1; 0 <= i; i--) {
                    var n = e[i].rebind();
                    t && n !== t || (this.currentShader = n)
                }
                return this.emit(v.REBIND, this.currentShader),
                this.onActive(this.currentShader),
                this.onRebind(),
                this.glReset = !1,
                this
            },
            setVertexBuffer: function() {
                var t = this.gl
                  , e = this.vertexBuffer;
                return t.getParameter(t.ARRAY_BUFFER_BINDING) !== e && (t.bindBuffer(t.ARRAY_BUFFER, e),
                !0)
            },
            preBatch: function(t) {
                return this.currentRenderTarget && this.currentRenderTarget.bind(),
                this.onPreBatch(t),
                this
            },
            postBatch: function(t) {
                return this.onDraw(this.currentRenderTarget),
                this.onPostBatch(t),
                this
            },
            onDraw: function() {},
            unbind: function() {
                this.currentRenderTarget && this.currentRenderTarget.unbind()
            },
            flush: function(t) {
                var e, i, n;
                return void 0 === t && (t = !1),
                0 < this.vertexCount && (this.emit(v.BEFORE_FLUSH, this, t),
                this.onBeforeFlush(t),
                e = this.gl,
                i = this.vertexCount,
                n = this.currentShader.vertexSize,
                this.active && (this.setVertexBuffer(),
                i === this.vertexCapacity ? e.bufferData(e.ARRAY_BUFFER, this.vertexData, e.DYNAMIC_DRAW) : e.bufferSubData(e.ARRAY_BUFFER, 0, this.bytes.subarray(0, i * n)),
                e.drawArrays(this.topology, 0, i)),
                this.vertexCount = 0,
                this.emit(v.AFTER_FLUSH, this, t),
                this.onAfterFlush(t)),
                this
            },
            onActive: function() {},
            onBind: function() {},
            onRebind: function() {},
            onBatch: function() {},
            onPreBatch: function() {},
            onPostBatch: function() {},
            onPreRender: function() {},
            onRender: function() {},
            onPostRender: function() {},
            onBeforeFlush: function() {},
            onAfterFlush: function() {},
            batchVert: function(t, e, i, n, s, r, o) {
                var a = this.vertexViewF32
                  , h = this.vertexViewU32
                  , l = this.vertexCount * this.currentShader.vertexComponentCount - 1;
                a[++l] = t,
                a[++l] = e,
                a[++l] = i,
                a[++l] = n,
                a[++l] = s,
                a[++l] = r,
                h[++l] = o,
                this.vertexCount++
            },
            batchQuad: function(t, e, i, n, s, r, o, a, h, l, u, c, d, p, f, g, v, y, m, x) {
                void 0 === x && (x = this.currentUnit);
                var w = !1;
                return this.shouldFlush(6) && (this.flush(),
                w = !0,
                x = this.setTexture2D(m)),
                this.batchVert(e, i, l, u, x, y, p),
                this.batchVert(n, s, l, d, x, y, g),
                this.batchVert(r, o, c, d, x, y, v),
                this.batchVert(e, i, l, u, x, y, p),
                this.batchVert(r, o, c, d, x, y, v),
                this.batchVert(a, h, c, u, x, y, f),
                this.onBatch(t),
                w
            },
            batchTri: function(t, e, i, n, s, r, o, a, h, l, u, c, d, p, f, g, v) {
                void 0 === v && (v = this.currentUnit);
                var y = !1;
                return this.shouldFlush(3) && (this.flush(),
                y = !0,
                v = this.setTexture2D(g)),
                this.batchVert(e, i, a, h, v, f, c),
                this.batchVert(n, s, a, u, v, f, d),
                this.batchVert(r, o, l, u, v, f, p),
                this.onBatch(t),
                y
            },
            drawFillRect: function(t, e, i, n, s, r, o, a) {
                void 0 === o && (o = this.renderer.whiteTexture.glTexture),
                void 0 === a && (a = !0),
                t = Math.floor(t),
                e = Math.floor(e);
                var h = Math.floor(t + i)
                  , l = Math.floor(e + n)
                  , u = this.setTexture2D(o)
                  , c = T.getTintAppendFloatAlphaAndSwap(s, r)
                  , d = 0
                  , p = 1;
                a && (d = 1,
                p = 0),
                this.batchQuad(null, t, e, t, l, h, l, h, e, 0, d, 1, p, c, c, c, c, 0, o, u)
            },
            setTexture2D: function(t) {
                return void 0 === t && (t = this.renderer.whiteTexture.glTexture),
                this.currentUnit = this.renderer.setTexture2D(t),
                this.currentUnit
            },
            bindTexture: function(t, e) {
                void 0 === e && (e = 0);
                var i = this.gl;
                return i.activeTexture(i.TEXTURE0 + e),
                i.bindTexture(i.TEXTURE_2D, t),
                this
            },
            bindRenderTarget: function(t, e) {
                return this.bindTexture(t.texture, e)
            },
            setTime: function(t) {
                return this.set1f(t, this.game.loop.getDuration()),
                this
            },
            set1f: function(t, e, i) {
                return void 0 === i && (i = this.currentShader),
                i.set1f(t, e),
                this
            },
            set2f: function(t, e, i, n) {
                return void 0 === n && (n = this.currentShader),
                n.set2f(t, e, i),
                this
            },
            set3f: function(t, e, i, n, s) {
                return void 0 === s && (s = this.currentShader),
                s.set3f(t, e, i, n),
                this
            },
            set4f: function(t, e, i, n, s, r) {
                return void 0 === r && (r = this.currentShader),
                r.set4f(t, e, i, n, s),
                this
            },
            set1fv: function(t, e, i) {
                return void 0 === i && (i = this.currentShader),
                i.set1fv(t, e),
                this
            },
            set2fv: function(t, e, i) {
                return void 0 === i && (i = this.currentShader),
                i.set2fv(t, e),
                this
            },
            set3fv: function(t, e, i) {
                return void 0 === i && (i = this.currentShader),
                i.set3fv(t, e),
                this
            },
            set4fv: function(t, e, i) {
                return void 0 === i && (i = this.currentShader),
                i.set4fv(t, e),
                this
            },
            set1iv: function(t, e, i) {
                return void 0 === i && (i = this.currentShader),
                i.set1iv(t, e),
                this
            },
            set2iv: function(t, e, i) {
                return void 0 === i && (i = this.currentShader),
                i.set2iv(t, e),
                this
            },
            set3iv: function(t, e, i) {
                return void 0 === i && (i = this.currentShader),
                i.set3iv(t, e),
                this
            },
            set4iv: function(t, e, i) {
                return void 0 === i && (i = this.currentShader),
                i.set4iv(t, e),
                this
            },
            set1i: function(t, e, i) {
                return void 0 === i && (i = this.currentShader),
                i.set1i(t, e),
                this
            },
            set2i: function(t, e, i, n) {
                return void 0 === n && (n = this.currentShader),
                n.set2i(t, e, i),
                this
            },
            set3i: function(t, e, i, n, s) {
                return void 0 === s && (s = this.currentShader),
                s.set3i(t, e, i, n),
                this
            },
            set4i: function(t, e, i, n, s, r) {
                return void 0 === r && (r = this.currentShader),
                r.set4i(t, e, i, n, s),
                this
            },
            setMatrix2fv: function(t, e, i, n) {
                return void 0 === n && (n = this.currentShader),
                n.setMatrix2fv(t, e, i),
                this
            },
            setMatrix3fv: function(t, e, i, n) {
                return void 0 === n && (n = this.currentShader),
                n.setMatrix3fv(t, e, i),
                this
            },
            setMatrix4fv: function(t, e, i, n) {
                return void 0 === n && (n = this.currentShader),
                n.setMatrix4fv(t, e, i),
                this
            },
            destroy: function() {
                this.emit(v.DESTROY, this);
                for (var t = this.shaders, e = 0; e < t.length; e++)
                    t[e].destroy();
                var i = this.renderTargets;
                for (e = 0; e < i.length; e++)
                    i[e].destroy();
                this.gl.deleteBuffer(this.vertexBuffer);
                var n = this.renderer;
                return n.off(w.RESIZE, this.resize, this),
                n.off(w.PRE_RENDER, this.onPreRender, this),
                n.off(w.RENDER, this.onRender, this),
                n.off(w.POST_RENDER, this.onPostRender, this),
                this.removeAllListeners(),
                this.game = null,
                this.renderer = null,
                this.manager = null,
                this.gl = null,
                this.view = null,
                this.shaders = null,
                this.renderTargets = null,
                this.bytes = null,
                this.vertexViewF32 = null,
                this.vertexViewU32 = null,
                this.vertexData = null,
                this.vertexBuffer = null,
                this.currentShader = null,
                this.currentRenderTarget = null,
                this
            }
        });
        t.exports = r
    }
    , function(t, e, i) {
        "use strict";
        function n(t, e, i) {
            i = i || 2;
            var n, s, r, o, a, h, l, u = e && e.length, c = u ? e[0] * i : t.length, d = g(t, 0, c, i, !0), p = [];
            if (!d || d.next === d.prev)
                return p;
            if (u && (d = function(t, e, i, n) {
                var s, r, o, a, h, l, u = [];
                for (s = 0,
                r = e.length; s < r; s++)
                    (o = g(t, e[s] * n, s < r - 1 ? e[s + 1] * n : t.length, n, !1)) === o.next && (o.steiner = !0),
                    u.push(function(t) {
                        for (var e = t, i = t; (e.x < i.x || e.x === i.x && e.y < i.y) && (i = e),
                        (e = e.next) !== t; )
                            ;
                        return i
                    }(o));
                for (u.sort(y),
                s = 0; s < u.length; s++)
                    a = u[s],
                    l = void 0,
                    (h = function(t, e) {
                        var i, n = e, s = t.x, r = t.y, o = -1 / 0;
                        do {
                            if (r <= n.y && r >= n.next.y && n.next.y !== n.y) {
                                var a = n.x + (r - n.y) * (n.next.x - n.x) / (n.next.y - n.y);
                                if (a <= s && o < a) {
                                    if ((o = a) === s) {
                                        if (r === n.y)
                                            return n;
                                        if (r === n.next.y)
                                            return n.next
                                    }
                                    i = n.x < n.next.x ? n : n.next
                                }
                            }
                            n = n.next
                        } while (n !== e);
                        if (!i)
                            return null;
                        if (s === o)
                            return i;
                        var h, l, u, c = i, d = i.x, p = i.y, f = 1 / 0;
                        for (n = i; s >= n.x && n.x >= d && s !== n.x && x(r < p ? s : o, r, d, p, r < p ? o : s, r, n.x, n.y) && (h = Math.abs(r - n.y) / (s - n.x),
                        S(n, t) && (h < f || h === f && (n.x > i.x || n.x === i.x && (u = n,
                        w((l = i).prev, l, u.prev) < 0 && w(u.next, l, l.next) < 0))) && (i = n,
                        f = h)),
                        (n = n.next) !== c; )
                            ;
                        return i
                    }(a, h = i)) && (l = _(h, a),
                    v(h, h.next),
                    v(l, l.next)),
                    i = v(i, i.next);
                return i
            }(t, e, d, i)),
            t.length > 80 * i) {
                n = r = t[0],
                s = o = t[1];
                for (var f = i; f < c; f += i)
                    (a = t[f]) < n && (n = a),
                    (h = t[f + 1]) < s && (s = h),
                    r < a && (r = a),
                    o < h && (o = h);
                l = 0 !== (l = Math.max(r - n, o - s)) ? 1 / l : 0
            }
            return function c(t, e, i, n, s, r, o) {
                if (t) {
                    !o && r && function(t, e, i, n) {
                        for (var s = t; null === s.z && (s.z = m(s.x, s.y, e, i, n)),
                        s.prevZ = s.prev,
                        s.nextZ = s.next,
                        (s = s.next) !== t; )
                            ;
                        s.prevZ.nextZ = null,
                        s.prevZ = null,
                        function(t) {
                            var e, i, n, s, r, o, a, h, l = 1;
                            do {
                                for (i = t,
                                r = t = null,
                                o = 0; i; ) {
                                    for (o++,
                                    n = i,
                                    e = a = 0; e < l && (a++,
                                    n = n.nextZ); e++)
                                        ;
                                    for (h = l; 0 < a || 0 < h && n; )
                                        0 !== a && (0 === h || !n || i.z <= n.z) ? (i = (s = i).nextZ,
                                        a--) : (n = (s = n).nextZ,
                                        h--),
                                        r ? r.nextZ = s : t = s,
                                        s.prevZ = r,
                                        r = s;
                                    i = n
                                }
                                r.nextZ = null,
                                l *= 2
                            } while (1 < o)
                        }(s)
                    }(t, n, s, r);
                    for (var a, h, l = t; t.prev !== t.next; )
                        if (a = t.prev,
                        h = t.next,
                        r ? function(t, e, i, n) {
                            var s = t.prev
                              , r = t
                              , o = t.next;
                            if (0 <= w(s, r, o))
                                return !1;
                            for (var a = s.x < r.x ? s.x < o.x ? s.x : o.x : r.x < o.x ? r.x : o.x, h = s.y < r.y ? s.y < o.y ? s.y : o.y : r.y < o.y ? r.y : o.y, l = s.x > r.x ? s.x > o.x ? s.x : o.x : r.x > o.x ? r.x : o.x, u = s.y > r.y ? s.y > o.y ? s.y : o.y : r.y > o.y ? r.y : o.y, c = m(a, h, e, i, n), d = m(l, u, e, i, n), p = t.prevZ, f = t.nextZ; p && p.z >= c && f && f.z <= d; ) {
                                if (p !== t.prev && p !== t.next && x(s.x, s.y, r.x, r.y, o.x, o.y, p.x, p.y) && 0 <= w(p.prev, p, p.next))
                                    return !1;
                                if (p = p.prevZ,
                                f !== t.prev && f !== t.next && x(s.x, s.y, r.x, r.y, o.x, o.y, f.x, f.y) && 0 <= w(f.prev, f, f.next))
                                    return !1;
                                f = f.nextZ
                            }
                            for (; p && p.z >= c; ) {
                                if (p !== t.prev && p !== t.next && x(s.x, s.y, r.x, r.y, o.x, o.y, p.x, p.y) && 0 <= w(p.prev, p, p.next))
                                    return !1;
                                p = p.prevZ
                            }
                            for (; f && f.z <= d; ) {
                                if (f !== t.prev && f !== t.next && x(s.x, s.y, r.x, r.y, o.x, o.y, f.x, f.y) && 0 <= w(f.prev, f, f.next))
                                    return !1;
                                f = f.nextZ
                            }
                            return !0
                        }(t, n, s, r) : function(t) {
                            var e = t.prev
                              , i = t
                              , n = t.next;
                            if (0 <= w(e, i, n))
                                return !1;
                            for (var s = t.next.next; s !== t.prev; ) {
                                if (x(e.x, e.y, i.x, i.y, n.x, n.y, s.x, s.y) && 0 <= w(s.prev, s, s.next))
                                    return !1;
                                s = s.next
                            }
                            return !0
                        }(t))
                            e.push(a.i / i),
                            e.push(t.i / i),
                            e.push(h.i / i),
                            E(t),
                            t = h.next,
                            l = h.next;
                        else if ((t = h) === l) {
                            o ? 1 === o ? c(t = function(t, e, i) {
                                var n = t;
                                do {
                                    var s = n.prev
                                      , r = n.next.next;
                                    !b(s, r) && T(s, n, n.next, r) && S(s, r) && S(r, s) && (e.push(s.i / i),
                                    e.push(n.i / i),
                                    e.push(r.i / i),
                                    E(n),
                                    E(n.next),
                                    n = t = r),
                                    n = n.next
                                } while (n !== t);
                                return v(n)
                            }(v(t), e, i), e, i, n, s, r, 2) : 2 === o && function(t, e, i, n, s, r) {
                                var o, a, h = t;
                                do {
                                    for (var l = h.next.next; l !== h.prev; ) {
                                        if (h.i !== l.i && (a = l,
                                        (o = h).next.i !== a.i && o.prev.i !== a.i && !function(t, e) {
                                            var i = t;
                                            do {
                                                if (i.i !== t.i && i.next.i !== t.i && i.i !== e.i && i.next.i !== e.i && T(i, i.next, t, e))
                                                    return !0;
                                                i = i.next
                                            } while (i !== t);
                                            return !1
                                        }(o, a) && (S(o, a) && S(a, o) && function(t, e) {
                                            for (var i = t, n = !1, s = (t.x + e.x) / 2, r = (t.y + e.y) / 2; i.y > r != i.next.y > r && i.next.y !== i.y && s < (i.next.x - i.x) * (r - i.y) / (i.next.y - i.y) + i.x && (n = !n),
                                            (i = i.next) !== t; )
                                                ;
                                            return n
                                        }(o, a) && (w(o.prev, o, a.prev) || w(o, a.prev, a)) || b(o, a) && 0 < w(o.prev, o, o.next) && 0 < w(a.prev, a, a.next)))) {
                                            var u = _(h, l);
                                            return h = v(h, h.next),
                                            u = v(u, u.next),
                                            c(h, e, i, n, s, r),
                                            c(u, e, i, n, s, r)
                                        }
                                        l = l.next
                                    }
                                    h = h.next
                                } while (h !== t)
                            }(t, e, i, n, s, r) : c(v(t), e, i, n, s, r, 1);
                            break
                        }
                }
            }(d, p, i, n, s, l),
            p
        }
        function g(t, e, i, n, s) {
            var r, o;
            if (s === 0 < P(t, e, i, n))
                for (r = e; r < i; r += n)
                    o = a(r, t[r], t[r + 1], o);
            else
                for (r = i - n; e <= r; r -= n)
                    o = a(r, t[r], t[r + 1], o);
            return o && b(o, o.next) && (E(o),
            o = o.next),
            o
        }
        function v(t, e) {
            if (!t)
                return t;
            e = e || t;
            var i, n = t;
            do {
                if (i = !1,
                n.steiner || !b(n, n.next) && 0 !== w(n.prev, n, n.next))
                    n = n.next;
                else {
                    if (E(n),
                    (n = e = n.prev) === n.next)
                        break;
                    i = !0
                }
            } while (i || n !== e);
            return e
        }
        function y(t, e) {
            return t.x - e.x
        }
        function m(t, e, i, n, s) {
            return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - i) * s) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - n) * s) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1
        }
        function x(t, e, i, n, s, r, o, a) {
            return 0 <= (s - o) * (e - a) - (t - o) * (r - a) && 0 <= (t - o) * (n - a) - (i - o) * (e - a) && 0 <= (i - o) * (r - a) - (s - o) * (n - a)
        }
        function w(t, e, i) {
            return (e.y - t.y) * (i.x - e.x) - (e.x - t.x) * (i.y - e.y)
        }
        function b(t, e) {
            return t.x === e.x && t.y === e.y
        }
        function T(t, e, i, n) {
            var s = l(w(t, e, i))
              , r = l(w(t, e, n))
              , o = l(w(i, n, t))
              , a = l(w(i, n, e));
            return s !== r && o !== a || 0 === s && h(t, i, e) || 0 === r && h(t, n, e) || 0 === o && h(i, t, n) || !(0 !== a || !h(i, e, n))
        }
        function h(t, e, i) {
            return e.x <= Math.max(t.x, i.x) && e.x >= Math.min(t.x, i.x) && e.y <= Math.max(t.y, i.y) && e.y >= Math.min(t.y, i.y)
        }
        function l(t) {
            return 0 < t ? 1 : t < 0 ? -1 : 0
        }
        function S(t, e) {
            return w(t.prev, t, t.next) < 0 ? 0 <= w(t, e, t.next) && 0 <= w(t, t.prev, e) : w(t, e, t.prev) < 0 || w(t, t.next, e) < 0
        }
        function _(t, e) {
            var i = new o(t.i,t.x,t.y)
              , n = new o(e.i,e.x,e.y)
              , s = t.next
              , r = e.prev;
            return (t.next = e).prev = t,
            (i.next = s).prev = i,
            (n.next = i).prev = n,
            (r.next = n).prev = r,
            n
        }
        function a(t, e, i, n) {
            var s = new o(t,e,i);
            return n ? (s.next = n.next,
            (s.prev = n).next.prev = s,
            n.next = s) : (s.prev = s).next = s,
            s
        }
        function E(t) {
            t.next.prev = t.prev,
            t.prev.next = t.next,
            t.prevZ && (t.prevZ.nextZ = t.nextZ),
            t.nextZ && (t.nextZ.prevZ = t.prevZ)
        }
        function o(t, e, i) {
            this.i = t,
            this.x = e,
            this.y = i,
            this.prev = null,
            this.next = null,
            this.z = null,
            this.prevZ = null,
            this.nextZ = null,
            this.steiner = !1
        }
        function P(t, e, i, n) {
            for (var s = 0, r = e, o = i - n; r < i; r += n)
                s += (t[o] - t[r]) * (t[r + 1] + t[o + 1]),
                o = r;
            return s
        }
        n.deviation = function(t, e, i, n) {
            var s = e && e.length
              , r = s ? e[0] * i : t.length
              , o = Math.abs(P(t, 0, r, i));
            if (s)
                for (var a = 0, h = e.length; a < h; a++) {
                    var l = e[a] * i
                      , u = a < h - 1 ? e[a + 1] * i : t.length;
                    o -= Math.abs(P(t, l, u, i))
                }
            var c = 0;
            for (a = 0; a < n.length; a += 3) {
                var d = n[a] * i
                  , p = n[a + 1] * i
                  , f = n[a + 2] * i;
                c += Math.abs((t[d] - t[f]) * (t[1 + p] - t[1 + d]) - (t[d] - t[p]) * (t[1 + f] - t[1 + d]))
            }
            return 0 === o && 0 === c ? 0 : Math.abs((c - o) / o)
        }
        ,
        n.flatten = function(t) {
            for (var e = t[0][0].length, i = {
                vertices: [],
                holes: [],
                dimensions: e
            }, n = 0, s = 0; s < t.length; s++) {
                for (var r = 0; r < t[s].length; r++)
                    for (var o = 0; o < e; o++)
                        i.vertices.push(t[s][r][o]);
                0 < s && (n += t[s - 1].length,
                i.holes.push(n))
            }
            return i
        }
        ,
        t.exports = n
    }
    , function(t, e) {
        t.exports = function(t, e, i, n) {
            var s = i || e.strokeColor
              , r = n || e.strokeAlpha
              , o = (16711680 & s) >>> 16
              , a = (65280 & s) >>> 8
              , h = 255 & s;
            t.strokeStyle = "rgba(" + o + "," + a + "," + h + "," + r + ")",
            t.lineWidth = e.lineWidth
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , h = i(21)
          , l = i(23)
          , s = i(8)
          , u = i(2)
          , c = i(6)
          , d = i(7)
          , r = new n({
            Extends: l,
            initialize: function(t, e, i, n, s) {
                var r, o = "json";
                d(e) && (e = u(r = e, "key"),
                i = u(r, "url"),
                n = u(r, "xhrSettings"),
                o = u(r, "extension", o),
                s = u(r, "dataKey", s));
                var a = {
                    type: "json",
                    cache: t.cacheManager.json,
                    extension: o,
                    responseType: "text",
                    key: e,
                    url: i,
                    xhrSettings: n,
                    config: s
                };
                l.call(this, t, a),
                d(i) && (this.data = s ? c(i, s) : i,
                this.state = h.FILE_POPULATED)
            },
            onProcess: function() {
                if (this.state !== h.FILE_POPULATED) {
                    this.state = h.FILE_PROCESSING;
                    try {
                        var t = JSON.parse(this.xhrLoader.responseText)
                    } catch (t) {
                        throw console.warn("Invalid JSON: " + this.key),
                        this.onProcessError(),
                        t
                    }
                    var e = this.config;
                    this.data = "string" == typeof e ? c(t, e, t) : t
                }
                this.onProcessComplete()
            }
        });
        s.register("json", function(t, e, i, n) {
            if (Array.isArray(t))
                for (var s = 0; s < t.length; s++)
                    this.addFile(new r(this,t[s]));
            else
                this.addFile(new r(this,t,e,n,i));
            return this
        }),
        t.exports = r
    }
    , function(t, e) {
        t.exports = {
            DYNAMIC_BODY: 0,
            STATIC_BODY: 1,
            GROUP: 2,
            TILEMAPLAYER: 3,
            FACING_NONE: 10,
            FACING_UP: 11,
            FACING_DOWN: 12,
            FACING_LEFT: 13,
            FACING_RIGHT: 14
        }
    }
    , function(t, e, i) {
        var d = i(158)
          , p = i(26);
        t.exports = function(t, e, i, n, s) {
            for (var r, o, a, h, l = p(t, e, i, n, null, s), u = 0; u < l.length; u++) {
                var c = l[u];
                c && (c.collides ? (r = d(c.x, c.y - 1, !0, s),
                o = d(c.x, c.y + 1, !0, s),
                a = d(c.x - 1, c.y, !0, s),
                h = d(c.x + 1, c.y, !0, s),
                c.faceTop = !r || !r.collides,
                c.faceBottom = !o || !o.collides,
                c.faceLeft = !a || !a.collides,
                c.faceRight = !h || !h.collides) : c.resetFaces())
            }
        }
    }
    , function(t, e, i) {
        var a = {};
        t.exports = a;
        var w = i(83)
          , b = i(32);
        a.create = function(t, e) {
            for (var i = [], n = 0; n < t.length; n++) {
                var s = t[n]
                  , r = {
                    x: s.x,
                    y: s.y,
                    index: n,
                    body: e,
                    isInternal: !1,
                    contact: null,
                    offset: null
                };
                r.contact = {
                    vertex: r,
                    normalImpulse: 0,
                    tangentImpulse: 0
                },
                i.push(r)
            }
            return i
        }
        ,
        a.fromPath = function(t, e) {
            var n = [];
            return t.replace(/L?\s*([-\d.e]+)[\s,]*([-\d.e]+)*/gi, function(t, e, i) {
                n.push({
                    x: parseFloat(e),
                    y: parseFloat(i)
                })
            }),
            a.create(n, e)
        }
        ,
        a.centre = function(t) {
            for (var e, i, n, s = a.area(t, !0), r = {
                x: 0,
                y: 0
            }, o = 0; o < t.length; o++)
                n = (o + 1) % t.length,
                e = w.cross(t[o], t[n]),
                i = w.mult(w.add(t[o], t[n]), e),
                r = w.add(r, i);
            return w.div(r, 6 * s)
        }
        ,
        a.mean = function(t) {
            for (var e = {
                x: 0,
                y: 0
            }, i = 0; i < t.length; i++)
                e.x += t[i].x,
                e.y += t[i].y;
            return w.div(e, t.length)
        }
        ,
        a.area = function(t, e) {
            for (var i = 0, n = t.length - 1, s = 0; s < t.length; s++)
                i += (t[n].x - t[s].x) * (t[n].y + t[s].y),
                n = s;
            return e ? i / 2 : Math.abs(i) / 2
        }
        ,
        a.inertia = function(t, e) {
            for (var i, n, s = 0, r = 0, o = t, a = 0; a < o.length; a++)
                n = (a + 1) % o.length,
                s += (i = Math.abs(w.cross(o[n], o[a]))) * (w.dot(o[n], o[n]) + w.dot(o[n], o[a]) + w.dot(o[a], o[a])),
                r += i;
            return e / 6 * (s / r)
        }
        ,
        a.translate = function(t, e, i) {
            var n;
            if (i)
                for (n = 0; n < t.length; n++)
                    t[n].x += e.x * i,
                    t[n].y += e.y * i;
            else
                for (n = 0; n < t.length; n++)
                    t[n].x += e.x,
                    t[n].y += e.y;
            return t
        }
        ,
        a.rotate = function(t, e, i) {
            if (0 !== e) {
                for (var n = Math.cos(e), s = Math.sin(e), r = 0; r < t.length; r++) {
                    var o = t[r]
                      , a = o.x - i.x
                      , h = o.y - i.y;
                    o.x = i.x + (a * n - h * s),
                    o.y = i.y + (a * s + h * n)
                }
                return t
            }
        }
        ,
        a.contains = function(t, e) {
            for (var i = 0; i < t.length; i++) {
                var n = t[i]
                  , s = t[(i + 1) % t.length];
                if (0 < (e.x - n.x) * (s.y - n.y) + (e.y - n.y) * (n.x - s.x))
                    return !1
            }
            return !0
        }
        ,
        a.scale = function(t, e, i, n) {
            if (1 === e && 1 === i)
                return t;
            var s, r;
            n = n || a.centre(t);
            for (var o = 0; o < t.length; o++)
                s = t[o],
                r = w.sub(s, n),
                t[o].x = n.x + r.x * e,
                t[o].y = n.y + r.y * i;
            return t
        }
        ,
        a.chamfer = function(t, e, i, n, s) {
            e = "number" == typeof e ? [e] : e || [8],
            i = void 0 !== i ? i : -1,
            n = n || 2,
            s = s || 14;
            for (var r = [], o = 0; o < t.length; o++) {
                var a = t[0 <= o - 1 ? o - 1 : t.length - 1]
                  , h = t[o]
                  , l = t[(o + 1) % t.length]
                  , u = e[o < e.length ? o : e.length - 1];
                if (0 !== u) {
                    var c = w.normalise({
                        x: h.y - a.y,
                        y: a.x - h.x
                    })
                      , d = w.normalise({
                        x: l.y - h.y,
                        y: h.x - l.x
                    })
                      , p = Math.sqrt(2 * Math.pow(u, 2))
                      , f = w.mult(b.clone(c), u)
                      , g = w.normalise(w.mult(w.add(c, d), .5))
                      , v = w.sub(h, w.mult(g, p))
                      , y = i;
                    -1 === i && (y = 1.75 * Math.pow(u, .32)),
                    (y = b.clamp(y, n, s)) % 2 == 1 && (y += 1);
                    for (var m = Math.acos(w.dot(c, d)) / y, x = 0; x < y; x++)
                        r.push(w.add(w.rotate(f, m * x), v))
                } else
                    r.push(h)
            }
            return r
        }
        ,
        a.clockwiseSort = function(t) {
            var i = a.mean(t);
            return t.sort(function(t, e) {
                return w.angle(i, t) - w.angle(i, e)
            }),
            t
        }
        ,
        a.isConvex = function(t) {
            var e, i, n, s, r = 0, o = t.length;
            if (o < 3)
                return null;
            for (e = 0; e < o; e++)
                if (n = (e + 2) % o,
                s = (t[i = (e + 1) % o].x - t[e].x) * (t[n].y - t[i].y),
                (s -= (t[i].y - t[e].y) * (t[n].x - t[i].x)) < 0 ? r |= 1 : 0 < s && (r |= 2),
                3 === r)
                    return !1;
            return 0 !== r || null
        }
        ,
        a.hull = function(t) {
            var e, i, n = [], s = [];
            for ((t = t.slice(0)).sort(function(t, e) {
                var i = t.x - e.x;
                return 0 != i ? i : t.y - e.y
            }),
            i = 0; i < t.length; i += 1) {
                for (e = t[i]; 2 <= s.length && w.cross3(s[s.length - 2], s[s.length - 1], e) <= 0; )
                    s.pop();
                s.push(e)
            }
            for (i = t.length - 1; 0 <= i; --i) {
                for (e = t[i]; 2 <= n.length && w.cross3(n[n.length - 2], n[n.length - 1], e) <= 0; )
                    n.pop();
                n.push(e)
            }
            return n.pop(),
            s.pop(),
            n.concat(s)
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(66)
          , r = i(300)
          , o = i(301)
          , a = i(56)
          , h = i(170)
          , l = new n({
            initialize: function(t, e, i) {
                void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                this.type = a.CIRCLE,
                this.x = t,
                this.y = e,
                this._radius = i,
                this._diameter = 2 * i
            },
            contains: function(t, e) {
                return s(this, t, e)
            },
            getPoint: function(t, e) {
                return r(this, t, e)
            },
            getPoints: function(t, e, i) {
                return o(this, t, e, i)
            },
            getRandomPoint: function(t) {
                return h(this, t)
            },
            setTo: function(t, e, i) {
                return this.x = t,
                this.y = e,
                this._radius = i,
                this._diameter = 2 * i,
                this
            },
            setEmpty: function() {
                return this._radius = 0,
                this._diameter = 0,
                this
            },
            setPosition: function(t, e) {
                return void 0 === e && (e = t),
                this.x = t,
                this.y = e,
                this
            },
            isEmpty: function() {
                return this._radius <= 0
            },
            radius: {
                get: function() {
                    return this._radius
                },
                set: function(t) {
                    this._radius = t,
                    this._diameter = 2 * t
                }
            },
            diameter: {
                get: function() {
                    return this._diameter
                },
                set: function(t) {
                    this._diameter = t,
                    this._radius = .5 * t
                }
            },
            left: {
                get: function() {
                    return this.x - this._radius
                },
                set: function(t) {
                    this.x = t + this._radius
                }
            },
            right: {
                get: function() {
                    return this.x + this._radius
                },
                set: function(t) {
                    this.x = t - this._radius
                }
            },
            top: {
                get: function() {
                    return this.y - this._radius
                },
                set: function(t) {
                    this.y = t + this._radius
                }
            },
            bottom: {
                get: function() {
                    return this.y + this._radius
                },
                set: function(t) {
                    this.y = t - this._radius
                }
            }
        });
        t.exports = l
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            return 0 < t.radius && e >= t.left && e <= t.right && i >= t.top && i <= t.bottom && (t.x - e) * (t.x - e) + (t.y - i) * (t.y - i) <= t.radius * t.radius
        }
    }
    , function(t, e) {
        t.exports = function(t) {
            return Math.sqrt((t.x2 - t.x1) * (t.x2 - t.x1) + (t.y2 - t.y1) * (t.y2 - t.y1))
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            var n = i - e;
            return e + ((t - e) % n + n) % n
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(39)
          , r = new n({
            initialize: function(t) {
                this.val = new Float32Array(16),
                t ? this.copy(t) : this.identity()
            },
            clone: function() {
                return new r(this)
            },
            set: function(t) {
                return this.copy(t)
            },
            setValues: function(t, e, i, n, s, r, o, a, h, l, u, c, d, p, f, g) {
                var v = this.val;
                return v[0] = t,
                v[1] = e,
                v[2] = i,
                v[3] = n,
                v[4] = s,
                v[5] = r,
                v[6] = o,
                v[7] = a,
                v[8] = h,
                v[9] = l,
                v[10] = u,
                v[11] = c,
                v[12] = d,
                v[13] = p,
                v[14] = f,
                v[15] = g,
                this
            },
            copy: function(t) {
                var e = t.val;
                return this.setValues(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10], e[11], e[12], e[13], e[14], e[15])
            },
            fromArray: function(t) {
                return this.setValues(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13], t[14], t[15])
            },
            zero: function() {
                return this.setValues(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
            },
            transform: function(t, e, i) {
                var n = h.fromQuat(i).val
                  , s = e.x
                  , r = e.y
                  , o = e.z;
                return this.setValues(n[0] * s, n[1] * s, n[2] * s, 0, n[4] * r, n[5] * r, n[6] * r, 0, n[8] * o, n[9] * o, n[10] * o, 0, t.x, t.y, t.z, 1)
            },
            xyz: function(t, e, i) {
                this.identity();
                var n = this.val;
                return n[12] = t,
                n[13] = e,
                n[14] = i,
                this
            },
            scaling: function(t, e, i) {
                this.zero();
                var n = this.val;
                return n[0] = t,
                n[5] = e,
                n[10] = i,
                n[15] = 1,
                this
            },
            identity: function() {
                return this.setValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
            },
            transpose: function() {
                var t = this.val
                  , e = t[1]
                  , i = t[2]
                  , n = t[3]
                  , s = t[6]
                  , r = t[7]
                  , o = t[11];
                return t[1] = t[4],
                t[2] = t[8],
                t[3] = t[12],
                t[4] = e,
                t[6] = t[9],
                t[7] = t[13],
                t[8] = i,
                t[9] = s,
                t[11] = t[14],
                t[12] = n,
                t[13] = r,
                t[14] = o,
                this
            },
            getInverse: function(t) {
                return this.copy(t),
                this.invert()
            },
            invert: function() {
                var t = this.val
                  , e = t[0]
                  , i = t[1]
                  , n = t[2]
                  , s = t[3]
                  , r = t[4]
                  , o = t[5]
                  , a = t[6]
                  , h = t[7]
                  , l = t[8]
                  , u = t[9]
                  , c = t[10]
                  , d = t[11]
                  , p = t[12]
                  , f = t[13]
                  , g = t[14]
                  , v = t[15]
                  , y = e * o - i * r
                  , m = e * a - n * r
                  , x = e * h - s * r
                  , w = i * a - n * o
                  , b = i * h - s * o
                  , T = n * h - s * a
                  , S = l * f - u * p
                  , _ = l * g - c * p
                  , E = l * v - d * p
                  , P = u * g - c * f
                  , A = u * v - d * f
                  , M = c * v - d * g
                  , C = y * M - m * A + x * P + w * E - b * _ + T * S;
                return C ? (C = 1 / C,
                this.setValues((o * M - a * A + h * P) * C, (n * A - i * M - s * P) * C, (f * T - g * b + v * w) * C, (c * b - u * T - d * w) * C, (a * E - r * M - h * _) * C, (e * M - n * E + s * _) * C, (g * x - p * T - v * m) * C, (l * T - c * x + d * m) * C, (r * A - o * E + h * S) * C, (i * E - e * A - s * S) * C, (p * b - f * x + v * y) * C, (u * x - l * b - d * y) * C, (o * _ - r * P - a * S) * C, (e * P - i * _ + n * S) * C, (f * m - p * w - g * y) * C, (l * w - u * m + c * y) * C)) : this
            },
            adjoint: function() {
                var t = this.val
                  , e = t[0]
                  , i = t[1]
                  , n = t[2]
                  , s = t[3]
                  , r = t[4]
                  , o = t[5]
                  , a = t[6]
                  , h = t[7]
                  , l = t[8]
                  , u = t[9]
                  , c = t[10]
                  , d = t[11]
                  , p = t[12]
                  , f = t[13]
                  , g = t[14]
                  , v = t[15];
                return this.setValues(o * (c * v - d * g) - u * (a * v - h * g) + f * (a * d - h * c), -(i * (c * v - d * g) - u * (n * v - s * g) + f * (n * d - s * c)), i * (a * v - h * g) - o * (n * v - s * g) + f * (n * h - s * a), -(i * (a * d - h * c) - o * (n * d - s * c) + u * (n * h - s * a)), -(r * (c * v - d * g) - l * (a * v - h * g) + p * (a * d - h * c)), e * (c * v - d * g) - l * (n * v - s * g) + p * (n * d - s * c), -(e * (a * v - h * g) - r * (n * v - s * g) + p * (n * h - s * a)), e * (a * d - h * c) - r * (n * d - s * c) + l * (n * h - s * a), r * (u * v - d * f) - l * (o * v - h * f) + p * (o * d - h * u), -(e * (u * v - d * f) - l * (i * v - s * f) + p * (i * d - s * u)), e * (o * v - h * f) - r * (i * v - s * f) + p * (i * h - s * o), -(e * (o * d - h * u) - r * (i * d - s * u) + l * (i * h - s * o)), -(r * (u * g - c * f) - l * (o * g - a * f) + p * (o * c - a * u)), e * (u * g - c * f) - l * (i * g - n * f) + p * (i * c - n * u), -(e * (o * g - a * f) - r * (i * g - n * f) + p * (i * a - n * o)), e * (o * c - a * u) - r * (i * c - n * u) + l * (i * a - n * o))
            },
            determinant: function() {
                var t = this.val
                  , e = t[0]
                  , i = t[1]
                  , n = t[2]
                  , s = t[3]
                  , r = t[4]
                  , o = t[5]
                  , a = t[6]
                  , h = t[7]
                  , l = t[8]
                  , u = t[9]
                  , c = t[10]
                  , d = t[11]
                  , p = t[12]
                  , f = t[13]
                  , g = t[14]
                  , v = t[15];
                return (e * o - i * r) * (c * v - d * g) - (e * a - n * r) * (u * v - d * f) + (e * h - s * r) * (u * g - c * f) + (i * a - n * o) * (l * v - d * p) - (i * h - s * o) * (l * g - c * p) + (n * h - s * a) * (l * f - u * p)
            },
            multiply: function(t) {
                var e = this.val
                  , i = e[0]
                  , n = e[1]
                  , s = e[2]
                  , r = e[3]
                  , o = e[4]
                  , a = e[5]
                  , h = e[6]
                  , l = e[7]
                  , u = e[8]
                  , c = e[9]
                  , d = e[10]
                  , p = e[11]
                  , f = e[12]
                  , g = e[13]
                  , v = e[14]
                  , y = e[15]
                  , m = t.val
                  , x = m[0]
                  , w = m[1]
                  , b = m[2]
                  , T = m[3];
                return e[0] = x * i + w * o + b * u + T * f,
                e[1] = x * n + w * a + b * c + T * g,
                e[2] = x * s + w * h + b * d + T * v,
                e[3] = x * r + w * l + b * p + T * y,
                x = m[4],
                w = m[5],
                b = m[6],
                T = m[7],
                e[4] = x * i + w * o + b * u + T * f,
                e[5] = x * n + w * a + b * c + T * g,
                e[6] = x * s + w * h + b * d + T * v,
                e[7] = x * r + w * l + b * p + T * y,
                x = m[8],
                w = m[9],
                b = m[10],
                T = m[11],
                e[8] = x * i + w * o + b * u + T * f,
                e[9] = x * n + w * a + b * c + T * g,
                e[10] = x * s + w * h + b * d + T * v,
                e[11] = x * r + w * l + b * p + T * y,
                x = m[12],
                w = m[13],
                b = m[14],
                T = m[15],
                e[12] = x * i + w * o + b * u + T * f,
                e[13] = x * n + w * a + b * c + T * g,
                e[14] = x * s + w * h + b * d + T * v,
                e[15] = x * r + w * l + b * p + T * y,
                this
            },
            multiplyLocal: function(t) {
                var e = this.val
                  , i = t.val;
                return this.setValues(e[0] * i[0] + e[1] * i[4] + e[2] * i[8] + e[3] * i[12], e[0] * i[1] + e[1] * i[5] + e[2] * i[9] + e[3] * i[13], e[0] * i[2] + e[1] * i[6] + e[2] * i[10] + e[3] * i[14], e[0] * i[3] + e[1] * i[7] + e[2] * i[11] + e[3] * i[15], e[4] * i[0] + e[5] * i[4] + e[6] * i[8] + e[7] * i[12], e[4] * i[1] + e[5] * i[5] + e[6] * i[9] + e[7] * i[13], e[4] * i[2] + e[5] * i[6] + e[6] * i[10] + e[7] * i[14], e[4] * i[3] + e[5] * i[7] + e[6] * i[11] + e[7] * i[15], e[8] * i[0] + e[9] * i[4] + e[10] * i[8] + e[11] * i[12], e[8] * i[1] + e[9] * i[5] + e[10] * i[9] + e[11] * i[13], e[8] * i[2] + e[9] * i[6] + e[10] * i[10] + e[11] * i[14], e[8] * i[3] + e[9] * i[7] + e[10] * i[11] + e[11] * i[15], e[12] * i[0] + e[13] * i[4] + e[14] * i[8] + e[15] * i[12], e[12] * i[1] + e[13] * i[5] + e[14] * i[9] + e[15] * i[13], e[12] * i[2] + e[13] * i[6] + e[14] * i[10] + e[15] * i[14], e[12] * i[3] + e[13] * i[7] + e[14] * i[11] + e[15] * i[15])
            },
            premultiply: function(t) {
                return this.multiplyMatrices(t, this)
            },
            multiplyMatrices: function(t, e) {
                var i = t.val
                  , n = e.val
                  , s = i[0]
                  , r = i[4]
                  , o = i[8]
                  , a = i[12]
                  , h = i[1]
                  , l = i[5]
                  , u = i[9]
                  , c = i[13]
                  , d = i[2]
                  , p = i[6]
                  , f = i[10]
                  , g = i[14]
                  , v = i[3]
                  , y = i[7]
                  , m = i[11]
                  , x = i[15]
                  , w = n[0]
                  , b = n[4]
                  , T = n[8]
                  , S = n[12]
                  , _ = n[1]
                  , E = n[5]
                  , P = n[9]
                  , A = n[13]
                  , M = n[2]
                  , C = n[6]
                  , O = n[10]
                  , k = n[14]
                  , R = n[3]
                  , L = n[7]
                  , I = n[11]
                  , D = n[15];
                return this.setValues(s * w + r * _ + o * M + a * R, h * w + l * _ + u * M + c * R, d * w + p * _ + f * M + g * R, v * w + y * _ + m * M + x * R, s * b + r * E + o * C + a * L, h * b + l * E + u * C + c * L, d * b + p * E + f * C + g * L, v * b + y * E + m * C + x * L, s * T + r * P + o * O + a * I, h * T + l * P + u * O + c * I, d * T + p * P + f * O + g * I, v * T + y * P + m * O + x * I, s * S + r * A + o * k + a * D, h * S + l * A + u * k + c * D, d * S + p * A + f * k + g * D, v * S + y * A + m * k + x * D)
            },
            translate: function(t) {
                return this.translateXYZ(t.x, t.y, t.z)
            },
            translateXYZ: function(t, e, i) {
                var n = this.val;
                return n[12] = n[0] * t + n[4] * e + n[8] * i + n[12],
                n[13] = n[1] * t + n[5] * e + n[9] * i + n[13],
                n[14] = n[2] * t + n[6] * e + n[10] * i + n[14],
                n[15] = n[3] * t + n[7] * e + n[11] * i + n[15],
                this
            },
            scale: function(t) {
                return this.scaleXYZ(t.x, t.y, t.z)
            },
            scaleXYZ: function(t, e, i) {
                var n = this.val;
                return n[0] = n[0] * t,
                n[1] = n[1] * t,
                n[2] = n[2] * t,
                n[3] = n[3] * t,
                n[4] = n[4] * e,
                n[5] = n[5] * e,
                n[6] = n[6] * e,
                n[7] = n[7] * e,
                n[8] = n[8] * i,
                n[9] = n[9] * i,
                n[10] = n[10] * i,
                n[11] = n[11] * i,
                this
            },
            makeRotationAxis: function(t, e) {
                var i = Math.cos(e)
                  , n = Math.sin(e)
                  , s = 1 - i
                  , r = t.x
                  , o = t.y
                  , a = t.z
                  , h = s * r
                  , l = s * o;
                return this.setValues(h * r + i, h * o - n * a, h * a + n * o, 0, h * o + n * a, l * o + i, l * a - n * r, 0, h * a - n * o, l * a + n * r, s * a * a + i, 0, 0, 0, 0, 1)
            },
            rotate: function(t, e) {
                var i = this.val
                  , n = e.x
                  , s = e.y
                  , r = e.z
                  , o = Math.sqrt(n * n + s * s + r * r);
                if (Math.abs(o) < 1e-6)
                    return this;
                n *= o = 1 / o,
                s *= o,
                r *= o;
                var a = Math.sin(t)
                  , h = Math.cos(t)
                  , l = 1 - h
                  , u = i[0]
                  , c = i[1]
                  , d = i[2]
                  , p = i[3]
                  , f = i[4]
                  , g = i[5]
                  , v = i[6]
                  , y = i[7]
                  , m = i[8]
                  , x = i[9]
                  , w = i[10]
                  , b = i[11]
                  , T = i[12]
                  , S = i[13]
                  , _ = i[14]
                  , E = i[15]
                  , P = n * n * l + h
                  , A = s * n * l + r * a
                  , M = r * n * l - s * a
                  , C = n * s * l - r * a
                  , O = s * s * l + h
                  , k = r * s * l + n * a
                  , R = n * r * l + s * a
                  , L = s * r * l - n * a
                  , I = r * r * l + h;
                return this.setValues(u * P + f * A + m * M, c * P + g * A + x * M, d * P + v * A + w * M, p * P + y * A + b * M, u * C + f * O + m * k, c * C + g * O + x * k, d * C + v * O + w * k, p * C + y * O + b * k, u * R + f * L + m * I, c * R + g * L + x * I, d * R + v * L + w * I, p * R + y * L + b * I, T, S, _, E)
            },
            rotateX: function(t) {
                var e = this.val
                  , i = Math.sin(t)
                  , n = Math.cos(t)
                  , s = e[4]
                  , r = e[5]
                  , o = e[6]
                  , a = e[7]
                  , h = e[8]
                  , l = e[9]
                  , u = e[10]
                  , c = e[11];
                return e[4] = s * n + h * i,
                e[5] = r * n + l * i,
                e[6] = o * n + u * i,
                e[7] = a * n + c * i,
                e[8] = h * n - s * i,
                e[9] = l * n - r * i,
                e[10] = u * n - o * i,
                e[11] = c * n - a * i,
                this
            },
            rotateY: function(t) {
                var e = this.val
                  , i = Math.sin(t)
                  , n = Math.cos(t)
                  , s = e[0]
                  , r = e[1]
                  , o = e[2]
                  , a = e[3]
                  , h = e[8]
                  , l = e[9]
                  , u = e[10]
                  , c = e[11];
                return e[0] = s * n - h * i,
                e[1] = r * n - l * i,
                e[2] = o * n - u * i,
                e[3] = a * n - c * i,
                e[8] = s * i + h * n,
                e[9] = r * i + l * n,
                e[10] = o * i + u * n,
                e[11] = a * i + c * n,
                this
            },
            rotateZ: function(t) {
                var e = this.val
                  , i = Math.sin(t)
                  , n = Math.cos(t)
                  , s = e[0]
                  , r = e[1]
                  , o = e[2]
                  , a = e[3]
                  , h = e[4]
                  , l = e[5]
                  , u = e[6]
                  , c = e[7];
                return e[0] = s * n + h * i,
                e[1] = r * n + l * i,
                e[2] = o * n + u * i,
                e[3] = a * n + c * i,
                e[4] = h * n - s * i,
                e[5] = l * n - r * i,
                e[6] = u * n - o * i,
                e[7] = c * n - a * i,
                this
            },
            fromRotationTranslation: function(t, e) {
                var i = t.x
                  , n = t.y
                  , s = t.z
                  , r = t.w
                  , o = i + i
                  , a = n + n
                  , h = s + s
                  , l = i * o
                  , u = i * a
                  , c = i * h
                  , d = n * a
                  , p = n * h
                  , f = s * h
                  , g = r * o
                  , v = r * a
                  , y = r * h;
                return this.setValues(1 - (d + f), u + y, c - v, 0, u - y, 1 - (l + f), p + g, 0, c + v, p - g, 1 - (l + d), 0, e.x, e.y, e.z, 1)
            },
            fromQuat: function(t) {
                var e = t.x
                  , i = t.y
                  , n = t.z
                  , s = t.w
                  , r = e + e
                  , o = i + i
                  , a = n + n
                  , h = e * r
                  , l = e * o
                  , u = e * a
                  , c = i * o
                  , d = i * a
                  , p = n * a
                  , f = s * r
                  , g = s * o
                  , v = s * a;
                return this.setValues(1 - (c + p), l + v, u - g, 0, l - v, 1 - (h + p), d + f, 0, u + g, d - f, 1 - (h + c), 0, 0, 0, 0, 1)
            },
            frustum: function(t, e, i, n, s, r) {
                var o = 1 / (e - t)
                  , a = 1 / (n - i)
                  , h = 1 / (s - r);
                return this.setValues(2 * s * o, 0, 0, 0, 0, 2 * s * a, 0, 0, (e + t) * o, (n + i) * a, (r + s) * h, -1, 0, 0, r * s * 2 * h, 0)
            },
            perspective: function(t, e, i, n) {
                var s = 1 / Math.tan(t / 2)
                  , r = 1 / (i - n);
                return this.setValues(s / e, 0, 0, 0, 0, s, 0, 0, 0, 0, (n + i) * r, -1, 0, 0, 2 * n * i * r, 0)
            },
            perspectiveLH: function(t, e, i, n) {
                return this.setValues(2 * i / t, 0, 0, 0, 0, 2 * i / e, 0, 0, 0, 0, -n / (i - n), 1, 0, 0, i * n / (i - n), 0)
            },
            ortho: function(t, e, i, n, s, r) {
                var o = 0 == (o = t - e) ? o : 1 / o
                  , a = 0 == (a = i - n) ? a : 1 / a
                  , h = 0 == (h = s - r) ? h : 1 / h;
                return this.setValues(-2 * o, 0, 0, 0, 0, -2 * a, 0, 0, 0, 0, 2 * h, 0, (t + e) * o, (n + i) * a, (r + s) * h, 1)
            },
            lookAtRH: function(t, e, i) {
                var n = this.val;
                return u.subVectors(t, e),
                0 === u.getLengthSquared() && (u.z = 1),
                u.normalize(),
                o.crossVectors(i, u),
                0 === o.getLengthSquared() && (1 === Math.abs(i.z) ? u.x += 1e-4 : u.z += 1e-4,
                u.normalize(),
                o.crossVectors(i, u)),
                o.normalize(),
                a.crossVectors(u, o),
                n[0] = o.x,
                n[1] = o.y,
                n[2] = o.z,
                n[4] = a.x,
                n[5] = a.y,
                n[6] = a.z,
                n[8] = u.x,
                n[9] = u.y,
                n[10] = u.z,
                this
            },
            lookAt: function(t, e, i) {
                var n = t.x
                  , s = t.y
                  , r = t.z
                  , o = i.x
                  , a = i.y
                  , h = i.z
                  , l = e.x
                  , u = e.y
                  , c = e.z;
                if (Math.abs(n - l) < 1e-6 && Math.abs(s - u) < 1e-6 && Math.abs(r - c) < 1e-6)
                    return this.identity();
                var d = n - l
                  , p = s - u
                  , f = r - c
                  , g = 1 / Math.sqrt(d * d + p * p + f * f)
                  , v = a * (f *= g) - h * (p *= g)
                  , y = h * (d *= g) - o * f
                  , m = o * p - a * d;
                (g = Math.sqrt(v * v + y * y + m * m)) ? (v *= g = 1 / g,
                y *= g,
                m *= g) : m = y = v = 0;
                var x = p * m - f * y
                  , w = f * v - d * m
                  , b = d * y - p * v;
                return (g = Math.sqrt(x * x + w * w + b * b)) ? (x *= g = 1 / g,
                w *= g,
                b *= g) : b = w = x = 0,
                this.setValues(v, x, d, 0, y, w, p, 0, m, b, f, 0, -(v * n + y * s + m * r), -(x * n + w * s + b * r), -(d * n + p * s + f * r), 1)
            },
            yawPitchRoll: function(t, e, i) {
                this.zero(),
                h.zero(),
                l.zero();
                var n = this.val
                  , s = h.val
                  , r = l.val
                  , o = Math.sin(i)
                  , a = Math.cos(i);
                return n[10] = 1,
                n[15] = 1,
                n[0] = a,
                n[1] = o,
                n[4] = -o,
                n[5] = a,
                o = Math.sin(e),
                a = Math.cos(e),
                s[0] = 1,
                s[15] = 1,
                s[5] = a,
                s[10] = a,
                s[9] = -o,
                s[6] = o,
                o = Math.sin(t),
                a = Math.cos(t),
                r[5] = 1,
                r[15] = 1,
                r[0] = a,
                r[2] = -o,
                r[8] = o,
                r[10] = a,
                this.multiplyLocal(h),
                this.multiplyLocal(l),
                this
            },
            setWorldMatrix: function(t, e, i, n, s) {
                return this.yawPitchRoll(t.y, t.x, t.z),
                h.scaling(i.x, i.y, i.z),
                l.xyz(e.x, e.y, e.z),
                this.multiplyLocal(h),
                this.multiplyLocal(l),
                n && this.multiplyLocal(n),
                s && this.multiplyLocal(s),
                this
            },
            multiplyToMat4: function(t, e) {
                var i = this.val
                  , n = t.val
                  , s = i[0]
                  , r = i[1]
                  , o = i[2]
                  , a = i[3]
                  , h = i[4]
                  , l = i[5]
                  , u = i[6]
                  , c = i[7]
                  , d = i[8]
                  , p = i[9]
                  , f = i[10]
                  , g = i[11]
                  , v = i[12]
                  , y = i[13]
                  , m = i[14]
                  , x = i[15]
                  , w = n[0]
                  , b = n[1]
                  , T = n[2]
                  , S = n[3]
                  , _ = n[4]
                  , E = n[5]
                  , P = n[6]
                  , A = n[7]
                  , M = n[8]
                  , C = n[9]
                  , O = n[10]
                  , k = n[11]
                  , R = n[12]
                  , L = n[13]
                  , I = n[14]
                  , D = n[15];
                return e.setValues(w * s + b * h + T * d + S * v, b * r + b * l + T * p + S * y, T * o + b * u + T * f + S * m, S * a + b * c + T * g + S * x, _ * s + E * h + P * d + A * v, _ * r + E * l + P * p + A * y, _ * o + E * u + P * f + A * m, _ * a + E * c + P * g + A * x, M * s + C * h + O * d + k * v, M * r + C * l + O * p + k * y, M * o + C * u + O * f + k * m, M * a + C * c + O * g + k * x, R * s + L * h + I * d + D * v, R * r + L * l + I * p + D * y, R * o + L * u + I * f + D * m, R * a + L * c + I * g + D * x)
            },
            fromRotationXYTranslation: function(t, e, i) {
                var n = e.x
                  , s = e.y
                  , r = e.z
                  , o = Math.sin(t.x)
                  , a = Math.cos(t.x)
                  , h = Math.sin(t.y)
                  , l = Math.cos(t.y)
                  , u = n
                  , c = s
                  , d = r
                  , p = -o
                  , f = 0 - p * h
                  , g = 0 - a * h
                  , v = p * l
                  , y = a * l;
                return i || (u = l * n + h * r,
                c = f * n + a * s + v * r,
                d = g * n + o * s + y * r),
                this.setValues(l, f, g, 0, 0, a, o, 0, h, v, y, 0, u, c, d, 1)
            },
            getMaxScaleOnAxis: function() {
                var t = this.val
                  , e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2]
                  , i = t[4] * t[4] + t[5] * t[5] + t[6] * t[6]
                  , n = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
                return Math.sqrt(Math.max(e, i, n))
            }
        })
          , h = new r
          , l = new r
          , o = new s
          , a = new s
          , u = new s;
        t.exports = r
    }
    , function(t, e, i) {
        t.exports = {
            COMPLETE: i(987),
            DECODED: i(988),
            DECODED_ALL: i(989),
            DESTROY: i(990),
            DETUNE: i(991),
            GLOBAL_DETUNE: i(992),
            GLOBAL_MUTE: i(993),
            GLOBAL_RATE: i(994),
            GLOBAL_VOLUME: i(995),
            LOOP: i(996),
            LOOPED: i(997),
            MUTE: i(998),
            PAN: i(999),
            PAUSE_ALL: i(1e3),
            PAUSE: i(1001),
            PLAY: i(1002),
            RATE: i(1003),
            RESUME_ALL: i(1004),
            RESUME: i(1005),
            SEEK: i(1006),
            STOP_ALL: i(1007),
            STOP: i(1008),
            UNLOCKED: i(1009),
            VOLUME: i(1010)
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(21)
          , c = i(23)
          , r = i(8)
          , d = i(2)
          , p = i(7)
          , o = new n({
            Extends: c,
            initialize: function t(e, i, n, s, r) {
                var o, a, h = "png";
                p(i) && (i = d(a = i, "key"),
                n = d(a, "url"),
                o = d(a, "normalMap"),
                s = d(a, "xhrSettings"),
                h = d(a, "extension", h),
                r = d(a, "frameConfig")),
                Array.isArray(n) && (o = n[1],
                n = n[0]);
                var l, u = {
                    type: "image",
                    cache: e.textureManager,
                    extension: h,
                    responseType: "blob",
                    key: i,
                    url: n,
                    xhrSettings: s,
                    config: r
                };
                c.call(this, e, u),
                o && ((l = new t(e,this.key,o,s,r)).type = "normalMap",
                this.setLink(l),
                e.addFile(l))
            },
            onProcess: function() {
                this.state = s.FILE_PROCESSING,
                this.data = new Image,
                this.data.crossOrigin = this.crossOrigin;
                var t = this;
                this.data.onload = function() {
                    c.revokeObjectURL(t.data),
                    t.onProcessComplete()
                }
                ,
                this.data.onerror = function() {
                    c.revokeObjectURL(t.data),
                    t.onProcessError()
                }
                ,
                c.createObjectURL(this.data, this.xhrLoader.response, "image/png")
            },
            addToCache: function() {
                var t, e = this.linkFile;
                e && e.state === s.FILE_COMPLETE ? (t = "image" === this.type ? this.cache.addImage(this.key, this.data, e.data) : this.cache.addImage(e.key, e.data, this.data),
                this.pendingDestroy(t),
                e.pendingDestroy(t)) : e || (t = this.cache.addImage(this.key, this.data),
                this.pendingDestroy(t))
            }
        });
        r.register("image", function(t, e, i) {
            if (Array.isArray(t))
                for (var n = 0; n < t.length; n++)
                    this.addFile(new o(this,t[n]));
            else
                this.addFile(new o(this,t,e,i));
            return this
        }),
        t.exports = o
    }
    , function(t, e) {
        t.exports = function(t, e) {
            e ? t.setCollision(!0, !0, !0, !0, !1) : t.resetCollision(!1)
        }
    }
    , function(t, e, i) {
        var r = i(164)
          , n = i(0)
          , s = i(11)
          , o = i(15)
          , a = i(1065)
          , h = new n({
            Extends: o,
            Mixins: [s.Alpha, s.BlendMode, s.Depth, s.Flip, s.GetBounds, s.Mask, s.Origin, s.Pipeline, s.ScrollFactor, s.Size, s.TextureCrop, s.Tint, s.Transform, s.Visible, a],
            initialize: function(t, e, i, n, s) {
                o.call(this, t, "Sprite"),
                this._crop = this.resetCropObject(),
                this.anims = new r(this),
                this.setTexture(n, s),
                this.setPosition(e, i),
                this.setSizeToFrame(),
                this.setOriginFromFrame(),
                this.initPipeline()
            },
            addedToScene: function() {
                this.scene.sys.updateList.add(this)
            },
            removedFromScene: function() {
                this.scene.sys.updateList.remove(this)
            },
            preUpdate: function(t, e) {
                this.anims.update(t, e)
            },
            play: function(t, e) {
                return this.anims.play(t, e)
            },
            playReverse: function(t, e) {
                return this.anims.playReverse(t, e)
            },
            playAfterDelay: function(t, e) {
                return this.anims.playAfterDelay(t, e)
            },
            playAfterRepeat: function(t, e) {
                return this.anims.playAfterRepeat(t, e)
            },
            chain: function(t) {
                return this.anims.chain(t)
            },
            stop: function() {
                return this.anims.stop()
            },
            stopAfterDelay: function(t) {
                return this.anims.stopAfterDelay(t)
            },
            stopAfterRepeat: function(t) {
                return this.anims.stopAfterRepeat(t)
            },
            stopOnFrame: function(t) {
                return this.anims.stopOnFrame(t)
            },
            toJSON: function() {
                return s.ToJSON(this)
            },
            preDestroy: function() {
                this.anims.destroy(),
                this.anims = void 0
            }
        });
        t.exports = h
    }
    , function(t, e) {
        t.exports = function(t, e) {
            if (!(e >= t.length)) {
                for (var i = t.length - 1, n = t[e], s = e; s < i; s++)
                    t[s] = t[s + 1];
                return t.length = i,
                n
            }
        }
    }
    , function(t, e, i) {
        t.exports = {
            ADDED_TO_SCENE: i(643),
            DESTROY: i(644),
            REMOVED_FROM_SCENE: i(645),
            VIDEO_COMPLETE: i(646),
            VIDEO_CREATED: i(647),
            VIDEO_ERROR: i(648),
            VIDEO_LOOP: i(649),
            VIDEO_PLAY: i(650),
            VIDEO_SEEKED: i(651),
            VIDEO_SEEKING: i(652),
            VIDEO_STOP: i(653),
            VIDEO_TIMEOUT: i(654),
            VIDEO_UNLOCKED: i(655)
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i, n) {
            return void 0 === i && (i = 0),
            0 === e ? t : (t -= i,
            t = e * Math.floor(t / e),
            n ? (i + t) / e : i + t)
        }
    }
    , function(t, e) {
        t.exports = function(t) {
            var e = {};
            for (var i in t)
                Array.isArray(t[i]) ? e[i] = t[i].slice(0) : e[i] = t[i];
            return e
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i, n) {
            var s = t.length;
            if (e < 0 || s < e || i <= e || s < i || s < e + i) {
                if (n)
                    throw new Error("Range Error: Values outside acceptable range");
                return !1
            }
            return !0
        }
    }
    , function(t, e) {
        function n(t, e) {
            return String(t).localeCompare(e)
        }
        function o(t, e, i, n) {
            for (var s, r, o, a, h = t.length, l = 0, u = 2 * i, c = 0; c < h; c += u)
                for (r = (s = c + i) + i,
                h < s && (s = h),
                h < r && (r = h),
                o = c,
                a = s; ; )
                    if (o < s && a < r)
                        e(t[o], t[a]) <= 0 ? n[l++] = t[o++] : n[l++] = t[a++];
                    else if (o < s)
                        n[l++] = t[o++];
                    else {
                        if (!(a < r))
                            break;
                        n[l++] = t[a++]
                    }
        }
        t.exports = function(t, e) {
            void 0 === e && (e = n);
            var i = function(t, e) {
                var i = t.length;
                if (i <= 1)
                    return t;
                for (var n = new Array(i), s = 1; s < i; s *= 2) {
                    o(t, e, s, n);
                    var r = t;
                    t = n,
                    n = r
                }
                return t
            }(t, e);
            return i !== t && o(i, null, t.length, t),
            t
        }
    }
    , function(t, e, i) {
        var r = i(134)
          , o = i(205);
        t.exports = function(t, e) {
            var i, n = r.Power0;
            if ("string" == typeof t ? r.hasOwnProperty(t) ? n = r[t] : (i = "",
            t.indexOf(".") && ("in" === (i = t.substr(t.indexOf(".") + 1)).toLowerCase() ? i = "easeIn" : "out" === i.toLowerCase() ? i = "easeOut" : "inout" === i.toLowerCase() && (i = "easeInOut")),
            t = o(t.substr(0, t.indexOf(".") + 1) + i),
            r.hasOwnProperty(t) && (n = r[t])) : "function" == typeof t ? n = t : Array.isArray(t) && t.length,
            !e)
                return n;
            var s = e.slice(0);
            return s.unshift(0),
            function(t) {
                return s[0] = t,
                n.apply(this, s)
            }
        }
    }
    , function(t, e, i) {
        var v = i(12);
        t.exports = function(t, e, i, n, s) {
            var r = t.strokeTint
              , o = v.getTintAppendFloatAlpha(e.strokeColor, e.strokeAlpha * i);
            r.TL = o,
            r.TR = o,
            r.BL = o,
            r.BR = o;
            var a = e.pathData
              , h = a.length - 1
              , l = e.lineWidth
              , u = l / 2
              , c = a[0] - n
              , d = a[1] - s;
            e.closePath || (h -= 2);
            for (var p = 2; p < h; p += 2) {
                var f = a[p] - n
                  , g = a[p + 1] - s;
                t.batchLine(c, d, f, g, u, u, l, p - 2, !!e.closePath && p === h - 1),
                c = f,
                d = g
            }
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(115)
          , r = i(476)
          , o = i(477)
          , a = i(56)
          , h = i(47)
          , l = i(181)
          , u = new n({
            initialize: function(t, e, i, n, s, r) {
                void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                void 0 === n && (n = 0),
                void 0 === s && (s = 0),
                void 0 === r && (r = 0),
                this.type = a.TRIANGLE,
                this.x1 = t,
                this.y1 = e,
                this.x2 = i,
                this.y2 = n,
                this.x3 = s,
                this.y3 = r
            },
            contains: function(t, e) {
                return s(this, t, e)
            },
            getPoint: function(t, e) {
                return r(this, t, e)
            },
            getPoints: function(t, e, i) {
                return o(this, t, e, i)
            },
            getRandomPoint: function(t) {
                return l(this, t)
            },
            setTo: function(t, e, i, n, s, r) {
                return void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                void 0 === n && (n = 0),
                void 0 === s && (s = 0),
                void 0 === r && (r = 0),
                this.x1 = t,
                this.y1 = e,
                this.x2 = i,
                this.y2 = n,
                this.x3 = s,
                this.y3 = r,
                this
            },
            getLineA: function(t) {
                return void 0 === t && (t = new h),
                t.setTo(this.x1, this.y1, this.x2, this.y2),
                t
            },
            getLineB: function(t) {
                return void 0 === t && (t = new h),
                t.setTo(this.x2, this.y2, this.x3, this.y3),
                t
            },
            getLineC: function(t) {
                return void 0 === t && (t = new h),
                t.setTo(this.x3, this.y3, this.x1, this.y1),
                t
            },
            left: {
                get: function() {
                    return Math.min(this.x1, this.x2, this.x3)
                },
                set: function(t) {
                    var e = this.x1 <= this.x2 && this.x1 <= this.x3 ? this.x1 - t : this.x2 <= this.x1 && this.x2 <= this.x3 ? this.x2 - t : this.x3 - t;
                    this.x1 -= e,
                    this.x2 -= e,
                    this.x3 -= e
                }
            },
            right: {
                get: function() {
                    return Math.max(this.x1, this.x2, this.x3)
                },
                set: function(t) {
                    var e = this.x1 >= this.x2 && this.x1 >= this.x3 ? this.x1 - t : this.x2 >= this.x1 && this.x2 >= this.x3 ? this.x2 - t : this.x3 - t;
                    this.x1 -= e,
                    this.x2 -= e,
                    this.x3 -= e
                }
            },
            top: {
                get: function() {
                    return Math.min(this.y1, this.y2, this.y3)
                },
                set: function(t) {
                    var e = this.y1 <= this.y2 && this.y1 <= this.y3 ? this.y1 - t : this.y2 <= this.y1 && this.y2 <= this.y3 ? this.y2 - t : this.y3 - t;
                    this.y1 -= e,
                    this.y2 -= e,
                    this.y3 -= e
                }
            },
            bottom: {
                get: function() {
                    return Math.max(this.y1, this.y2, this.y3)
                },
                set: function(t) {
                    var e = this.y1 >= this.y2 && this.y1 >= this.y3 ? this.y1 - t : this.y2 >= this.y1 && this.y2 >= this.y3 ? this.y2 - t : this.y3 - t;
                    this.y1 -= e,
                    this.y2 -= e,
                    this.y3 -= e
                }
            }
        });
        t.exports = u
    }
    , function(t, e) {
        var i = {};
        (t.exports = i).create = function(t, e) {
            return {
                x: t || 0,
                y: e || 0
            }
        }
        ,
        i.clone = function(t) {
            return {
                x: t.x,
                y: t.y
            }
        }
        ,
        i.magnitude = function(t) {
            return Math.sqrt(t.x * t.x + t.y * t.y)
        }
        ,
        i.magnitudeSquared = function(t) {
            return t.x * t.x + t.y * t.y
        }
        ,
        i.rotate = function(t, e, i) {
            var n = Math.cos(e)
              , s = Math.sin(e);
            i = i || {};
            var r = t.x * n - t.y * s;
            return i.y = t.x * s + t.y * n,
            i.x = r,
            i
        }
        ,
        i.rotateAbout = function(t, e, i, n) {
            var s = Math.cos(e)
              , r = Math.sin(e);
            n = n || {};
            var o = i.x + ((t.x - i.x) * s - (t.y - i.y) * r);
            return n.y = i.y + ((t.x - i.x) * r + (t.y - i.y) * s),
            n.x = o,
            n
        }
        ,
        i.normalise = function(t) {
            var e = i.magnitude(t);
            return 0 === e ? {
                x: 0,
                y: 0
            } : {
                x: t.x / e,
                y: t.y / e
            }
        }
        ,
        i.dot = function(t, e) {
            return t.x * e.x + t.y * e.y
        }
        ,
        i.cross = function(t, e) {
            return t.x * e.y - t.y * e.x
        }
        ,
        i.cross3 = function(t, e, i) {
            return (e.x - t.x) * (i.y - t.y) - (e.y - t.y) * (i.x - t.x)
        }
        ,
        i.add = function(t, e, i) {
            return (i = i || {}).x = t.x + e.x,
            i.y = t.y + e.y,
            i
        }
        ,
        i.sub = function(t, e, i) {
            return (i = i || {}).x = t.x - e.x,
            i.y = t.y - e.y,
            i
        }
        ,
        i.mult = function(t, e) {
            return {
                x: t.x * e,
                y: t.y * e
            }
        }
        ,
        i.div = function(t, e) {
            return {
                x: t.x / e,
                y: t.y / e
            }
        }
        ,
        i.perp = function(t, e) {
            return {
                x: (e = !0 === e ? -1 : 1) * -t.y,
                y: e * t.x
            }
        }
        ,
        i.neg = function(t) {
            return {
                x: -t.x,
                y: -t.y
            }
        }
        ,
        i.angle = function(t, e) {
            return Math.atan2(e.y - t.y, e.x - t.x)
        }
        ,
        i._temp = [i.create(), i.create(), i.create(), i.create(), i.create(), i.create()]
    }
    , function(t, e) {
        var i = {};
        (t.exports = i).create = function(t) {
            var e = {
                min: {
                    x: 0,
                    y: 0
                },
                max: {
                    x: 0,
                    y: 0
                }
            };
            return t && i.update(e, t),
            e
        }
        ,
        i.update = function(t, e, i) {
            t.min.x = 1 / 0,
            t.max.x = -1 / 0,
            t.min.y = 1 / 0,
            t.max.y = -1 / 0;
            for (var n = 0; n < e.length; n++) {
                var s = e[n];
                s.x > t.max.x && (t.max.x = s.x),
                s.x < t.min.x && (t.min.x = s.x),
                s.y > t.max.y && (t.max.y = s.y),
                s.y < t.min.y && (t.min.y = s.y)
            }
            i && (0 < i.x ? t.max.x += i.x : t.min.x += i.x,
            0 < i.y ? t.max.y += i.y : t.min.y += i.y)
        }
        ,
        i.contains = function(t, e) {
            return e.x >= t.min.x && e.x <= t.max.x && e.y >= t.min.y && e.y <= t.max.y
        }
        ,
        i.overlaps = function(t, e) {
            return t.min.x <= e.max.x && t.max.x >= e.min.x && t.max.y >= e.min.y && t.min.y <= e.max.y
        }
        ,
        i.translate = function(t, e) {
            t.min.x += e.x,
            t.max.x += e.x,
            t.min.y += e.y,
            t.max.y += e.y
        }
        ,
        i.shift = function(t, e) {
            var i = t.max.x - t.min.x
              , n = t.max.y - t.min.y;
            t.min.x = e.x,
            t.max.x = e.x + i,
            t.min.y = e.y,
            t.max.y = e.y + n
        }
    }
    , function(t, e, i) {
        var n = i(29)
          , s = i(0)
          , r = i(11)
          , o = i(502)
          , a = new s({
            Mixins: [r.Alpha, r.Flip, r.Visible],
            initialize: function(t, e, i, n, s, r, o, a) {
                this.layer = t,
                this.index = e,
                this.x = i,
                this.y = n,
                this.width = s,
                this.height = r,
                this.right,
                this.bottom,
                this.baseWidth = void 0 !== o ? o : s,
                this.baseHeight = void 0 !== a ? a : r,
                this.pixelX = 0,
                this.pixelY = 0,
                this.updatePixelXY(),
                this.properties = {},
                this.rotation = 0,
                this.collideLeft = !1,
                this.collideRight = !1,
                this.collideUp = !1,
                this.collideDown = !1,
                this.faceLeft = !1,
                this.faceRight = !1,
                this.faceTop = !1,
                this.faceBottom = !1,
                this.collisionCallback = void 0,
                (this.collisionCallbackContext = this).tint = 16777215,
                this.physics = {}
            },
            containsPoint: function(t, e) {
                return !(t < this.pixelX || e < this.pixelY || t > this.right || e > this.bottom)
            },
            copy: function(t) {
                return this.index = t.index,
                this.alpha = t.alpha,
                this.properties = t.properties,
                this.visible = t.visible,
                this.setFlip(t.flipX, t.flipY),
                this.tint = t.tint,
                this.rotation = t.rotation,
                this.collideUp = t.collideUp,
                this.collideDown = t.collideDown,
                this.collideLeft = t.collideLeft,
                this.collideRight = t.collideRight,
                this.collisionCallback = t.collisionCallback,
                this.collisionCallbackContext = t.collisionCallbackContext,
                this
            },
            getCollisionGroup: function() {
                return this.tileset ? this.tileset.getTileCollisionGroup(this.index) : null
            },
            getTileData: function() {
                return this.tileset ? this.tileset.getTileData(this.index) : null
            },
            getLeft: function(t) {
                var e = this.tilemapLayer;
                return e ? e.tileToWorldX(this.x, t) : this.x * this.baseWidth
            },
            getRight: function(t) {
                var e = this.tilemapLayer;
                return e ? this.getLeft(t) + this.width * e.scaleX : this.getLeft(t) + this.width
            },
            getTop: function(t) {
                var e = this.tilemapLayer;
                return e ? e.tileToWorldY(this.y, t) - (this.height - this.baseHeight) * e.scaleY : this.y * this.baseHeight - (this.height - this.baseHeight)
            },
            getBottom: function(t) {
                var e = this.tilemapLayer;
                return e ? this.getTop(t) + this.height * e.scaleY : this.getTop(t) + this.height
            },
            getBounds: function(t, e) {
                return void 0 === e && (e = new o),
                e.x = this.getLeft(),
                e.y = this.getTop(),
                e.width = this.getRight() - e.x,
                e.height = this.getBottom() - e.y,
                e
            },
            getCenterX: function(t) {
                return (this.getLeft(t) + this.getRight(t)) / 2
            },
            getCenterY: function(t) {
                return (this.getTop(t) + this.getBottom(t)) / 2
            },
            intersects: function(t, e, i, n) {
                return !(i <= this.pixelX || n <= this.pixelY || t >= this.right || e >= this.bottom)
            },
            isInteresting: function(t, e) {
                return t && e ? this.canCollide || this.hasInterestingFace : t ? this.collides : !!e && this.hasInterestingFace
            },
            resetCollision: function(t) {
                return void 0 === t && (t = !0),
                this.collideLeft = !1,
                this.collideRight = !1,
                this.collideUp = !1,
                this.collideDown = !1,
                this.faceTop = !1,
                this.faceBottom = !1,
                this.faceLeft = !1,
                this.faceRight = !1,
                t && this.tilemapLayer && this.tilemapLayer.calculateFacesAt(this.x, this.y),
                this
            },
            resetFaces: function() {
                return this.faceTop = !1,
                this.faceBottom = !1,
                this.faceLeft = !1,
                this.faceRight = !1,
                this
            },
            setCollision: function(t, e, i, n, s) {
                return void 0 === e && (e = t),
                void 0 === i && (i = t),
                void 0 === n && (n = t),
                void 0 === s && (s = !0),
                this.collideLeft = t,
                this.collideRight = e,
                this.collideUp = i,
                this.collideDown = n,
                this.faceLeft = t,
                this.faceRight = e,
                this.faceTop = i,
                this.faceBottom = n,
                s && this.tilemapLayer && this.tilemapLayer.calculateFacesAt(this.x, this.y),
                this
            },
            setCollisionCallback: function(t, e) {
                return null === t ? (this.collisionCallback = void 0,
                this.collisionCallbackContext = void 0) : (this.collisionCallback = t,
                this.collisionCallbackContext = e),
                this
            },
            setSize: function(t, e, i, n) {
                return void 0 !== t && (this.width = t),
                void 0 !== e && (this.height = e),
                void 0 !== i && (this.baseWidth = i),
                void 0 !== n && (this.baseHeight = n),
                this.updatePixelXY(),
                this
            },
            updatePixelXY: function() {
                var t, e, i = this.layer.orientation;
                return i === n.ORTHOGONAL ? (this.pixelX = this.x * this.baseWidth,
                this.pixelY = this.y * this.baseHeight) : i === n.ISOMETRIC ? (this.pixelX = (this.x - this.y) * this.baseWidth * .5,
                this.pixelY = (this.x + this.y) * this.baseHeight * .5) : i === n.STAGGERED ? (this.pixelX = this.x * this.baseWidth + this.y % 2 * (this.baseWidth / 2),
                this.pixelY = this.y * (this.baseHeight / 2)) : i === n.HEXAGONAL && (t = this.layer.hexSideLength,
                e = (this.baseHeight - t) / 2 + t,
                this.pixelX = this.x * this.baseWidth + this.y % 2 * (this.baseWidth / 2),
                this.pixelY = this.y * e),
                this.right = this.pixelX + this.baseWidth,
                this.bottom = this.pixelY + this.baseHeight,
                this
            },
            destroy: function() {
                this.collisionCallback = void 0,
                this.collisionCallbackContext = void 0,
                this.properties = void 0
            },
            canCollide: {
                get: function() {
                    return this.collideLeft || this.collideRight || this.collideUp || this.collideDown || void 0 !== this.collisionCallback
                }
            },
            collides: {
                get: function() {
                    return this.collideLeft || this.collideRight || this.collideUp || this.collideDown
                }
            },
            hasInterestingFace: {
                get: function() {
                    return this.faceTop || this.faceBottom || this.faceLeft || this.faceRight
                }
            },
            tileset: {
                get: function() {
                    var t = this.layer.tilemapLayer;
                    if (t) {
                        var e = t.gidMap[this.index];
                        if (e)
                            return e
                    }
                    return null
                }
            },
            tilemapLayer: {
                get: function() {
                    return this.layer.tilemapLayer
                }
            },
            tilemap: {
                get: function() {
                    var t = this.tilemapLayer;
                    return t ? t.tilemap : null
                }
            }
        });
        t.exports = a
    }
    , function(t, e, i) {
        var v = {};
        t.exports = v;
        var y = i(64)
          , m = i(32)
          , x = i(41)
          , d = i(84)
          , p = i(83)
          , w = i(1393);
        v.rectangle = function(t, e, i, n, s) {
            s = s || {};
            var r, o = {
                label: "Rectangle Body",
                position: {
                    x: t,
                    y: e
                },
                vertices: y.fromPath("L 0 0 L " + i + " 0 L " + i + " " + n + " L 0 " + n)
            };
            return s.chamfer && (r = s.chamfer,
            o.vertices = y.chamfer(o.vertices, r.radius, r.quality, r.qualityMin, r.qualityMax),
            delete s.chamfer),
            x.create(m.extend({}, o, s))
        }
        ,
        v.trapezoid = function(t, e, i, n, s, r) {
            r = r || {};
            var o, a = i * (s *= .5), h = a + (1 - 2 * s) * i, l = h + a, u = s < .5 ? "L 0 0 L " + a + " " + -n + " L " + h + " " + -n + " L " + l + " 0" : "L 0 0 L " + h + " " + -n + " L " + l + " 0", c = {
                label: "Trapezoid Body",
                position: {
                    x: t,
                    y: e
                },
                vertices: y.fromPath(u)
            };
            return r.chamfer && (o = r.chamfer,
            c.vertices = y.chamfer(c.vertices, o.radius, o.quality, o.qualityMin, o.qualityMax),
            delete r.chamfer),
            x.create(m.extend({}, c, r))
        }
        ,
        v.circle = function(t, e, i, n, s) {
            n = n || {};
            var r = {
                label: "Circle Body",
                circleRadius: i
            };
            s = s || 25;
            var o = Math.ceil(Math.max(10, Math.min(s, i)));
            return o % 2 == 1 && (o += 1),
            v.polygon(t, e, o, i, m.extend({}, r, n))
        }
        ,
        v.polygon = function(t, e, i, n, s) {
            if (s = s || {},
            i < 3)
                return v.circle(t, e, n, s);
            for (var r = 2 * Math.PI / i, o = "", a = .5 * r, h = 0; h < i; h += 1) {
                var l = a + h * r
                  , u = Math.cos(l) * n
                  , c = Math.sin(l) * n;
                o += "L " + u.toFixed(3) + " " + c.toFixed(3) + " "
            }
            var d, p = {
                label: "Polygon Body",
                position: {
                    x: t,
                    y: e
                },
                vertices: y.fromPath(o)
            };
            return s.chamfer && (d = s.chamfer,
            p.vertices = y.chamfer(p.vertices, d.radius, d.quality, d.qualityMin, d.qualityMax),
            delete s.chamfer),
            x.create(m.extend({}, p, s))
        }
        ,
        v.fromVertices = function(t, e, i, n, s, r, o) {
            var a, h, l, u, c;
            for (n = n || {},
            h = [],
            s = void 0 !== s && s,
            r = void 0 !== r ? r : .01,
            o = void 0 !== o ? o : 10,
            w || m.warn("Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull."),
            m.isArray(i[0]) || (i = [i]),
            c = 0; c < i.length; c += 1)
                if (u = i[c],
                (l = y.isConvex(u)) || !w)
                    u = l ? y.clockwiseSort(u) : y.hull(u),
                    h.push({
                        position: {
                            x: t,
                            y: e
                        },
                        vertices: u
                    });
                else {
                    var d = u.map(function(t) {
                        return [t.x, t.y]
                    });
                    w.makeCCW(d),
                    !1 !== r && w.removeCollinearPoints(d, r);
                    for (var p = w.quickDecomp(d), f = 0; f < p.length; f++) {
                        var g = p[f].map(function(t) {
                            return {
                                x: t[0],
                                y: t[1]
                            }
                        });
                        0 < o && y.area(g) < o || h.push({
                            position: y.centre(g),
                            vertices: g
                        })
                    }
                }
            for (f = 0; f < h.length; f++)
                h[f] = x.create(m.extend(h[f], n));
            return s && v.flagCoincidentParts(h, 5),
            1 < h.length ? (a = x.create(m.extend({
                parts: h.slice(0)
            }, n)),
            x.setPosition(a, {
                x: t,
                y: e
            }),
            a) : h[0]
        }
        ,
        v.flagCoincidentParts = function(t, e) {
            void 0 === e && (e = 5);
            for (var i = 0; i < t.length; i++)
                for (var n = t[i], s = i + 1; s < t.length; s++) {
                    var r = t[s];
                    if (d.overlaps(n.bounds, r.bounds))
                        for (var o = n.vertices, a = r.vertices, h = 0; h < n.vertices.length; h++)
                            for (var l = 0; l < r.vertices.length; l++) {
                                var u = p.magnitudeSquared(p.sub(o[(h + 1) % o.length], a[l]))
                                  , c = p.magnitudeSquared(p.sub(o[h], a[(l + 1) % a.length]));
                                u < e && c < e && (o[h].isInternal = !0,
                                a[l].isInternal = !0)
                            }
                }
            return t
        }
    }
    , function(t, e) {
        t.exports = function(t) {
            return t.x - t.width * t.originX + .5 * t.width
        }
    }
    , function(t, e) {
        t.exports = function(t, e) {
            var i = t.width * t.originX;
            return t.x = e + i - .5 * t.width,
            t
        }
    }
    , function(t, e) {
        t.exports = function(t) {
            return t.y - t.height * t.originY + .5 * t.height
        }
    }
    , function(t, e) {
        t.exports = function(t, e) {
            var i = t.height * t.originY;
            return t.y = e + i - .5 * t.height,
            t
        }
    }
    , function(t, e, i) {
        t.exports = {
            POST_RENDER: i(628),
            PRE_RENDER: i(629),
            RENDER: i(630),
            RESIZE: i(631)
        }
    }
    , function(t, e) {
        t.exports = {
            BITMAPMASK_PIPELINE: "BitmapMaskPipeline",
            LIGHT_PIPELINE: "Light2D",
            POINTLIGHT_PIPELINE: "PointLightPipeline",
            SINGLE_PIPELINE: "SinglePipeline",
            MULTI_PIPELINE: "MultiPipeline",
            ROPE_PIPELINE: "RopePipeline",
            GRAPHICS_PIPELINE: "GraphicsPipeline",
            POSTFX_PIPELINE: "PostFXPipeline",
            UTILITY_PIPELINE: "UtilityPipeline"
        }
    }
    , function(t, e, i) {
        var h = i(74);
        t.exports = function(t, e, i, n) {
            if (void 0 === n && (n = t),
            !Array.isArray(e))
                return -1 !== (o = t.indexOf(e)) ? (h(t, o),
                i && i.call(n, e),
                e) : null;
            for (var s = e.length - 1, r = []; 0 <= s; ) {
                var o, a = e[s];
                -1 !== (o = t.indexOf(a)) && (h(t, o),
                r.push(a),
                i && i.call(n, a)),
                s--
            }
            return r
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(199)
          , r = i(10)
          , o = i(3)
          , a = new n({
            initialize: function(t) {
                this.type = t,
                this.defaultDivisions = 5,
                this.arcLengthDivisions = 100,
                this.cacheArcLengths = [],
                this.needsUpdate = !0,
                this.active = !0,
                this._tmpVec2A = new o,
                this._tmpVec2B = new o
            },
            draw: function(t, e) {
                return void 0 === e && (e = 32),
                t.strokePoints(this.getPoints(e))
            },
            getBounds: function(t, e) {
                t = t || new r,
                void 0 === e && (e = 16);
                var i = this.getLength();
                i < e && (e = i / 2);
                var n = Math.max(1, Math.round(i / e));
                return s(this.getSpacedPoints(n), t)
            },
            getDistancePoints: function(t) {
                var e = this.getLength()
                  , i = Math.max(1, e / t);
                return this.getSpacedPoints(i)
            },
            getEndPoint: function(t) {
                return void 0 === t && (t = new o),
                this.getPointAt(1, t)
            },
            getLength: function() {
                var t = this.getLengths();
                return t[t.length - 1]
            },
            getLengths: function(t) {
                if (void 0 === t && (t = this.arcLengthDivisions),
                this.cacheArcLengths.length === t + 1 && !this.needsUpdate)
                    return this.cacheArcLengths;
                this.needsUpdate = !1;
                var e, i = [], n = this.getPoint(0, this._tmpVec2A), s = 0;
                i.push(0);
                for (var r = 1; r <= t; r++)
                    s += (e = this.getPoint(r / t, this._tmpVec2B)).distance(n),
                    i.push(s),
                    n.copy(e);
                return this.cacheArcLengths = i
            },
            getPointAt: function(t, e) {
                var i = this.getUtoTmapping(t);
                return this.getPoint(i, e)
            },
            getPoints: function(t, e, i) {
                void 0 === i && (i = []),
                t = t || (e ? this.getLength() / e : this.defaultDivisions);
                for (var n = 0; n <= t; n++)
                    i.push(this.getPoint(n / t));
                return i
            },
            getRandomPoint: function(t) {
                return void 0 === t && (t = new o),
                this.getPoint(Math.random(), t)
            },
            getSpacedPoints: function(t, e, i) {
                void 0 === i && (i = []),
                t = t || (e ? this.getLength() / e : this.defaultDivisions);
                for (var n = 0; n <= t; n++) {
                    var s = this.getUtoTmapping(n / t, null, t);
                    i.push(this.getPoint(s))
                }
                return i
            },
            getStartPoint: function(t) {
                return void 0 === t && (t = new o),
                this.getPointAt(0, t)
            },
            getTangent: function(t, e) {
                void 0 === e && (e = new o);
                var i = t - 1e-4
                  , n = t + 1e-4;
                return i < 0 && (i = 0),
                1 < n && (n = 1),
                this.getPoint(i, this._tmpVec2A),
                this.getPoint(n, e),
                e.subtract(this._tmpVec2A).normalize()
            },
            getTangentAt: function(t, e) {
                var i = this.getUtoTmapping(t);
                return this.getTangent(i, e)
            },
            getTFromDistance: function(t, e) {
                return t <= 0 ? 0 : this.getUtoTmapping(0, t, e)
            },
            getUtoTmapping: function(t, e, i) {
                for (var n, s = this.getLengths(i), r = 0, o = s.length, a = e ? Math.min(e, s[o - 1]) : t * s[o - 1], h = 0, l = o - 1; h <= l; )
                    if ((n = s[r = Math.floor(h + (l - h) / 2)] - a) < 0)
                        h = r + 1;
                    else {
                        if (!(0 < n)) {
                            l = r;
                            break
                        }
                        l = r - 1
                    }
                if (s[r = l] === a)
                    return r / (o - 1);
                var u = s[r];
                return (r + (a - u) / (s[r + 1] - u)) / (o - 1)
            },
            updateArcLengths: function() {
                this.needsUpdate = !0,
                this.getLengths()
            }
        });
        t.exports = a
    }
    , function(t, e, i) {
        t.exports = {
            ADD: i(968),
            COMPLETE: i(969),
            FILE_COMPLETE: i(970),
            FILE_KEY_COMPLETE: i(971),
            FILE_LOAD_ERROR: i(972),
            FILE_LOAD: i(973),
            FILE_PROGRESS: i(974),
            POST_PROCESS: i(975),
            PROGRESS: i(976),
            START: i(977)
        }
    }
    , function(t, e, i) {
        var f = i(4);
        t.exports = function(t, e, i) {
            void 0 === i && (i = new f);
            var n = t.x1
              , s = t.y1
              , r = t.x2
              , o = t.y2
              , a = e.x1
              , h = e.y1
              , l = e.x2
              , u = e.y2
              , c = (u - h) * (r - n) - (l - a) * (o - s);
            if (0 == c)
                return !1;
            var d = ((l - a) * (s - h) - (u - h) * (n - a)) / c
              , p = ((r - n) * (s - h) - (o - s) * (n - a)) / c;
            return 0 <= d && d <= 1 && 0 <= p && p <= 1 && (i.x = n + d * (r - n),
            i.y = s + d * (o - s),
            !0)
        }
    }
    , function(t, e) {
        t.exports = function(t) {
            return Math.atan2(t.y2 - t.y1, t.x2 - t.x1)
        }
    }
    , function(t, e, i) {
        var n = i(18);
        t.exports = function(t, e, i) {
            return (i - e) * (t = n(t, 0, 1)) + e
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            return t && t.hasOwnProperty(e) ? t[e] : i
        }
    }
    , function(t, e) {
        t.exports = {
            CREATED: 0,
            INIT: 1,
            DELAY: 2,
            OFFSET_DELAY: 3,
            PENDING_RENDER: 4,
            PLAYING_FORWARD: 5,
            PLAYING_BACKWARD: 6,
            HOLD_DELAY: 7,
            REPEAT_DELAY: 8,
            COMPLETE: 9,
            PENDING_ADD: 20,
            PAUSED: 21,
            LOOP_DELAY: 22,
            ACTIVE: 23,
            COMPLETE_DELAY: 24,
            PENDING_REMOVE: 25,
            REMOVED: 26
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , a = i(315)
          , s = new n({
            initialize: function(t, e) {
                this.parent = t,
                (this.events = e) || (this.events = t.events ? t.events : t),
                this.list = {},
                this.values = {},
                this._frozen = !1,
                !t.hasOwnProperty("sys") && this.events && this.events.once(a.DESTROY, this.destroy, this)
            },
            get: function(t) {
                var e = this.list;
                if (Array.isArray(t)) {
                    for (var i = [], n = 0; n < t.length; n++)
                        i.push(e[t[n]]);
                    return i
                }
                return e[t]
            },
            getAll: function() {
                var t = {};
                for (var e in this.list)
                    this.list.hasOwnProperty(e) && (t[e] = this.list[e]);
                return t
            },
            query: function(t) {
                var e = {};
                for (var i in this.list)
                    this.list.hasOwnProperty(i) && i.match(t) && (e[i] = this.list[i]);
                return e
            },
            set: function(t, e) {
                if (this._frozen)
                    return this;
                if ("string" == typeof t)
                    return this.setValue(t, e);
                for (var i in t)
                    this.setValue(i, t[i]);
                return this
            },
            inc: function(t, e) {
                if (this._frozen)
                    return this;
                void 0 === e && (e = 1);
                var i = this.get(t);
                return void 0 === i && (i = 0),
                this.set(t, i + e),
                this
            },
            toggle: function(t) {
                return this._frozen || this.set(t, !this.get(t)),
                this
            },
            setValue: function(i, t) {
                return this._frozen || (this.has(i) ? this.values[i] = t : (s = (n = this).list,
                r = this.events,
                o = this.parent,
                Object.defineProperty(this.values, i, {
                    enumerable: !0,
                    configurable: !0,
                    get: function() {
                        return s[i]
                    },
                    set: function(t) {
                        var e;
                        n._frozen || (e = s[i],
                        s[i] = t,
                        r.emit(a.CHANGE_DATA, o, i, t, e),
                        r.emit(a.CHANGE_DATA_KEY + i, o, t, e))
                    }
                }),
                s[i] = t,
                r.emit(a.SET_DATA, o, i, t))),
                this;
                var n, s, r, o
            },
            each: function(t, e) {
                for (var i = [this.parent, null, void 0], n = 1; n < arguments.length; n++)
                    i.push(arguments[n]);
                for (var s in this.list)
                    i[1] = s,
                    i[2] = this.list[s],
                    t.apply(e, i);
                return this
            },
            merge: function(t, e) {
                for (var i in void 0 === e && (e = !0),
                t)
                    t.hasOwnProperty(i) && (e || !e && !this.has(i)) && this.setValue(i, t[i]);
                return this
            },
            remove: function(t) {
                if (this._frozen)
                    return this;
                if (!Array.isArray(t))
                    return this.removeValue(t);
                for (var e = 0; e < t.length; e++)
                    this.removeValue(t[e]);
                return this
            },
            removeValue: function(t) {
                var e;
                return this.has(t) && (e = this.list[t],
                delete this.list[t],
                delete this.values[t],
                this.events.emit(a.REMOVE_DATA, this.parent, t, e)),
                this
            },
            pop: function(t) {
                var e = void 0;
                return !this._frozen && this.has(t) && (e = this.list[t],
                delete this.list[t],
                delete this.values[t],
                this.events.emit(a.REMOVE_DATA, this.parent, t, e)),
                e
            },
            has: function(t) {
                return this.list.hasOwnProperty(t)
            },
            setFreeze: function(t) {
                return this._frozen = t,
                this
            },
            reset: function() {
                for (var t in this.list)
                    delete this.list[t],
                    delete this.values[t];
                return this._frozen = !1,
                this
            },
            destroy: function() {
                this.reset(),
                this.events.off(a.CHANGE_DATA),
                this.events.off(a.SET_DATA),
                this.events.off(a.REMOVE_DATA),
                this.parent = null
            },
            freeze: {
                get: function() {
                    return this._frozen
                },
                set: function(t) {
                    this._frozen = !!t
                }
            },
            count: {
                get: function() {
                    var t = 0;
                    for (var e in this.list)
                        void 0 !== this.list[e] && t++;
                    return t
                }
            }
        });
        t.exports = s
    }
    , function(t, e, i) {
        var n = new (i(0))({
            initialize: function(t) {
                if (this.entries = {},
                this.size = 0,
                Array.isArray(t))
                    for (var e = 0; e < t.length; e++)
                        this.set(t[e][0], t[e][1])
            },
            set: function(t, e) {
                return this.has(t) || this.size++,
                this.entries[t] = e,
                this
            },
            get: function(t) {
                if (this.has(t))
                    return this.entries[t]
            },
            getArray: function() {
                var t = []
                  , e = this.entries;
                for (var i in e)
                    t.push(e[i]);
                return t
            },
            has: function(t) {
                return this.entries.hasOwnProperty(t)
            },
            delete: function(t) {
                return this.has(t) && (delete this.entries[t],
                this.size--),
                this
            },
            clear: function() {
                return Object.keys(this.entries).forEach(function(t) {
                    delete this.entries[t]
                }, this),
                this.size = 0,
                this
            },
            keys: function() {
                return Object.keys(this.entries)
            },
            values: function() {
                var t = []
                  , e = this.entries;
                for (var i in e)
                    t.push(e[i]);
                return t
            },
            dump: function() {
                var t = this.entries;
                for (var e in console.group("Map"),
                t)
                    console.log(e, t[e]);
                console.groupEnd()
            },
            each: function(t) {
                var e = this.entries;
                for (var i in e)
                    if (!1 === t(i, e[i]))
                        break;
                return this
            },
            contains: function(t) {
                var e = this.entries;
                for (var i in e)
                    if (e[i] === t)
                        return !0;
                return !1
            },
            merge: function(t, e) {
                void 0 === e && (e = !1);
                var i = this.entries
                  , n = t.entries;
                for (var s in n)
                    i.hasOwnProperty(s) && e ? i[s] = n[s] : this.set(s, n[s]);
                return this
            }
        });
        t.exports = n
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            return t << 16 | e << 8 | i
        }
    }
    , function(t, e, i) {
        t.exports = {
            ENTER_FULLSCREEN: i(800),
            FULLSCREEN_FAILED: i(801),
            FULLSCREEN_UNSUPPORTED: i(802),
            LEAVE_FULLSCREEN: i(803),
            ORIENTATION_CHANGE: i(804),
            RESIZE: i(805)
        }
    }
    , function(t, e, i) {
        (function(i) {
            var n = {
                android: !1,
                chromeOS: !1,
                cordova: !1,
                crosswalk: !1,
                desktop: !1,
                ejecta: !1,
                electron: !1,
                iOS: !1,
                iOSVersion: 0,
                iPad: !1,
                iPhone: !1,
                kindle: !1,
                linux: !1,
                macOS: !1,
                node: !1,
                nodeWebkit: !1,
                pixelRatio: 1,
                webApp: !1,
                windows: !1,
                windowsPhone: !1
            };
            t.exports = function() {
                if ("function" == typeof importScripts)
                    return n;
                var t = navigator.userAgent;
                /Windows/.test(t) ? n.windows = !0 : /Mac OS/.test(t) && !/like Mac OS/.test(t) ? navigator.maxTouchPoints && 2 < navigator.maxTouchPoints ? (n.iOS = !0,
                n.iPad = !0,
                navigator.appVersion.match(/Version\/(\d+)/),
                n.iOSVersion = parseInt(RegExp.$1, 10)) : n.macOS = !0 : /Android/.test(t) ? n.android = !0 : /Linux/.test(t) ? n.linux = !0 : /iP[ao]d|iPhone/i.test(t) ? (n.iOS = !0,
                navigator.appVersion.match(/OS (\d+)/),
                n.iOSVersion = parseInt(RegExp.$1, 10),
                n.iPhone = -1 !== t.toLowerCase().indexOf("iphone"),
                n.iPad = -1 !== t.toLowerCase().indexOf("ipad")) : /Kindle/.test(t) || /\bKF[A-Z][A-Z]+/.test(t) || /Silk.*Mobile Safari/.test(t) ? n.kindle = !0 : /CrOS/.test(t) && (n.chromeOS = !0),
                (/Windows Phone/i.test(t) || /IEMobile/i.test(t)) && (n.android = !1,
                n.iOS = !1,
                n.macOS = !1,
                n.windows = !0,
                n.windowsPhone = !0);
                var e = /Silk/.test(t);
                return (n.windows || n.macOS || n.linux && !e || n.chromeOS) && (n.desktop = !0),
                (n.windowsPhone || /Windows NT/i.test(t) && /Touch/i.test(t)) && (n.desktop = !1),
                navigator.standalone && (n.webApp = !0),
                "function" != typeof importScripts && (void 0 !== window.cordova && (n.cordova = !0),
                void 0 !== window.ejecta && (n.ejecta = !0)),
                void 0 !== i && i.versions && i.versions.node && (n.node = !0),
                n.node && "object" == typeof i.versions && (n.nodeWebkit = !!i.versions["node-webkit"],
                n.electron = !!i.versions.electron),
                /Crosswalk/.test(t) && (n.crosswalk = !0),
                n.pixelRatio = window.devicePixelRatio || 1,
                n
            }()
        }
        ).call(this, i(807))
    }
    , function(t, e, i) {
        t.exports = {
            ADD: i(861),
            ERROR: i(862),
            LOAD: i(863),
            READY: i(864),
            REMOVE: i(865)
        }
    }
    , function(t, e) {
        t.exports = {
            BYTE: {
                enum: 5120,
                size: 1
            },
            UNSIGNED_BYTE: {
                enum: 5121,
                size: 1
            },
            SHORT: {
                enum: 5122,
                size: 2
            },
            UNSIGNED_SHORT: {
                enum: 5123,
                size: 2
            },
            INT: {
                enum: 5124,
                size: 4
            },
            UNSIGNED_INT: {
                enum: 5125,
                size: 4
            },
            FLOAT: {
                enum: 5126,
                size: 4
            }
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , M = i(59)
          , s = i(2)
          , r = i(878)
          , o = i(879)
          , a = i(25)
          , z = i(12)
          , h = i(107)
          , l = i(58)
          , u = new n({
            Extends: l,
            initialize: function(t) {
                var e = t.game.renderer
                  , i = s(t, "fragShader", r);
                t.fragShader = z.parseFragmentShaderMaxTextures(i, e.maxTextures),
                t.vertShader = s(t, "vertShader", o),
                t.attributes = s(t, "attributes", [{
                    name: "inPosition",
                    size: 2
                }, {
                    name: "inTexCoord",
                    size: 2
                }, {
                    name: "inTexId"
                }, {
                    name: "inTintEffect"
                }, {
                    name: "inTint",
                    size: 4,
                    type: h.UNSIGNED_BYTE,
                    normalized: !0
                }]),
                l.call(this, t),
                this._tempMatrix1 = new a,
                this._tempMatrix2 = new a,
                this._tempMatrix3 = new a,
                this.calcMatrix = new a,
                this.tempTriangle = [{
                    x: 0,
                    y: 0,
                    width: 0
                }, {
                    x: 0,
                    y: 0,
                    width: 0
                }, {
                    x: 0,
                    y: 0,
                    width: 0
                }, {
                    x: 0,
                    y: 0,
                    width: 0
                }],
                this.strokeTint = {
                    TL: 0,
                    TR: 0,
                    BL: 0,
                    BR: 0
                },
                this.fillTint = {
                    TL: 0,
                    TR: 0,
                    BL: 0,
                    BR: 0
                },
                this.currentFrame = {
                    u0: 0,
                    v0: 0,
                    u1: 1,
                    v1: 1
                },
                this.firstQuad = [0, 0, 0, 0, 0],
                this.prevQuad = [0, 0, 0, 0, 0],
                this.polygonCache = []
            },
            boot: function() {
                l.prototype.boot.call(this),
                this.currentShader.set1iv("uMainSampler", this.renderer.textureIndexes)
            },
            batchSprite: function(t, e, i) {
                this.manager.set(this, t);
                var n, s = this._tempMatrix1, r = this._tempMatrix2, o = this._tempMatrix3, a = t.frame, h = a.glTexture, l = a.u0, u = a.v0, c = a.u1, d = a.v1, p = a.x, f = a.y, g = a.cutWidth, v = a.cutHeight, y = a.customPivot, m = t.displayOriginX, x = t.displayOriginY, w = -m + p, b = -x + f;
                t.isCropped && ((n = t._crop).flipX === t.flipX && n.flipY === t.flipY || a.updateCropUVs(n, t.flipX, t.flipY),
                l = n.u0,
                u = n.v0,
                c = n.u1,
                d = n.v1,
                g = n.width,
                v = n.height,
                w = -m + n.x,
                b = -x + n.y);
                var T = 1
                  , S = 1;
                t.flipX && (y || (w += -a.realWidth + 2 * m),
                T = -1),
                (t.flipY || a.source.isGLTexture && !h.flipY) && (y || (b += -a.realHeight + 2 * x),
                S = -1),
                r.applyITRS(t.x, t.y, t.rotation, t.scaleX * T, t.scaleY * S),
                s.copyFrom(e.matrix),
                i ? (s.multiplyWithOffset(i, -e.scrollX * t.scrollFactorX, -e.scrollY * t.scrollFactorY),
                r.e = t.x,
                r.f = t.y) : (r.e -= e.scrollX * t.scrollFactorX,
                r.f -= e.scrollY * t.scrollFactorY),
                s.multiply(r, o);
                var _ = w + g
                  , E = b + v
                  , P = e.roundPixels
                  , A = o.getXRound(w, b, P)
                  , M = o.getYRound(w, b, P)
                  , C = o.getXRound(w, E, P)
                  , O = o.getYRound(w, E, P)
                  , k = o.getXRound(_, E, P)
                  , R = o.getYRound(_, E, P)
                  , L = o.getXRound(_, b, P)
                  , I = o.getYRound(_, b, P)
                  , D = z.getTintAppendFloatAlpha
                  , F = e.alpha
                  , B = D(t.tintTopLeft, F * t._alphaTL)
                  , N = D(t.tintTopRight, F * t._alphaTR)
                  , U = D(t.tintBottomLeft, F * t._alphaBL)
                  , Y = D(t.tintBottomRight, F * t._alphaBR);
                this.shouldFlush(6) && this.flush();
                var X = this.setGameObject(t, a);
                this.manager.preBatch(t),
                this.batchQuad(t, A, M, C, O, k, R, L, I, l, u, c, d, B, N, U, Y, t.tintFill, h, X),
                this.manager.postBatch(t)
            },
            batchTexture: function(t, e, i, n, s, r, o, a, h, l, u, c, d, p, f, g, v, y, m, x, w, b, T, S, _, E, P, A, M, C, O, k) {
                this.manager.set(this, t);
                var R, L, I, D, F, B = this._tempMatrix1, N = this._tempMatrix2, U = this._tempMatrix3, Y = y / i + P, X = m / n + A, z = (y + x) / i + P, G = (m + w) / n + A, V = o, W = a, H = -g, j = -v;
                t.isCropped && (o = V = L = (R = t._crop).width,
                a = W = I = R.height,
                D = y = R.x,
                F = m = R.y,
                c && (D = x - R.x - L),
                d && (F = w - R.y - I),
                Y = D / i + P,
                X = F / n + A,
                z = (D + L) / i + P,
                G = (F + I) / n + A,
                H = -g + y,
                j = -v + m),
                c && (V *= -1,
                H += o),
                (d ^= !O && e.isRenderTexture ? 1 : 0) && (W *= -1,
                j += a);
                var q = H + V
                  , K = j + W;
                N.applyITRS(s, r, u, h, l),
                B.copyFrom(M.matrix),
                C ? (B.multiplyWithOffset(C, -M.scrollX * p, -M.scrollY * f),
                N.e = s,
                N.f = r) : (N.e -= M.scrollX * p,
                N.f -= M.scrollY * f),
                B.multiply(N, U);
                var Z = M.roundPixels
                  , J = U.getXRound(H, j, Z)
                  , Q = U.getYRound(H, j, Z)
                  , $ = U.getXRound(H, K, Z)
                  , tt = U.getYRound(H, K, Z)
                  , et = U.getXRound(q, K, Z)
                  , it = U.getYRound(q, K, Z)
                  , nt = U.getXRound(q, j, Z)
                  , st = U.getYRound(q, j, Z);
                void 0 === k && (k = this.renderer.setTexture2D(e)),
                t && this.manager.preBatch(t),
                this.batchQuad(t, J, Q, $, tt, et, it, nt, st, Y, X, z, G, b, T, S, _, E, e, k),
                t && this.manager.postBatch(t)
            },
            batchTextureFrame: function(t, e, i, n, s, r, o) {
                this.manager.set(this);
                var a = this._tempMatrix1.copyFrom(r)
                  , h = this._tempMatrix2
                  , l = e + t.width
                  , u = i + t.height;
                o ? a.multiply(o, h) : h = a;
                var c = h.getX(e, i)
                  , d = h.getY(e, i)
                  , p = h.getX(e, u)
                  , f = h.getY(e, u)
                  , g = h.getX(l, u)
                  , v = h.getY(l, u)
                  , y = h.getX(l, i)
                  , m = h.getY(l, i)
                  , x = this.renderer.setTextureSource(t.source);
                n = z.getTintAppendFloatAlpha(n, s),
                this.batchQuad(null, c, d, p, f, g, v, y, m, t.u0, t.v0, t.u1, t.v1, n, n, n, n, 0, t.glTexture, x)
            },
            batchFillRect: function(t, e, i, n, s, r) {
                this.renderer.pipelines.set(this);
                var o = this.calcMatrix;
                r && r.multiply(s, o);
                var a = t + i
                  , h = e + n
                  , l = o.getX(t, e)
                  , u = o.getY(t, e)
                  , c = o.getX(t, h)
                  , d = o.getY(t, h)
                  , p = o.getX(a, h)
                  , f = o.getY(a, h)
                  , g = o.getX(a, e)
                  , v = o.getY(a, e)
                  , y = this.fillTint;
                this.batchQuad(null, l, u, c, d, p, f, g, v, 0, 0, 1, 1, y.TL, y.TR, y.BL, y.BR, 2)
            },
            batchFillTriangle: function(t, e, i, n, s, r, o, a) {
                this.renderer.pipelines.set(this);
                var h = this.calcMatrix;
                a && a.multiply(o, h);
                var l = h.getX(t, e)
                  , u = h.getY(t, e)
                  , c = h.getX(i, n)
                  , d = h.getY(i, n)
                  , p = h.getX(s, r)
                  , f = h.getY(s, r)
                  , g = this.fillTint;
                this.batchTri(null, l, u, c, d, p, f, 0, 0, 1, 1, g.TL, g.TR, g.BL, 2)
            },
            batchStrokeTriangle: function(t, e, i, n, s, r, o, a, h) {
                var l = this.tempTriangle;
                l[0].x = t,
                l[0].y = e,
                l[0].width = o,
                l[1].x = i,
                l[1].y = n,
                l[1].width = o,
                l[2].x = s,
                l[2].y = r,
                l[2].width = o,
                l[3].x = t,
                l[3].y = e,
                l[3].width = o,
                this.batchStrokePath(l, o, !1, a, h)
            },
            batchFillPath: function(t, e, i) {
                this.renderer.pipelines.set(this);
                var n = this.calcMatrix;
                i && i.multiply(e, n);
                for (var s, r, o = t.length, a = this.polygonCache, h = this.fillTint.TL, l = this.fillTint.TR, u = this.fillTint.BL, c = 0; c < o; ++c)
                    r = t[c],
                    a.push(r.x, r.y);
                o = (s = M(a)).length;
                for (var d = 0; d < o; d += 3) {
                    var p = 2 * s[d + 0]
                      , f = 2 * s[d + 1]
                      , g = 2 * s[d + 2]
                      , v = a[0 + p]
                      , y = a[1 + p]
                      , m = a[0 + f]
                      , x = a[1 + f]
                      , w = a[0 + g]
                      , b = a[1 + g]
                      , T = n.getX(v, y)
                      , S = n.getY(v, y)
                      , _ = n.getX(m, x)
                      , E = n.getY(m, x)
                      , P = n.getX(w, b)
                      , A = n.getY(w, b);
                    this.batchTri(null, T, S, _, E, P, A, 0, 0, 1, 1, h, l, u, 2)
                }
                a.length = 0
            },
            batchStrokePath: function(t, e, i, n, s) {
                this.renderer.pipelines.set(this),
                this.prevQuad[4] = 0,
                this.firstQuad[4] = 0;
                for (var r = t.length - 1, o = 0; o < r; o++) {
                    var a = t[o]
                      , h = t[o + 1];
                    this.batchLine(a.x, a.y, h.x, h.y, a.width / 2, h.width / 2, e, o, !i && o === r - 1, n, s)
                }
            },
            batchLine: function(t, e, i, n, s, r, o, a, h, l, u) {
                this.renderer.pipelines.set(this);
                var c = this.calcMatrix;
                u && u.multiply(l, c);
                var d, p, f = i - t, g = n - e, v = Math.sqrt(f * f + g * g), y = s * (n - e) / v, m = s * (t - i) / v, x = r * (n - e) / v, w = r * (t - i) / v, b = i - x, T = n - w, S = t - y, _ = e - m, E = i + x, P = n + w, A = t + y, M = e + m, C = c.getX(b, T), O = c.getY(b, T), k = c.getX(S, _), R = c.getY(S, _), L = c.getX(E, P), I = c.getY(E, P), D = c.getX(A, M), F = c.getY(A, M), B = this.strokeTint, N = B.TL, U = B.TR, Y = B.BL, X = B.BR;
                this.batchQuad(null, D, F, k, R, C, O, L, I, 0, 0, 1, 1, N, U, Y, X, 2),
                o <= 2 || (d = this.prevQuad,
                p = this.firstQuad,
                0 < a && d[4] ? this.batchQuad(null, D, F, k, R, d[0], d[1], d[2], d[3], 0, 0, 1, 1, N, U, Y, X, 2) : (p[0] = D,
                p[1] = F,
                p[2] = k,
                p[3] = R,
                p[4] = 1),
                h && p[4] ? this.batchQuad(null, C, O, L, I, p[0], p[1], p[2], p[3], 0, 0, 1, 1, N, U, Y, X, 2) : (d[0] = C,
                d[1] = O,
                d[2] = L,
                d[3] = I,
                d[4] = 1))
            }
        });
        t.exports = u
    }
    , function(t, e, i) {
        var n = i(0)
          , A = i(18)
          , s = i(17)
          , r = new n({
            initialize: function(t, e, i, n, s, r, o) {
                this.texture = t,
                this.name = e,
                this.source = t.source[i],
                this.sourceIndex = i,
                this.glTexture = this.source.glTexture,
                this.cutX,
                this.cutY,
                this.cutWidth,
                this.cutHeight,
                this.x = 0,
                this.y = 0,
                this.width,
                this.height,
                this.halfWidth,
                this.halfHeight,
                this.centerX,
                this.centerY,
                this.pivotX = 0,
                this.pivotY = 0,
                this.customPivot = !1,
                this.rotated = !1,
                this.autoRound = -1,
                this.customData = {},
                this.u0 = 0,
                this.v0 = 0,
                this.u1 = 0,
                this.v1 = 0,
                this.data = {
                    cut: {
                        x: 0,
                        y: 0,
                        w: 0,
                        h: 0,
                        r: 0,
                        b: 0
                    },
                    trim: !1,
                    sourceSize: {
                        w: 0,
                        h: 0
                    },
                    spriteSourceSize: {
                        x: 0,
                        y: 0,
                        w: 0,
                        h: 0,
                        r: 0,
                        b: 0
                    },
                    radius: 0,
                    drawImage: {
                        x: 0,
                        y: 0,
                        width: 0,
                        height: 0
                    }
                },
                this.setSize(r, o, n, s)
            },
            setSize: function(t, e, i, n) {
                void 0 === i && (i = 0),
                void 0 === n && (n = 0),
                this.cutX = i,
                this.cutY = n,
                this.cutWidth = t,
                this.cutHeight = e,
                this.width = t,
                this.height = e,
                this.halfWidth = Math.floor(.5 * t),
                this.halfHeight = Math.floor(.5 * e),
                this.centerX = Math.floor(t / 2),
                this.centerY = Math.floor(e / 2);
                var s = this.data
                  , r = s.cut;
                r.x = i,
                r.y = n,
                r.w = t,
                r.h = e,
                r.r = i + t,
                r.b = n + e,
                s.sourceSize.w = t,
                s.sourceSize.h = e,
                s.spriteSourceSize.w = t,
                s.spriteSourceSize.h = e,
                s.radius = .5 * Math.sqrt(t * t + e * e);
                var o = s.drawImage;
                return o.x = i,
                o.y = n,
                o.width = t,
                o.height = e,
                this.updateUVs()
            },
            setTrim: function(t, e, i, n, s, r) {
                var o = this.data
                  , a = o.spriteSourceSize;
                return o.trim = !0,
                o.sourceSize.w = t,
                o.sourceSize.h = e,
                a.x = i,
                a.y = n,
                a.w = s,
                a.h = r,
                a.r = i + s,
                a.b = n + r,
                this.x = i,
                this.y = n,
                this.width = s,
                this.height = r,
                this.halfWidth = .5 * s,
                this.halfHeight = .5 * r,
                this.centerX = Math.floor(s / 2),
                this.centerY = Math.floor(r / 2),
                this.updateUVs()
            },
            setCropUVs: function(t, e, i, n, s, r, o) {
                var a, h, l, u, c, d, p, f = this.cutX, g = this.cutY, v = this.cutWidth, y = this.cutHeight, m = this.realWidth, x = this.realHeight, w = f + (e = A(e, 0, m)), b = g + (i = A(i, 0, x)), T = n = A(n, 0, m - e), S = s = A(s, 0, x - i), _ = this.data;
                _.trim ? (a = _.spriteSourceSize,
                h = e + (n = A(n, 0, v - e)),
                l = i + (s = A(s, 0, y - i)),
                a.r < e || a.b < i || a.x > h || a.y > l ? S = T = b = w = 0 : (u = Math.max(a.x, e),
                c = Math.max(a.y, i),
                T = d = Math.min(a.r, h) - u,
                S = p = Math.min(a.b, l) - c,
                w = r ? f + (v - (u - a.x) - d) : f + (u - a.x),
                b = o ? g + (y - (c - a.y) - p) : g + (c - a.y),
                e = u,
                i = c,
                n = d,
                s = p)) : (r && (w = f + (v - e - n)),
                o && (b = g + (y - i - s)));
                var E = this.source.width
                  , P = this.source.height;
                return t.u0 = Math.max(0, w / E),
                t.v0 = Math.max(0, b / P),
                t.u1 = Math.min(1, (w + T) / E),
                t.v1 = Math.min(1, (b + S) / P),
                t.x = e,
                t.y = i,
                t.cx = w,
                t.cy = b,
                t.cw = T,
                t.ch = S,
                t.width = n,
                t.height = s,
                t.flipX = r,
                t.flipY = o,
                t
            },
            updateCropUVs: function(t, e, i) {
                return this.setCropUVs(t, t.x, t.y, t.width, t.height, e, i)
            },
            setUVs: function(t, e, i, n, s, r) {
                var o = this.data.drawImage;
                return o.width = t,
                o.height = e,
                this.u0 = i,
                this.v0 = n,
                this.u1 = s,
                this.v1 = r,
                this
            },
            updateUVs: function() {
                var t = this.cutX
                  , e = this.cutY
                  , i = this.cutWidth
                  , n = this.cutHeight
                  , s = this.data.drawImage;
                s.width = i,
                s.height = n;
                var r = this.source.width
                  , o = this.source.height;
                return this.u0 = t / r,
                this.v0 = e / o,
                this.u1 = (t + i) / r,
                this.v1 = (e + n) / o,
                this
            },
            updateUVsInverted: function() {
                var t = this.source.width
                  , e = this.source.height;
                return this.u0 = (this.cutX + this.cutHeight) / t,
                this.v0 = this.cutY / e,
                this.u1 = this.cutX / t,
                this.v1 = (this.cutY + this.cutWidth) / e,
                this
            },
            clone: function() {
                var t = new r(this.texture,this.name,this.sourceIndex);
                return t.cutX = this.cutX,
                t.cutY = this.cutY,
                t.cutWidth = this.cutWidth,
                t.cutHeight = this.cutHeight,
                t.x = this.x,
                t.y = this.y,
                t.width = this.width,
                t.height = this.height,
                t.halfWidth = this.halfWidth,
                t.halfHeight = this.halfHeight,
                t.centerX = this.centerX,
                t.centerY = this.centerY,
                t.rotated = this.rotated,
                t.data = s(!0, t.data, this.data),
                t.updateUVs(),
                t
            },
            destroy: function() {
                this.source = null,
                this.texture = null,
                this.glTexture = null,
                this.customData = null,
                this.data = null
            },
            realWidth: {
                get: function() {
                    return this.data.sourceSize.w
                }
            },
            realHeight: {
                get: function() {
                    return this.data.sourceSize.h
                }
            },
            radius: {
                get: function() {
                    return this.data.radius
                }
            },
            trimmed: {
                get: function() {
                    return this.data.trim
                }
            },
            canvasData: {
                get: function() {
                    return this.data.drawImage
                }
            }
        });
        t.exports = r
    }
    , function(t, e, i) {
        var s = i(208)
          , n = i(0)
          , r = i(1)
          , o = i(79)
          , a = new n({
            initialize: function(t) {
                this.parent = t,
                this.list = [],
                this.position = 0,
                this.addCallback = r,
                this.removeCallback = r,
                this._sortKey = ""
            },
            add: function(t, e) {
                return e ? s.Add(this.list, t) : s.Add(this.list, t, 0, this.addCallback, this)
            },
            addAt: function(t, e, i) {
                return i ? s.AddAt(this.list, t, e) : s.AddAt(this.list, t, e, 0, this.addCallback, this)
            },
            getAt: function(t) {
                return this.list[t]
            },
            getIndex: function(t) {
                return this.list.indexOf(t)
            },
            sort: function(i, t) {
                return i && (void 0 === t && (t = function(t, e) {
                    return t[i] - e[i]
                }
                ),
                o(this.list, t)),
                this
            },
            getByName: function(t) {
                return s.GetFirst(this.list, "name", t)
            },
            getRandom: function(t, e) {
                return s.GetRandom(this.list, t, e)
            },
            getFirst: function(t, e, i, n) {
                return s.GetFirst(this.list, t, e, i, n)
            },
            getAll: function(t, e, i, n) {
                return s.GetAll(this.list, t, e, i, n)
            },
            count: function(t, e) {
                return s.CountAllMatching(this.list, t, e)
            },
            swap: function(t, e) {
                s.Swap(this.list, t, e)
            },
            moveTo: function(t, e) {
                return s.MoveTo(this.list, t, e)
            },
            moveAbove: function(t, e) {
                return s.MoveAbove(this.list, t, e)
            },
            moveBelow: function(t, e) {
                return s.MoveBelow(this.list, t, e)
            },
            remove: function(t, e) {
                return e ? s.Remove(this.list, t) : s.Remove(this.list, t, this.removeCallback, this)
            },
            removeAt: function(t, e) {
                return e ? s.RemoveAt(this.list, t) : s.RemoveAt(this.list, t, this.removeCallback, this)
            },
            removeBetween: function(t, e, i) {
                return i ? s.RemoveBetween(this.list, t, e) : s.RemoveBetween(this.list, t, e, this.removeCallback, this)
            },
            removeAll: function(t) {
                for (var e = this.list.length; e--; )
                    this.remove(this.list[e], t);
                return this
            },
            bringToTop: function(t) {
                return s.BringToTop(this.list, t)
            },
            sendToBack: function(t) {
                return s.SendToBack(this.list, t)
            },
            moveUp: function(t) {
                return s.MoveUp(this.list, t),
                t
            },
            moveDown: function(t) {
                return s.MoveDown(this.list, t),
                t
            },
            reverse: function() {
                return this.list.reverse(),
                this
            },
            shuffle: function() {
                return s.Shuffle(this.list),
                this
            },
            replace: function(t, e) {
                return s.Replace(this.list, t, e)
            },
            exists: function(t) {
                return -1 < this.list.indexOf(t)
            },
            setAll: function(t, e, i, n) {
                return s.SetAll(this.list, t, e, i, n),
                this
            },
            each: function(t, e) {
                for (var i = [null], n = 2; n < arguments.length; n++)
                    i.push(arguments[n]);
                for (n = 0; n < this.list.length; n++)
                    i[0] = this.list[n],
                    t.apply(e, i)
            },
            shutdown: function() {
                this.removeAll(),
                this.list = []
            },
            destroy: function() {
                this.removeAll(),
                this.parent = null,
                this.addCallback = null,
                this.removeCallback = null
            },
            length: {
                get: function() {
                    return this.list.length
                }
            },
            first: {
                get: function() {
                    return (this.position = 0) < this.list.length ? this.list[0] : null
                }
            },
            last: {
                get: function() {
                    return 0 < this.list.length ? (this.position = this.list.length - 1,
                    this.list[this.position]) : null
                }
            },
            next: {
                get: function() {
                    return this.position < this.list.length ? (this.position++,
                    this.list[this.position]) : null
                }
            },
            previous: {
                get: function() {
                    return 0 < this.position ? (this.position--,
                    this.list[this.position]) : null
                }
            }
        });
        t.exports = a
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(112)
          , r = i(445)
          , o = i(446)
          , a = i(56)
          , h = i(180)
          , l = new n({
            initialize: function(t, e, i, n) {
                void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                void 0 === n && (n = 0),
                this.type = a.ELLIPSE,
                this.x = t,
                this.y = e,
                this.width = i,
                this.height = n
            },
            contains: function(t, e) {
                return s(this, t, e)
            },
            getPoint: function(t, e) {
                return r(this, t, e)
            },
            getPoints: function(t, e, i) {
                return o(this, t, e, i)
            },
            getRandomPoint: function(t) {
                return h(this, t)
            },
            setTo: function(t, e, i, n) {
                return this.x = t,
                this.y = e,
                this.width = i,
                this.height = n,
                this
            },
            setEmpty: function() {
                return this.width = 0,
                this.height = 0,
                this
            },
            setPosition: function(t, e) {
                return void 0 === e && (e = t),
                this.x = t,
                this.y = e,
                this
            },
            setSize: function(t, e) {
                return void 0 === e && (e = t),
                this.width = t,
                this.height = e,
                this
            },
            isEmpty: function() {
                return this.width <= 0 || this.height <= 0
            },
            getMinorRadius: function() {
                return Math.min(this.width, this.height) / 2
            },
            getMajorRadius: function() {
                return Math.max(this.width, this.height) / 2
            },
            left: {
                get: function() {
                    return this.x - this.width / 2
                },
                set: function(t) {
                    this.x = t + this.width / 2
                }
            },
            right: {
                get: function() {
                    return this.x + this.width / 2
                },
                set: function(t) {
                    this.x = t - this.width / 2
                }
            },
            top: {
                get: function() {
                    return this.y - this.height / 2
                },
                set: function(t) {
                    this.y = t + this.height / 2
                }
            },
            bottom: {
                get: function() {
                    return this.y + this.height / 2
                },
                set: function(t) {
                    this.y = t - this.height / 2
                }
            }
        });
        t.exports = l
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            if (t.width <= 0 || t.height <= 0)
                return !1;
            var n = (e - t.x) / t.width
              , s = (i - t.y) / t.height;
            return (n *= n) + (s *= s) < .25
        }
    }
    , function(t, e, i) {
        var X = i(275)
          , n = i(0)
          , r = i(75)
          , s = i(9)
          , o = i(207)
          , z = i(2)
          , G = i(6)
          , a = i(7)
          , V = i(437)
          , h = i(149)
          , l = i(73)
          , u = new n({
            Extends: s,
            initialize: function(t, e, i) {
                s.call(this),
                i ? e && !Array.isArray(e) && (e = [e]) : Array.isArray(e) ? a(e[0]) && (i = e,
                e = null) : a(e) && (i = e,
                e = null),
                this.scene = t,
                this.children = new h,
                this.isParent = !0,
                this.type = "Group",
                this.classType = z(i, "classType", l),
                this.name = z(i, "name", ""),
                this.active = z(i, "active", !0),
                this.maxSize = z(i, "maxSize", -1),
                this.defaultKey = z(i, "defaultKey", null),
                this.defaultFrame = z(i, "defaultFrame", null),
                this.runChildUpdate = z(i, "runChildUpdate", !1),
                this.createCallback = z(i, "createCallback", null),
                this.removeCallback = z(i, "removeCallback", null),
                this.createMultipleCallback = z(i, "createMultipleCallback", null),
                this.internalCreateCallback = z(i, "internalCreateCallback", null),
                this.internalRemoveCallback = z(i, "internalRemoveCallback", null),
                e && this.addMultiple(e),
                i && this.createMultiple(i),
                this.on(r.ADDED_TO_SCENE, this.addedToScene, this),
                this.on(r.REMOVED_FROM_SCENE, this.removedFromScene, this)
            },
            addedToScene: function() {
                this.scene.sys.updateList.add(this)
            },
            removedFromScene: function() {
                this.scene.sys.updateList.remove(this)
            },
            create: function(t, e, i, n, s, r) {
                if (void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = this.defaultKey),
                void 0 === n && (n = this.defaultFrame),
                void 0 === s && (s = !0),
                void 0 === r && (r = !0),
                this.isFull())
                    return null;
                var o = new this.classType(this.scene,t,e,i,n);
                return o.addToDisplayList(this.scene.sys.displayList),
                o.addToUpdateList(),
                o.visible = s,
                o.setActive(r),
                this.add(o),
                o
            },
            createMultiple: function(t) {
                if (this.isFull())
                    return [];
                Array.isArray(t) || (t = [t]);
                var e = [];
                if (t[0].key)
                    for (var i = 0; i < t.length; i++) {
                        var n = this.createFromConfig(t[i]);
                        e = e.concat(n)
                    }
                return e
            },
            createFromConfig: function(t) {
                if (this.isFull())
                    return [];
                this.classType = z(t, "classType", this.classType);
                var e = z(t, "key", void 0)
                  , i = z(t, "frame", null)
                  , n = z(t, "visible", !0)
                  , s = z(t, "active", !0)
                  , r = [];
                if (void 0 === e)
                    return r;
                Array.isArray(e) || (e = [e]),
                Array.isArray(i) || (i = [i]);
                var o = z(t, "repeat", 0)
                  , a = z(t, "randomKey", !1)
                  , h = z(t, "randomFrame", !1)
                  , l = z(t, "yoyo", !1)
                  , u = z(t, "quantity", !1)
                  , c = z(t, "frameQuantity", 1)
                  , d = z(t, "max", 0)
                  , p = V(e, i, {
                    max: d,
                    qty: u || c,
                    random: a,
                    randomB: h,
                    repeat: o,
                    yoyo: l
                });
                t.createCallback && (this.createCallback = t.createCallback),
                t.removeCallback && (this.removeCallback = t.removeCallback);
                for (var f = 0; f < p.length; f++) {
                    var g = this.create(0, 0, p[f].a, p[f].b, n, s);
                    if (!g)
                        break;
                    r.push(g)
                }
                var v = G(t, "setXY.x", 0)
                  , y = G(t, "setXY.y", 0)
                  , m = G(t, "setXY.stepX", 0)
                  , x = G(t, "setXY.stepY", 0);
                X.SetXY(r, v, y, m, x);
                var w = G(t, "setRotation.value", 0)
                  , b = G(t, "setRotation.step", 0);
                X.SetRotation(r, w, b);
                var T = G(t, "setScale.x", 1)
                  , S = G(t, "setScale.y", T)
                  , _ = G(t, "setScale.stepX", 0)
                  , E = G(t, "setScale.stepY", 0);
                X.SetScale(r, T, S, _, E);
                var P = G(t, "setOrigin.x", .5)
                  , A = G(t, "setOrigin.y", P)
                  , M = G(t, "setOrigin.stepX", 0)
                  , C = G(t, "setOrigin.stepY", 0);
                X.SetOrigin(r, P, A, M, C);
                var O = G(t, "setAlpha.value", 1)
                  , k = G(t, "setAlpha.step", 0);
                X.SetAlpha(r, O, k);
                var R = G(t, "setDepth.value", 0)
                  , L = G(t, "setDepth.step", 0);
                X.SetDepth(r, R, L);
                var I = G(t, "setScrollFactor.x", 1)
                  , D = G(t, "setScrollFactor.y", I)
                  , F = G(t, "setScrollFactor.stepX", 0)
                  , B = G(t, "setScrollFactor.stepY", 0);
                X.SetScrollFactor(r, I, D, F, B);
                var N = z(t, "hitArea", null)
                  , U = z(t, "hitAreaCallback", null);
                N && X.SetHitArea(r, N, U);
                var Y = z(t, "gridAlign", !1);
                return Y && X.GridAlign(r, Y),
                this.createMultipleCallback && this.createMultipleCallback.call(this, r),
                r
            },
            preUpdate: function(t, e) {
                if (this.runChildUpdate && 0 !== this.children.size)
                    for (var i = this.children.entries.slice(), n = 0; n < i.length; n++) {
                        var s = i[n];
                        s.active && s.update(t, e)
                    }
            },
            add: function(t, e) {
                return void 0 === e && (e = !1),
                this.isFull() || (this.children.set(t),
                this.internalCreateCallback && this.internalCreateCallback.call(this, t),
                this.createCallback && this.createCallback.call(this, t),
                e && (t.addToDisplayList(this.scene.sys.displayList),
                t.addToUpdateList()),
                t.on(r.DESTROY, this.remove, this)),
                this
            },
            addMultiple: function(t, e) {
                if (void 0 === e && (e = !1),
                Array.isArray(t))
                    for (var i = 0; i < t.length; i++)
                        this.add(t[i], e);
                return this
            },
            remove: function(t, e, i) {
                return void 0 === e && (e = !1),
                void 0 === i && (i = !1),
                this.children.contains(t) && (this.children.delete(t),
                this.internalRemoveCallback && this.internalRemoveCallback.call(this, t),
                this.removeCallback && this.removeCallback.call(this, t),
                t.off(r.DESTROY, this.remove, this),
                i ? t.destroy() : e && (t.removeFromDisplayList(),
                t.removeFromUpdateList())),
                this
            },
            clear: function(t, e) {
                void 0 === t && (t = !1),
                void 0 === e && (e = !1);
                for (var i = this.children, n = 0; n < i.size; n++) {
                    var s = i.entries[n];
                    s.off(r.DESTROY, this.remove, this),
                    e ? s.destroy() : t && (s.removeFromDisplayList(),
                    s.removeFromUpdateList())
                }
                return this.children.clear(),
                this
            },
            contains: function(t) {
                return this.children.contains(t)
            },
            getChildren: function() {
                return this.children.entries
            },
            getLength: function() {
                return this.children.size
            },
            getMatching: function(t, e, i, n) {
                return o(this.children.entries, t, e, i, n)
            },
            getFirst: function(t, e, i, n, s, r, o) {
                return this.getHandler(!0, 1, t, e, i, n, s, r, o)
            },
            getFirstNth: function(t, e, i, n, s, r, o, a) {
                return this.getHandler(!0, t, e, i, n, s, r, o, a)
            },
            getLast: function(t, e, i, n, s, r, o) {
                return this.getHandler(!1, 1, t, e, i, n, s, r, o)
            },
            getLastNth: function(t, e, i, n, s, r, o, a) {
                return this.getHandler(!1, t, e, i, n, s, r, o, a)
            },
            getHandler: function(t, e, i, n, s, r, o, a, h) {
                var l, u;
                void 0 === i && (i = !1),
                void 0 === n && (n = !1);
                var c = 0
                  , d = this.children.entries;
                if (t)
                    for (u = 0; u < d.length; u++)
                        if ((l = d[u]).active === i) {
                            if (++c === e)
                                break
                        } else
                            l = null;
                else
                    for (u = d.length - 1; 0 <= u; u--)
                        if ((l = d[u]).active === i) {
                            if (++c === e)
                                break
                        } else
                            l = null;
                return l ? ("number" == typeof s && (l.x = s),
                "number" == typeof r && (l.y = r),
                l) : n ? this.create(s, r, o, a, h) : null
            },
            get: function(t, e, i, n, s) {
                return this.getFirst(!1, !0, t, e, i, n, s)
            },
            getFirstAlive: function(t, e, i, n, s, r) {
                return this.getFirst(!0, t, e, i, n, s, r)
            },
            getFirstDead: function(t, e, i, n, s, r) {
                return this.getFirst(!1, t, e, i, n, s, r)
            },
            playAnimation: function(t, e) {
                return X.PlayAnimation(this.children.entries, t, e),
                this
            },
            isFull: function() {
                return -1 !== this.maxSize && this.children.size >= this.maxSize
            },
            countActive: function(t) {
                void 0 === t && (t = !0);
                for (var e = 0, i = 0; i < this.children.size; i++)
                    this.children.entries[i].active === t && e++;
                return e
            },
            getTotalUsed: function() {
                return this.countActive()
            },
            getTotalFree: function() {
                var t = this.getTotalUsed();
                return (-1 === this.maxSize ? 999999999999 : this.maxSize) - t
            },
            setActive: function(t) {
                return this.active = t,
                this
            },
            setName: function(t) {
                return this.name = t,
                this
            },
            propertyValueSet: function(t, e, i, n, s) {
                return X.PropertyValueSet(this.children.entries, t, e, i, n, s),
                this
            },
            propertyValueInc: function(t, e, i, n, s) {
                return X.PropertyValueInc(this.children.entries, t, e, i, n, s),
                this
            },
            setX: function(t, e) {
                return X.SetX(this.children.entries, t, e),
                this
            },
            setY: function(t, e) {
                return X.SetY(this.children.entries, t, e),
                this
            },
            setXY: function(t, e, i, n) {
                return X.SetXY(this.children.entries, t, e, i, n),
                this
            },
            incX: function(t, e) {
                return X.IncX(this.children.entries, t, e),
                this
            },
            incY: function(t, e) {
                return X.IncY(this.children.entries, t, e),
                this
            },
            incXY: function(t, e, i, n) {
                return X.IncXY(this.children.entries, t, e, i, n),
                this
            },
            shiftPosition: function(t, e, i) {
                return X.ShiftPosition(this.children.entries, t, e, i),
                this
            },
            angle: function(t, e) {
                return X.Angle(this.children.entries, t, e),
                this
            },
            rotate: function(t, e) {
                return X.Rotate(this.children.entries, t, e),
                this
            },
            rotateAround: function(t, e) {
                return X.RotateAround(this.children.entries, t, e),
                this
            },
            rotateAroundDistance: function(t, e, i) {
                return X.RotateAroundDistance(this.children.entries, t, e, i),
                this
            },
            setAlpha: function(t, e) {
                return X.SetAlpha(this.children.entries, t, e),
                this
            },
            setTint: function(t, e, i, n) {
                return X.SetTint(this.children.entries, t, e, i, n),
                this
            },
            setOrigin: function(t, e, i, n) {
                return X.SetOrigin(this.children.entries, t, e, i, n),
                this
            },
            scaleX: function(t, e) {
                return X.ScaleX(this.children.entries, t, e),
                this
            },
            scaleY: function(t, e) {
                return X.ScaleY(this.children.entries, t, e),
                this
            },
            scaleXY: function(t, e, i, n) {
                return X.ScaleXY(this.children.entries, t, e, i, n),
                this
            },
            setDepth: function(t, e) {
                return X.SetDepth(this.children.entries, t, e),
                this
            },
            setBlendMode: function(t) {
                return X.SetBlendMode(this.children.entries, t),
                this
            },
            setHitArea: function(t, e) {
                return X.SetHitArea(this.children.entries, t, e),
                this
            },
            shuffle: function() {
                return X.Shuffle(this.children.entries),
                this
            },
            kill: function(t) {
                this.children.contains(t) && t.setActive(!1)
            },
            killAndHide: function(t) {
                this.children.contains(t) && (t.setActive(!1),
                t.setVisible(!1))
            },
            setVisible: function(t, e, i) {
                return X.SetVisible(this.children.entries, t, e, i),
                this
            },
            toggleVisible: function() {
                return X.ToggleVisible(this.children.entries),
                this
            },
            destroy: function(t, e) {
                void 0 === t && (t = !1),
                void 0 === e && (e = !1),
                this.scene && !this.ignoreDestroy && (this.emit(r.DESTROY, this),
                this.removeAllListeners(),
                this.scene.sys.updateList.remove(this),
                this.clear(e, t),
                this.scene = void 0,
                this.children = void 0)
            }
        });
        t.exports = u
    }
    , function(t, e, i) {
        var E = i(12);
        t.exports = function(t, e, i, n, s, r) {
            for (var o = E.getTintAppendFloatAlpha(i.fillColor, i.fillAlpha * n), a = i.pathData, h = i.pathIndexes, l = 0; l < h.length; l += 3) {
                var u = 2 * h[l]
                  , c = 2 * h[l + 1]
                  , d = 2 * h[l + 2]
                  , p = a[0 + u] - s
                  , f = a[1 + u] - r
                  , g = a[0 + c] - s
                  , v = a[1 + c] - r
                  , y = a[0 + d] - s
                  , m = a[1 + d] - r
                  , x = e.getX(p, f)
                  , w = e.getY(p, f)
                  , b = e.getX(g, v)
                  , T = e.getY(g, v)
                  , S = e.getX(y, m)
                  , _ = e.getY(y, m);
                t.batchTri(i, x, w, b, T, S, _, 0, 0, 1, 1, o, o, o, 2)
            }
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            var n = t.x3 - t.x1
              , s = t.y3 - t.y1
              , r = t.x2 - t.x1
              , o = t.y2 - t.y1
              , a = e - t.x1
              , h = i - t.y1
              , l = n * n + s * s
              , u = n * r + s * o
              , c = n * a + s * h
              , d = r * r + o * o
              , p = r * a + o * h
              , f = l * d - u * u
              , g = 0 == f ? 0 : 1 / f
              , v = (d * c - u * p) * g
              , y = (l * p - u * c) * g;
            return 0 <= v && 0 <= y && v + y < 1
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(10)
          , r = i(3);
        function f(t, e, i, n) {
            var s = t - i
              , r = e - n
              , o = s * s + r * r;
            return Math.sqrt(o)
        }
        var o = new n({
            initialize: function(t, e, i) {
                this.vertex1 = t,
                this.vertex2 = e,
                this.vertex3 = i,
                this.bounds = new s,
                this._inCenter = new r
            },
            getInCenter: function(t) {
                void 0 === t && (t = !0);
                var e, i, n, s, r, o = this.vertex1, a = this.vertex2, h = this.vertex3, l = t ? (e = o.x,
                i = o.y,
                n = a.x,
                s = a.y,
                r = h.x,
                h.y) : (e = o.vx,
                i = o.vy,
                n = a.vx,
                s = a.vy,
                r = h.vx,
                h.vy), u = f(r, l, n, s), c = f(e, i, r, l), d = f(n, s, e, i), p = u + c + d;
                return this._inCenter.set((e * u + n * c + r * d) / p, (i * u + s * c + l * d) / p)
            },
            contains: function(t, e, i) {
                var n, s, r, o, a, h, l = this.vertex1, u = this.vertex2, c = this.vertex3, d = l.vx, p = l.vy, f = u.vx, g = u.vy, v = c.vx, y = c.vy;
                i && (n = i.a,
                s = i.b,
                r = i.c,
                o = i.d,
                a = i.e,
                h = i.f,
                d = l.vx * n + l.vy * r + a,
                p = l.vx * s + l.vy * o + h,
                f = u.vx * n + u.vy * r + a,
                g = u.vx * s + u.vy * o + h,
                v = c.vx * n + c.vy * r + a,
                y = c.vx * s + c.vy * o + h);
                var m = v - d
                  , x = y - p
                  , w = f - d
                  , b = g - p
                  , T = t - d
                  , S = e - p
                  , _ = m * m + x * x
                  , E = m * w + x * b
                  , P = m * T + x * S
                  , A = w * w + b * b
                  , M = w * T + b * S
                  , C = _ * A - E * E
                  , O = 0 == C ? 0 : 1 / C
                  , k = (A * P - E * M) * O
                  , R = (_ * M - E * P) * O;
                return 0 <= k && 0 <= R && k + R < 1
            },
            isCounterClockwise: function(t) {
                var e = this.vertex1
                  , i = this.vertex2
                  , n = this.vertex3
                  , s = (i.vx - e.vx) * (n.vy - e.vy) - (i.vy - e.vy) * (n.vx - e.vx);
                return t <= 0 ? 0 <= s : s < 0
            },
            load: function(t, e, i, n, s) {
                return i = this.vertex1.load(t, e, i, n, s),
                i = this.vertex2.load(t, e, i, n, s),
                this.vertex3.load(t, e, i, n, s)
            },
            transformCoordinatesLocal: function(t, e, i, n) {
                return this.vertex1.transformCoordinatesLocal(t, e, i, n),
                this.vertex2.transformCoordinatesLocal(t, e, i, n),
                this.vertex3.transformCoordinatesLocal(t, e, i, n),
                this
            },
            updateBounds: function() {
                var t = this.vertex1
                  , e = this.vertex2
                  , i = this.vertex3
                  , n = this.bounds;
                return n.x = Math.min(t.vx, e.vx, i.vx),
                n.y = Math.min(t.vy, e.vy, i.vy),
                n.width = Math.max(t.vx, e.vx, i.vx) - n.x,
                n.height = Math.max(t.vy, e.vy, i.vy) - n.y,
                this
            },
            isInView: function(t, e, i, n, s, r, o, a, h, l, u) {
                var c = this.vertex1.update(s, r, o, a, h, l, u, n)
                  , d = this.vertex2.update(s, r, o, a, h, l, u, n)
                  , p = this.vertex3.update(s, r, o, a, h, l, u, n);
                if (c.ta <= 0 && d.ta <= 0 && p.ta <= 0)
                    return !1;
                if (e && !this.isCounterClockwise(i))
                    return !1;
                var f = this.bounds;
                f.x = Math.min(c.tx, d.tx, p.tx),
                f.y = Math.min(c.ty, d.ty, p.ty),
                f.width = Math.max(c.tx, d.tx, p.tx) - f.x,
                f.height = Math.max(c.ty, d.ty, p.ty) - f.y;
                var g = t.x + t.width
                  , v = t.y + t.height;
                return !(f.width <= 0 || f.height <= 0 || t.width <= 0 || t.height <= 0 || f.right < t.x || f.bottom < t.y || f.x > g || f.y > v)
            },
            translate: function(t, e) {
                void 0 === e && (e = 0);
                var i = this.vertex1
                  , n = this.vertex2
                  , s = this.vertex3;
                return i.x += t,
                i.y += e,
                n.x += t,
                n.y += e,
                s.x += t,
                s.y += e,
                this
            },
            x: {
                get: function() {
                    return this.getInCenter().x
                },
                set: function(t) {
                    var e = this.getInCenter();
                    this.translate(t - e.x, 0)
                }
            },
            y: {
                get: function() {
                    return this.getInCenter().y
                },
                set: function(t) {
                    var e = this.getInCenter();
                    this.translate(0, t - e.y)
                }
            },
            alpha: {
                get: function() {
                    var t = this.vertex1
                      , e = this.vertex2
                      , i = this.vertex3;
                    return (t.alpha + e.alpha + i.alpha) / 3
                },
                set: function(t) {
                    this.vertex1.alpha = t,
                    this.vertex2.alpha = t,
                    this.vertex3.alpha = t
                }
            },
            depth: {
                get: function() {
                    var t = this.vertex1
                      , e = this.vertex2
                      , i = this.vertex3;
                    return (t.vz + e.vz + i.vz) / 3
                }
            },
            destroy: function() {
                this.vertex1 = null,
                this.vertex2 = null,
                this.vertex3 = null
            }
        });
        t.exports = o
    }
    , function(t, e, i) {
        var n = i(0)
          , r = i(12)
          , u = i(39)
          , s = new n({
            Extends: u,
            initialize: function(t, e, i, n, s, r, o, a, h, l) {
                void 0 === r && (r = 16777215),
                void 0 === o && (o = 1),
                void 0 === a && (a = 0),
                void 0 === h && (h = 0),
                void 0 === l && (l = 0),
                u.call(this, t, e, i),
                this.vx = 0,
                this.vy = 0,
                this.vz = 0,
                this.nx = a,
                this.ny = h,
                this.nz = l,
                this.u = n,
                this.v = s,
                this.color = r,
                this.alpha = o,
                this.tx = 0,
                this.ty = 0,
                this.ta = 0
            },
            setUVs: function(t, e) {
                return this.u = t,
                this.v = e,
                this
            },
            transformCoordinatesLocal: function(t, e, i, n) {
                var s = this.x
                  , r = this.y
                  , o = this.z
                  , a = t.val
                  , h = s * a[0] + r * a[4] + o * a[8] + a[12]
                  , l = s * a[1] + r * a[5] + o * a[9] + a[13]
                  , u = s * a[2] + r * a[6] + o * a[10] + a[14]
                  , c = s * a[3] + r * a[7] + o * a[11] + a[15];
                this.vx = h / c * e,
                this.vy = -l / c * i,
                this.vz = n <= 0 ? u / c : -u / c
            },
            update: function(t, e, i, n, s, r, o, a) {
                var h = this.vx * t + this.vy * i + s
                  , l = this.vx * e + this.vy * n + r;
                return o && (h = Math.round(h),
                l = Math.round(l)),
                this.tx = h,
                this.ty = l,
                this.ta = this.alpha * a,
                this
            },
            load: function(t, e, i, n, s) {
                return t[++i] = this.tx,
                t[++i] = this.ty,
                t[++i] = this.u,
                t[++i] = this.v,
                t[++i] = n,
                t[++i] = s,
                e[++i] = r.getTintAppendFloatAlpha(this.color, this.ta),
                i
            }
        });
        t.exports = s
    }
    , function(t, e, i) {
        var c = {};
        t.exports = c;
        var o = i(166)
          , r = i(32)
          , a = i(84)
          , d = i(41);
        c.create = function(t) {
            return r.extend({
                id: r.nextId(),
                type: "composite",
                parent: null,
                isModified: !1,
                bodies: [],
                constraints: [],
                composites: [],
                label: "Composite",
                plugin: {}
            }, t)
        }
        ,
        c.setModified = function(t, e, i, n) {
            if (o.trigger(t, "compositeModified", t),
            t.isModified = e,
            i && t.parent && c.setModified(t.parent, e, i, n),
            n)
                for (var s = 0; s < t.composites.length; s++) {
                    var r = t.composites[s];
                    c.setModified(r, e, i, n)
                }
        }
        ,
        c.add = function(t, e) {
            var i = [].concat(e);
            o.trigger(t, "beforeAdd", {
                object: e
            });
            for (var n = 0; n < i.length; n++) {
                var s = i[n];
                switch (s.type) {
                case "body":
                    if (s.parent !== s) {
                        r.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");
                        break
                    }
                    c.addBody(t, s);
                    break;
                case "constraint":
                    c.addConstraint(t, s);
                    break;
                case "composite":
                    c.addComposite(t, s);
                    break;
                case "mouseConstraint":
                    c.addConstraint(t, s.constraint)
                }
            }
            return o.trigger(t, "afterAdd", {
                object: e
            }),
            t
        }
        ,
        c.remove = function(t, e, i) {
            var n = [].concat(e);
            o.trigger(t, "beforeRemove", {
                object: e
            });
            for (var s = 0; s < n.length; s++) {
                var r = n[s];
                switch (r.type) {
                case "body":
                    c.removeBody(t, r, i);
                    break;
                case "constraint":
                    c.removeConstraint(t, r, i);
                    break;
                case "composite":
                    c.removeComposite(t, r, i);
                    break;
                case "mouseConstraint":
                    c.removeConstraint(t, r.constraint)
                }
            }
            return o.trigger(t, "afterRemove", {
                object: e
            }),
            t
        }
        ,
        c.addComposite = function(t, e) {
            return t.composites.push(e),
            e.parent = t,
            c.setModified(t, !0, !0, !1),
            t
        }
        ,
        c.removeComposite = function(t, e, i) {
            var n = t.composites.indexOf(e);
            if (-1 !== n && (c.removeCompositeAt(t, n),
            c.setModified(t, !0, !0, !1)),
            i)
                for (var s = 0; s < t.composites.length; s++)
                    c.removeComposite(t.composites[s], e, !0);
            return t
        }
        ,
        c.removeCompositeAt = function(t, e) {
            return t.composites.splice(e, 1),
            c.setModified(t, !0, !0, !1),
            t
        }
        ,
        c.addBody = function(t, e) {
            return t.bodies.push(e),
            c.setModified(t, !0, !0, !1),
            t
        }
        ,
        c.removeBody = function(t, e, i) {
            var n = t.bodies.indexOf(e);
            if (-1 !== n && (c.removeBodyAt(t, n),
            c.setModified(t, !0, !0, !1)),
            i)
                for (var s = 0; s < t.composites.length; s++)
                    c.removeBody(t.composites[s], e, !0);
            return t
        }
        ,
        c.removeBodyAt = function(t, e) {
            return t.bodies.splice(e, 1),
            c.setModified(t, !0, !0, !1),
            t
        }
        ,
        c.addConstraint = function(t, e) {
            return t.constraints.push(e),
            c.setModified(t, !0, !0, !1),
            t
        }
        ,
        c.removeConstraint = function(t, e, i) {
            var n = t.constraints.indexOf(e);
            if (-1 !== n && c.removeConstraintAt(t, n),
            i)
                for (var s = 0; s < t.composites.length; s++)
                    c.removeConstraint(t.composites[s], e, !0);
            return t
        }
        ,
        c.removeConstraintAt = function(t, e) {
            return t.constraints.splice(e, 1),
            c.setModified(t, !0, !0, !1),
            t
        }
        ,
        c.clear = function(t, e, i) {
            if (i)
                for (var n = 0; n < t.composites.length; n++)
                    c.clear(t.composites[n], e, !0);
            return e ? t.bodies = t.bodies.filter(function(t) {
                return t.isStatic
            }) : t.bodies.length = 0,
            t.constraints.length = 0,
            t.composites.length = 0,
            c.setModified(t, !0, !0, !1),
            t
        }
        ,
        c.allBodies = function(t) {
            for (var e = [].concat(t.bodies), i = 0; i < t.composites.length; i++)
                e = e.concat(c.allBodies(t.composites[i]));
            return e
        }
        ,
        c.allConstraints = function(t) {
            for (var e = [].concat(t.constraints), i = 0; i < t.composites.length; i++)
                e = e.concat(c.allConstraints(t.composites[i]));
            return e
        }
        ,
        c.allComposites = function(t) {
            for (var e = [].concat(t.composites), i = 0; i < t.composites.length; i++)
                e = e.concat(c.allComposites(t.composites[i]));
            return e
        }
        ,
        c.get = function(t, e, i) {
            var n, s;
            switch (i) {
            case "body":
                n = c.allBodies(t);
                break;
            case "constraint":
                n = c.allConstraints(t);
                break;
            case "composite":
                n = c.allComposites(t).concat(t)
            }
            return n && 0 !== (s = n.filter(function(t) {
                return t.id.toString() === e.toString()
            })).length ? s[0] : null
        }
        ,
        c.move = function(t, e, i) {
            return c.remove(t, e),
            c.add(i, e),
            t
        }
        ,
        c.rebase = function(t) {
            for (var e = c.allBodies(t).concat(c.allConstraints(t)).concat(c.allComposites(t)), i = 0; i < e.length; i++)
                e[i].id = r.nextId();
            return c.setModified(t, !0, !0, !1),
            t
        }
        ,
        c.translate = function(t, e, i) {
            for (var n = i ? c.allBodies(t) : t.bodies, s = 0; s < n.length; s++)
                d.translate(n[s], e);
            return c.setModified(t, !0, !0, !1),
            t
        }
        ,
        c.rotate = function(t, e, i, n) {
            for (var s = Math.cos(e), r = Math.sin(e), o = n ? c.allBodies(t) : t.bodies, a = 0; a < o.length; a++) {
                var h = o[a]
                  , l = h.position.x - i.x
                  , u = h.position.y - i.y;
                d.setPosition(h, {
                    x: i.x + (l * s - u * r),
                    y: i.y + (l * r + u * s)
                }),
                d.rotate(h, e)
            }
            return c.setModified(t, !0, !0, !1),
            t
        }
        ,
        c.scale = function(t, e, i, n, s) {
            for (var r = s ? c.allBodies(t) : t.bodies, o = 0; o < r.length; o++) {
                var a = r[o]
                  , h = a.position.x - n.x
                  , l = a.position.y - n.y;
                d.setPosition(a, {
                    x: n.x + h * e,
                    y: n.y + l * i
                }),
                d.scale(a, e, i)
            }
            return c.setModified(t, !0, !0, !1),
            t
        }
        ,
        c.bounds = function(t) {
            for (var e = c.allBodies(t), i = [], n = 0; n < e.length; n += 1) {
                var s = e[n];
                i.push(s.bounds.min, s.bounds.max)
            }
            return a.create(i)
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            return 0 <= t && t < i.width && 0 <= e && e < i.height
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(29)
          , r = i(2)
          , o = new n({
            initialize: function(t) {
                void 0 === t && (t = {}),
                this.name = r(t, "name", "layer"),
                this.x = r(t, "x", 0),
                this.y = r(t, "y", 0),
                this.width = r(t, "width", 0),
                this.height = r(t, "height", 0),
                this.tileWidth = r(t, "tileWidth", 0),
                this.tileHeight = r(t, "tileHeight", 0),
                this.baseTileWidth = r(t, "baseTileWidth", this.tileWidth),
                this.baseTileHeight = r(t, "baseTileHeight", this.tileHeight),
                this.orientation = r(t, "orientation", s.ORTHOGONAL),
                this.widthInPixels = r(t, "widthInPixels", this.width * this.baseTileWidth),
                this.heightInPixels = r(t, "heightInPixels", this.height * this.baseTileHeight),
                this.alpha = r(t, "alpha", 1),
                this.visible = r(t, "visible", !0),
                this.properties = r(t, "properties", []),
                this.indexes = r(t, "indexes", []),
                this.collideIndexes = r(t, "collideIndexes", []),
                this.callbacks = r(t, "callbacks", []),
                this.bodies = r(t, "bodies", []),
                this.data = r(t, "data", []),
                this.tilemapLayer = r(t, "tilemapLayer", null),
                this.hexSideLength = r(t, "hexSideLength", 0)
            }
        });
        t.exports = o
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(29)
          , r = i(2)
          , o = new n({
            initialize: function(t) {
                void 0 === t && (t = {}),
                this.name = r(t, "name", "map"),
                this.width = r(t, "width", 0),
                this.height = r(t, "height", 0),
                this.infinite = r(t, "infinite", !1),
                this.tileWidth = r(t, "tileWidth", 0),
                this.tileHeight = r(t, "tileHeight", 0),
                this.widthInPixels = r(t, "widthInPixels", this.width * this.tileWidth),
                this.heightInPixels = r(t, "heightInPixels", this.height * this.tileHeight),
                this.format = r(t, "format", null),
                this.orientation = r(t, "orientation", s.ORTHOGONAL),
                this.renderOrder = r(t, "renderOrder", "right-down"),
                this.version = r(t, "version", "1"),
                this.properties = r(t, "properties", {}),
                this.layers = r(t, "layers", []),
                this.images = r(t, "images", []),
                this.objects = r(t, "objects", {}),
                this.collision = r(t, "collision", {}),
                this.tilesets = r(t, "tilesets", []),
                this.imageCollections = r(t, "imageCollections", []),
                this.tiles = r(t, "tiles", []),
                this.hexSideLength = r(t, "hexSideLength", 0)
            }
        });
        t.exports = o
    }
    , function(t, e, i) {
        var n = new (i(0))({
            initialize: function(t, e, i, n, s, r, o, a) {
                (void 0 === i || i <= 0) && (i = 32),
                (void 0 === n || n <= 0) && (n = 32),
                void 0 === s && (s = 0),
                void 0 === r && (r = 0),
                void 0 === o && (o = {}),
                void 0 === a && (a = {}),
                this.name = t,
                this.firstgid = e,
                this.tileWidth = i,
                this.tileHeight = n,
                this.tileMargin = s,
                this.tileSpacing = r,
                this.tileProperties = o,
                this.tileData = a,
                this.image = null,
                this.glTexture = null,
                this.rows = 0,
                this.columns = 0,
                this.total = 0,
                this.texCoordinates = []
            },
            getTileProperties: function(t) {
                return this.containsTileIndex(t) ? this.tileProperties[t - this.firstgid] : null
            },
            getTileData: function(t) {
                return this.containsTileIndex(t) ? this.tileData[t - this.firstgid] : null
            },
            getTileCollisionGroup: function(t) {
                var e = this.getTileData(t);
                return e && e.objectgroup ? e.objectgroup : null
            },
            containsTileIndex: function(t) {
                return t >= this.firstgid && t < this.firstgid + this.total
            },
            getTileTextureCoordinates: function(t) {
                return this.containsTileIndex(t) ? this.texCoordinates[t - this.firstgid] : null
            },
            setImage: function(t) {
                return this.image = t,
                this.glTexture = t.get().source.glTexture,
                this.updateTileData(this.image.source[0].width, this.image.source[0].height),
                this
            },
            setTileSize: function(t, e) {
                return void 0 !== t && (this.tileWidth = t),
                void 0 !== e && (this.tileHeight = e),
                this.image && this.updateTileData(this.image.source[0].width, this.image.source[0].height),
                this
            },
            setSpacing: function(t, e) {
                return void 0 !== t && (this.tileMargin = t),
                void 0 !== e && (this.tileSpacing = e),
                this.image && this.updateTileData(this.image.source[0].width, this.image.source[0].height),
                this
            },
            updateTileData: function(t, e) {
                var i = (e - 2 * this.tileMargin + this.tileSpacing) / (this.tileHeight + this.tileSpacing)
                  , n = (t - 2 * this.tileMargin + this.tileSpacing) / (this.tileWidth + this.tileSpacing);
                i % 1 == 0 && n % 1 == 0 || console.warn("Image tile area not tile size multiple in: " + this.name),
                i = Math.floor(i),
                n = Math.floor(n),
                this.rows = i,
                this.columns = n,
                this.total = i * n,
                this.texCoordinates.length = 0;
                for (var s = this.tileMargin, r = this.tileMargin, o = 0; o < this.rows; o++) {
                    for (var a = 0; a < this.columns; a++)
                        this.texCoordinates.push({
                            x: s,
                            y: r
                        }),
                        s += this.tileWidth + this.tileSpacing;
                    s = this.tileMargin,
                    r += this.tileHeight + this.tileSpacing
                }
                return this
            }
        });
        t.exports = n
    }
    , function(t, e) {
        t.exports = {
            TOP_LEFT: 0,
            TOP_CENTER: 1,
            TOP_RIGHT: 2,
            LEFT_TOP: 3,
            LEFT_CENTER: 4,
            LEFT_BOTTOM: 5,
            CENTER: 6,
            RIGHT_TOP: 7,
            RIGHT_CENTER: 8,
            RIGHT_BOTTOM: 9,
            BOTTOM_LEFT: 10,
            BOTTOM_CENTER: 11,
            BOTTOM_RIGHT: 12
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            return void 0 === i && (i = 1e-4),
            Math.abs(t - e) < i
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(11)
          , r = i(15)
          , o = i(1068)
          , a = new n({
            Extends: r,
            Mixins: [s.Alpha, s.BlendMode, s.Depth, s.Flip, s.GetBounds, s.Mask, s.Origin, s.Pipeline, s.ScrollFactor, s.Size, s.TextureCrop, s.Tint, s.Transform, s.Visible, o],
            initialize: function(t, e, i, n, s) {
                r.call(this, t, "Image"),
                this._crop = this.resetCropObject(),
                this.setTexture(n, s),
                this.setPosition(e, i),
                this.setSizeToFrame(),
                this.setOriginFromFrame(),
                this.initPipeline()
            }
        });
        t.exports = a
    }
    , function(t, e) {
        t.exports = function(t, e) {
            return t.hasOwnProperty(e)
        }
    }
    , function(t, e, i) {
        var s = i(77);
        t.exports = function(t, e) {
            var i = s(t);
            for (var n in e)
                i.hasOwnProperty(n) || (i[n] = e[n]);
            return i
        }
    }
    , function(t, e, i) {
        var b = {};
        t.exports = b;
        var o = i(64)
          , T = i(83)
          , a = i(165)
          , h = i(84)
          , l = i(271)
          , u = i(32);
        b._warming = .4,
        b._torqueDampen = 1,
        b._minLength = 1e-6,
        b.create = function(t) {
            var e = t;
            e.bodyA && !e.pointA && (e.pointA = {
                x: 0,
                y: 0
            }),
            e.bodyB && !e.pointB && (e.pointB = {
                x: 0,
                y: 0
            });
            var i = e.bodyA ? T.add(e.bodyA.position, e.pointA) : e.pointA
              , n = e.bodyB ? T.add(e.bodyB.position, e.pointB) : e.pointB
              , s = T.magnitude(T.sub(i, n));
            e.length = void 0 !== e.length ? e.length : s,
            e.id = e.id || u.nextId(),
            e.label = e.label || "Constraint",
            e.type = "constraint",
            e.stiffness = e.stiffness || (0 < e.length ? 1 : .7),
            e.damping = e.damping || 0,
            e.angularStiffness = e.angularStiffness || 0,
            e.angleA = e.bodyA ? e.bodyA.angle : e.angleA,
            e.angleB = e.bodyB ? e.bodyB.angle : e.angleB,
            e.plugin = {};
            var r = {
                visible: !0,
                type: "line",
                anchors: !0,
                lineColor: null,
                lineOpacity: null,
                lineThickness: null,
                pinSize: null,
                anchorColor: null,
                anchorSize: null
            };
            return 0 === e.length && .1 < e.stiffness ? (r.type = "pin",
            r.anchors = !1) : e.stiffness < .9 && (r.type = "spring"),
            e.render = u.extend(r, e.render),
            e
        }
        ,
        b.preSolveAll = function(t) {
            for (var e = 0; e < t.length; e += 1) {
                var i = t[e]
                  , n = i.constraintImpulse;
                i.isStatic || 0 === n.x && 0 === n.y && 0 === n.angle || (i.position.x += n.x,
                i.position.y += n.y,
                i.angle += n.angle)
            }
        }
        ,
        b.solveAll = function(t, e) {
            for (var i = 0; i < t.length; i += 1) {
                var n = t[i]
                  , s = !n.bodyA || n.bodyA && n.bodyA.isStatic
                  , r = !n.bodyB || n.bodyB && n.bodyB.isStatic;
                (s || r) && b.solve(t[i], e)
            }
            for (i = 0; i < t.length; i += 1)
                s = !(n = t[i]).bodyA || n.bodyA && n.bodyA.isStatic,
                r = !n.bodyB || n.bodyB && n.bodyB.isStatic,
                s || r || b.solve(t[i], e)
        }
        ,
        b.solve = function(t, e) {
            var i, n, s, r, o, a, h, l, u, c, d, p, f, g, v, y = t.bodyA, m = t.bodyB, x = t.pointA, w = t.pointB;
            (y || m) && (y && !y.isStatic && (T.rotate(x, y.angle - t.angleA, x),
            t.angleA = y.angle),
            m && !m.isStatic && (T.rotate(w, m.angle - t.angleB, w),
            t.angleB = m.angle),
            i = x,
            n = w,
            y && (i = T.add(y.position, x)),
            m && (n = T.add(m.position, w)),
            i && n && (s = T.sub(i, n),
            (r = T.magnitude(s)) < b._minLength && (r = b._minLength),
            o = (r - t.length) / r,
            a = t.stiffness < 1 ? t.stiffness * e : t.stiffness,
            h = T.mult(s, o * a),
            u = (l = (y ? y.inverseMass : 0) + (m ? m.inverseMass : 0)) + ((y ? y.inverseInertia : 0) + (m ? m.inverseInertia : 0)),
            t.damping && (p = T.create(),
            f = T.div(s, r),
            g = T.sub(m && T.sub(m.position, m.positionPrev) || p, y && T.sub(y.position, y.positionPrev) || p),
            v = T.dot(f, g)),
            y && !y.isStatic && (d = y.inverseMass / l,
            y.constraintImpulse.x -= h.x * d,
            y.constraintImpulse.y -= h.y * d,
            y.position.x -= h.x * d,
            y.position.y -= h.y * d,
            t.damping && (y.positionPrev.x -= t.damping * f.x * v * d,
            y.positionPrev.y -= t.damping * f.y * v * d),
            c = T.cross(x, h) / u * b._torqueDampen * y.inverseInertia * (1 - t.angularStiffness),
            y.constraintImpulse.angle -= c,
            y.angle -= c),
            m && !m.isStatic && (d = m.inverseMass / l,
            m.constraintImpulse.x += h.x * d,
            m.constraintImpulse.y += h.y * d,
            m.position.x += h.x * d,
            m.position.y += h.y * d,
            t.damping && (m.positionPrev.x += t.damping * f.x * v * d,
            m.positionPrev.y += t.damping * f.y * v * d),
            c = T.cross(w, h) / u * b._torqueDampen * m.inverseInertia * (1 - t.angularStiffness),
            m.constraintImpulse.angle += c,
            m.angle += c)))
        }
        ,
        b.postSolveAll = function(t) {
            for (var e = 0; e < t.length; e++) {
                var i = t[e]
                  , n = i.constraintImpulse;
                if (!(i.isStatic || 0 === n.x && 0 === n.y && 0 === n.angle)) {
                    a.set(i, !1);
                    for (var s = 0; s < i.parts.length; s++) {
                        var r = i.parts[s];
                        o.translate(r.vertices, n),
                        0 < s && (r.position.x += n.x,
                        r.position.y += n.y),
                        0 !== n.angle && (o.rotate(r.vertices, n.angle, i.position),
                        l.rotate(r.axes, n.angle),
                        0 < s && T.rotateAbout(r.position, n.angle, i.position, r.position)),
                        h.update(r.bounds, r.vertices, i.velocity)
                    }
                    n.angle *= b._warming,
                    n.x *= b._warming,
                    n.y *= b._warming
                }
            }
        }
        ,
        b.pointAWorld = function(t) {
            return {
                x: (t.bodyA ? t.bodyA.position.x : 0) + t.pointA.x,
                y: (t.bodyA ? t.bodyA.position.y : 0) + t.pointA.y
            }
        }
        ,
        b.pointBWorld = function(t) {
            return {
                x: (t.bodyB ? t.bodyB.position.x : 0) + t.pointB.x,
                y: (t.bodyB ? t.bodyB.position.y : 0) + t.pointB.y
            }
        }
    }
    , function(t, e, i) {
        var r = i(35)
          , n = i(65)
          , s = i(66)
          , o = i(0)
          , a = i(11)
          , h = i(15)
          , l = i(10)
          , u = i(57)
          , c = new o({
            Extends: h,
            Mixins: [a.Depth, a.GetBounds, a.Origin, a.Transform, a.ScrollFactor, a.Visible],
            initialize: function(t, e, i, n, s) {
                void 0 === n && (n = 1),
                void 0 === s && (s = n),
                h.call(this, t, "Zone"),
                this.setPosition(e, i),
                this.width = n,
                this.height = s,
                this.blendMode = r.NORMAL,
                this.updateDisplayOrigin()
            },
            displayWidth: {
                get: function() {
                    return this.scaleX * this.width
                },
                set: function(t) {
                    this.scaleX = t / this.width
                }
            },
            displayHeight: {
                get: function() {
                    return this.scaleY * this.height
                },
                set: function(t) {
                    this.scaleY = t / this.height
                }
            },
            setSize: function(t, e, i) {
                void 0 === i && (i = !0),
                this.width = t,
                this.height = e,
                this.updateDisplayOrigin();
                var n = this.input;
                return i && n && !n.customHitArea && (n.hitArea.width = t,
                n.hitArea.height = e),
                this
            },
            setDisplaySize: function(t, e) {
                return this.displayWidth = t,
                this.displayHeight = e,
                this
            },
            setCircleDropZone: function(t) {
                return this.setDropZone(new n(0,0,t), s)
            },
            setRectangleDropZone: function(t, e) {
                return this.setDropZone(new l(0,0,t,e), u)
            },
            setDropZone: function(t, e) {
                return void 0 === t ? this.setRectangleDropZone(this.width, this.height) : this.input || this.setInteractive(t, e, !0),
                this
            },
            setAlpha: function() {},
            setBlendMode: function() {},
            renderCanvas: function(t, e, i) {
                i.addToRenderList(e)
            },
            renderWebGL: function(t, e, i) {
                i.addToRenderList(e)
            }
        });
        t.exports = c
    }
    , function(t, e) {
        t.exports = function(t) {
            return 2 * (t.width + t.height)
        }
    }
    , function(t, e) {
        t.exports = function(t) {
            for (var e = t.length - 1; 0 < e; e--) {
                var i = Math.floor(Math.random() * (e + 1))
                  , n = t[e];
                t[e] = t[i],
                t[i] = n
            }
            return t
        }
    }
    , function(t, e, i) {
        t.exports = {
            ADD_ANIMATION: i(724),
            ANIMATION_COMPLETE: i(725),
            ANIMATION_COMPLETE_KEY: i(726),
            ANIMATION_REPEAT: i(727),
            ANIMATION_RESTART: i(728),
            ANIMATION_START: i(729),
            ANIMATION_STOP: i(730),
            ANIMATION_UPDATE: i(731),
            PAUSE_ALL: i(732),
            REMOVE_ANIMATION: i(733),
            RESUME_ALL: i(734)
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(11)
          , r = i(36)
          , o = i(9)
          , a = i(37)
          , h = i(10)
          , l = i(25)
          , u = i(187)
          , E = i(3)
          , c = new n({
            Extends: o,
            Mixins: [s.Alpha, s.Visible],
            initialize: function(t, e, i, n) {
                void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                void 0 === n && (n = 0),
                o.call(this),
                this.scene,
                this.sceneManager,
                this.scaleManager,
                this.cameraManager,
                this.id = 0,
                this.name = "",
                this.roundPixels = !1,
                this.useBounds = !1,
                this.worldView = new h,
                this.dirty = !0,
                this._x = t,
                this._y = e,
                this._width = i,
                this._height = n,
                this._bounds = new h,
                this._scrollX = 0,
                this._scrollY = 0,
                this._zoomX = 1,
                this._zoomY = 1,
                this._rotation = 0,
                this.matrix = new l,
                this.transparent = !0,
                this.backgroundColor = u("rgba(0,0,0,0)"),
                this.disableCull = !1,
                this.culledObjects = [],
                this.midPoint = new E(i / 2,n / 2),
                this.originX = .5,
                this.originY = .5,
                this._customViewport = !1,
                this.mask = null,
                this._maskCamera = null,
                this.renderList = []
            },
            addToRenderList: function(t) {
                this.renderList.push(t)
            },
            setOrigin: function(t, e) {
                return void 0 === t && (t = .5),
                void 0 === e && (e = t),
                this.originX = t,
                this.originY = e,
                this
            },
            getScroll: function(t, e, i) {
                void 0 === i && (i = new E);
                var n = .5 * this.width
                  , s = .5 * this.height;
                return i.x = t - n,
                i.y = e - s,
                this.useBounds && (i.x = this.clampX(i.x),
                i.y = this.clampY(i.y)),
                i
            },
            centerOnX: function(t) {
                var e = .5 * this.width;
                return this.midPoint.x = t,
                this.scrollX = t - e,
                this.useBounds && (this.scrollX = this.clampX(this.scrollX)),
                this
            },
            centerOnY: function(t) {
                var e = .5 * this.height;
                return this.midPoint.y = t,
                this.scrollY = t - e,
                this.useBounds && (this.scrollY = this.clampY(this.scrollY)),
                this
            },
            centerOn: function(t, e) {
                return this.centerOnX(t),
                this.centerOnY(e),
                this
            },
            centerToBounds: function() {
                var t, e, i;
                return this.useBounds && (t = this._bounds,
                e = .5 * this.width,
                i = .5 * this.height,
                this.midPoint.set(t.centerX, t.centerY),
                this.scrollX = t.centerX - e,
                this.scrollY = t.centerY - i),
                this
            },
            centerToSize: function() {
                return this.scrollX = .5 * this.width,
                this.scrollY = .5 * this.height,
                this
            },
            cull: function(t) {
                if (this.disableCull)
                    return t;
                var e = this.matrix.matrix
                  , i = e[0]
                  , n = e[1]
                  , s = e[2]
                  , r = e[3];
                if (!(i * r - n * s))
                    return t;
                for (var o = e[4], a = e[5], h = this.scrollX, l = this.scrollY, u = this.width, c = this.height, d = this.y, p = d + c, f = this.x, g = f + u, v = this.culledObjects, y = t.length, m = v.length = 0; m < y; ++m) {
                    var x, w, b, T, S = t[m];
                    S.hasOwnProperty("width") && !S.parentContainer ? (x = S.width,
                    w = S.height,
                    f < ((b = S.x - h * S.scrollFactorX - x * S.originX) + x) * i + ((T = S.y - l * S.scrollFactorY - w * S.originY) + w) * s + o && b * i + T * s + o < g && d < (b + x) * n + (T + w) * r + a && b * n + T * r + a < p && v.push(S)) : v.push(S)
                }
                return v
            },
            getWorldPoint: function(t, e, i) {
                void 0 === i && (i = new E);
                var n = this.matrix.matrix
                  , s = n[0]
                  , r = n[1]
                  , o = n[2]
                  , a = n[3]
                  , h = n[4]
                  , l = n[5]
                  , u = s * a - r * o;
                if (!u)
                    return i.x = t,
                    i.y = e,
                    i;
                var c = a * (u = 1 / u)
                  , d = -r * u
                  , p = -o * u
                  , f = s * u
                  , g = (o * l - a * h) * u
                  , v = (r * h - s * l) * u
                  , y = Math.cos(this.rotation)
                  , m = Math.sin(this.rotation)
                  , x = this.zoomX
                  , w = this.zoomY
                  , b = this.scrollX
                  , T = this.scrollY
                  , S = t + (b * y - T * m) * x
                  , _ = e + (b * m + T * y) * w;
                return i.x = S * c + _ * p + g,
                i.y = S * d + _ * f + v,
                i
            },
            ignore: function(t) {
                var e = this.id;
                Array.isArray(t) || (t = [t]);
                for (var i = 0; i < t.length; i++) {
                    var n = t[i];
                    Array.isArray(n) ? this.ignore(n) : n.isParent ? this.ignore(n.getChildren()) : n.cameraFilter |= e
                }
                return this
            },
            preRender: function() {
                this.renderList.length = 0;
                var t = this.width
                  , e = this.height
                  , i = .5 * t
                  , n = .5 * e
                  , s = this.zoomX
                  , r = this.zoomY
                  , o = this.matrix
                  , a = t * this.originX
                  , h = e * this.originY
                  , l = this.scrollX
                  , u = this.scrollY;
                this.useBounds && (l = this.clampX(l),
                u = this.clampY(u)),
                this.roundPixels && (a = Math.round(a),
                h = Math.round(h));
                var c = (this.scrollX = l) + i
                  , d = (this.scrollY = u) + n;
                this.midPoint.set(c, d);
                var p = t / s
                  , f = e / r;
                this.worldView.setTo(c - p / 2, d - f / 2, p, f),
                o.applyITRS(this.x + a, this.y + h, this.rotation, s, r),
                o.translate(-a, -h)
            },
            clampX: function(t) {
                var e = this._bounds
                  , i = this.displayWidth
                  , n = e.x + (i - this.width) / 2
                  , s = Math.max(n, n + e.width - i);
                return t < n ? t = n : s < t && (t = s),
                t
            },
            clampY: function(t) {
                var e = this._bounds
                  , i = this.displayHeight
                  , n = e.y + (i - this.height) / 2
                  , s = Math.max(n, n + e.height - i);
                return t < n ? t = n : s < t && (t = s),
                t
            },
            removeBounds: function() {
                return this.useBounds = !1,
                this.dirty = !0,
                this._bounds.setEmpty(),
                this
            },
            setAngle: function(t) {
                return void 0 === t && (t = 0),
                this.rotation = r(t),
                this
            },
            setBackgroundColor: function(t) {
                return void 0 === t && (t = "rgba(0,0,0,0)"),
                this.backgroundColor = u(t),
                this.transparent = 0 === this.backgroundColor.alpha,
                this
            },
            setBounds: function(t, e, i, n, s) {
                return void 0 === s && (s = !1),
                this._bounds.setTo(t, e, i, n),
                this.dirty = !0,
                this.useBounds = !0,
                s ? this.centerToBounds() : (this.scrollX = this.clampX(this.scrollX),
                this.scrollY = this.clampY(this.scrollY)),
                this
            },
            getBounds: function(t) {
                void 0 === t && (t = new h);
                var e = this._bounds;
                return t.setTo(e.x, e.y, e.width, e.height),
                t
            },
            setName: function(t) {
                return void 0 === t && (t = ""),
                this.name = t,
                this
            },
            setPosition: function(t, e) {
                return void 0 === e && (e = t),
                this.x = t,
                this.y = e,
                this
            },
            setRotation: function(t) {
                return void 0 === t && (t = 0),
                this.rotation = t,
                this
            },
            setRoundPixels: function(t) {
                return this.roundPixels = t,
                this
            },
            setScene: function(t) {
                this.scene && this._customViewport && this.sceneManager.customViewports--;
                var e = (this.scene = t).sys;
                return this.sceneManager = e.game.scene,
                this.scaleManager = e.scale,
                this.cameraManager = e.cameras,
                this.updateSystem(),
                this
            },
            setScroll: function(t, e) {
                return void 0 === e && (e = t),
                this.scrollX = t,
                this.scrollY = e,
                this
            },
            setSize: function(t, e) {
                return void 0 === e && (e = t),
                this.width = t,
                this.height = e,
                this
            },
            setViewport: function(t, e, i, n) {
                return this.x = t,
                this.y = e,
                this.width = i,
                this.height = n,
                this
            },
            setZoom: function(t, e) {
                return void 0 === t && (t = 1),
                void 0 === e && (e = t),
                0 === t && (t = .001),
                0 === e && (e = .001),
                this.zoomX = t,
                this.zoomY = e,
                this
            },
            setMask: function(t, e) {
                return void 0 === e && (e = !0),
                this.mask = t,
                this._maskCamera = e ? this.cameraManager.default : this,
                this
            },
            clearMask: function(t) {
                return void 0 === t && (t = !1),
                t && this.mask && this.mask.destroy(),
                this.mask = null,
                this
            },
            toJSON: function() {
                var t = {
                    name: this.name,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    zoom: this.zoom,
                    rotation: this.rotation,
                    roundPixels: this.roundPixels,
                    scrollX: this.scrollX,
                    scrollY: this.scrollY,
                    backgroundColor: this.backgroundColor.rgba
                };
                return this.useBounds && (t.bounds = {
                    x: this._bounds.x,
                    y: this._bounds.y,
                    width: this._bounds.width,
                    height: this._bounds.height
                }),
                t
            },
            update: function() {},
            updateSystem: function() {
                var t, e;
                this.scaleManager && (t = 0 !== this._x || 0 !== this._y || this.scaleManager.width !== this._width || this.scaleManager.height !== this._height,
                e = this.sceneManager,
                t && !this._customViewport ? e.customViewports++ : !t && this._customViewport && e.customViewports--,
                this.dirty = !0,
                this._customViewport = t)
            },
            destroy: function() {
                this.emit(a.DESTROY, this),
                this.removeAllListeners(),
                this.matrix.destroy(),
                this.culledObjects = [],
                this._customViewport && this.sceneManager.customViewports--,
                this.renderList = [],
                this._bounds = null,
                this.scene = null,
                this.scaleManager = null,
                this.sceneManager = null,
                this.cameraManager = null
            },
            x: {
                get: function() {
                    return this._x
                },
                set: function(t) {
                    this._x = t,
                    this.updateSystem()
                }
            },
            y: {
                get: function() {
                    return this._y
                },
                set: function(t) {
                    this._y = t,
                    this.updateSystem()
                }
            },
            width: {
                get: function() {
                    return this._width
                },
                set: function(t) {
                    this._width = t,
                    this.updateSystem()
                }
            },
            height: {
                get: function() {
                    return this._height
                },
                set: function(t) {
                    this._height = t,
                    this.updateSystem()
                }
            },
            scrollX: {
                get: function() {
                    return this._scrollX
                },
                set: function(t) {
                    this._scrollX = t,
                    this.dirty = !0
                }
            },
            scrollY: {
                get: function() {
                    return this._scrollY
                },
                set: function(t) {
                    this._scrollY = t,
                    this.dirty = !0
                }
            },
            zoom: {
                get: function() {
                    return (this._zoomX + this._zoomY) / 2
                },
                set: function(t) {
                    this._zoomX = t,
                    this._zoomY = t,
                    this.dirty = !0
                }
            },
            zoomX: {
                get: function() {
                    return this._zoomX
                },
                set: function(t) {
                    this._zoomX = t,
                    this.dirty = !0
                }
            },
            zoomY: {
                get: function() {
                    return this._zoomY
                },
                set: function(t) {
                    this._zoomY = t,
                    this.dirty = !0
                }
            },
            rotation: {
                get: function() {
                    return this._rotation
                },
                set: function(t) {
                    this._rotation = t,
                    this.dirty = !0
                }
            },
            centerX: {
                get: function() {
                    return this.x + .5 * this.width
                }
            },
            centerY: {
                get: function() {
                    return this.y + .5 * this.height
                }
            },
            displayWidth: {
                get: function() {
                    return this.width / this.zoomX
                }
            },
            displayHeight: {
                get: function() {
                    return this.height / this.zoomY
                }
            }
        });
        t.exports = c
    }
    , function(t, e, i) {
        var n = i(334)
          , s = i(335)
          , r = i(336)
          , o = i(337)
          , a = i(338)
          , h = i(339)
          , l = i(340)
          , u = i(341)
          , c = i(342)
          , d = i(343)
          , p = i(344)
          , f = i(345);
        t.exports = {
            Power0: l,
            Power1: u.Out,
            Power2: o.Out,
            Power3: c.Out,
            Power4: d.Out,
            Linear: l,
            Quad: u.Out,
            Cubic: o.Out,
            Quart: c.Out,
            Quint: d.Out,
            Sine: p.Out,
            Expo: h.Out,
            Circ: r.Out,
            Elastic: a.Out,
            Back: n.Out,
            Bounce: s.Out,
            Stepped: f,
            "Quad.easeIn": u.In,
            "Cubic.easeIn": o.In,
            "Quart.easeIn": c.In,
            "Quint.easeIn": d.In,
            "Sine.easeIn": p.In,
            "Expo.easeIn": h.In,
            "Circ.easeIn": r.In,
            "Elastic.easeIn": a.In,
            "Back.easeIn": n.In,
            "Bounce.easeIn": s.In,
            "Quad.easeOut": u.Out,
            "Cubic.easeOut": o.Out,
            "Quart.easeOut": c.Out,
            "Quint.easeOut": d.Out,
            "Sine.easeOut": p.Out,
            "Expo.easeOut": h.Out,
            "Circ.easeOut": r.Out,
            "Elastic.easeOut": a.Out,
            "Back.easeOut": n.Out,
            "Bounce.easeOut": s.Out,
            "Quad.easeInOut": u.InOut,
            "Cubic.easeInOut": o.InOut,
            "Quart.easeInOut": c.InOut,
            "Quint.easeInOut": d.InOut,
            "Sine.easeInOut": p.InOut,
            "Expo.easeInOut": h.InOut,
            "Circ.easeInOut": r.InOut,
            "Elastic.easeInOut": a.InOut,
            "Back.easeInOut": n.InOut,
            "Bounce.easeInOut": s.InOut
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            return (e - t) * i + t
        }
    }
    , function(t, e, i) {
        var n, s = i(105), r = {
            chrome: !1,
            chromeVersion: 0,
            edge: !1,
            firefox: !1,
            firefoxVersion: 0,
            ie: !1,
            ieVersion: 0,
            mobileSafari: !1,
            opera: !1,
            safari: !1,
            safariVersion: 0,
            silk: !1,
            trident: !1,
            tridentVersion: 0
        };
        t.exports = (n = navigator.userAgent,
        /Edge\/\d+/.test(n) ? r.edge = !0 : /Chrome\/(\d+)/.test(n) && !s.windowsPhone ? (r.chrome = !0,
        r.chromeVersion = parseInt(RegExp.$1, 10)) : /Firefox\D+(\d+)/.test(n) ? (r.firefox = !0,
        r.firefoxVersion = parseInt(RegExp.$1, 10)) : /AppleWebKit/.test(n) && s.iOS ? r.mobileSafari = !0 : /MSIE (\d+\.\d+);/.test(n) ? (r.ie = !0,
        r.ieVersion = parseInt(RegExp.$1, 10)) : /Opera/.test(n) ? r.opera = !0 : /Safari/.test(n) && !s.windowsPhone ? r.safari = !0 : /Trident\/(\d+\.\d+)(.*)rv:(\d+\.\d+)/.test(n) && (r.ie = !0,
        r.trident = !0,
        r.tridentVersion = parseInt(RegExp.$1, 10),
        r.ieVersion = parseInt(RegExp.$3, 10)),
        /Silk/.test(n) && (r.silk = !0),
        r)
    }
    , function(t, e) {
        t.exports = function(t, e) {
            return Math.random() * (e - t) + t
        }
    }
    , function(t, e) {
        t.exports = function(t, e) {
            return 0 < t && 0 == (t & t - 1) && 0 < e && 0 == (e & e - 1)
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i, n) {
            return void 0 === i && (i = 0),
            0 === e ? t : (t -= i,
            t = e * Math.ceil(t / e),
            n ? (i + t) / e : i + t)
        }
    }
    , function(t, e, i) {
        var n = new (i(0))({
            initialize: function(t, e, i, n) {
                this.x = 0,
                this.y = 0,
                this.z = 0,
                this.w = 0,
                "object" == typeof t ? (this.x = t.x || 0,
                this.y = t.y || 0,
                this.z = t.z || 0,
                this.w = t.w || 0) : (this.x = t || 0,
                this.y = e || 0,
                this.z = i || 0,
                this.w = n || 0)
            },
            clone: function() {
                return new n(this.x,this.y,this.z,this.w)
            },
            copy: function(t) {
                return this.x = t.x,
                this.y = t.y,
                this.z = t.z || 0,
                this.w = t.w || 0,
                this
            },
            equals: function(t) {
                return this.x === t.x && this.y === t.y && this.z === t.z && this.w === t.w
            },
            set: function(t, e, i, n) {
                return "object" == typeof t ? (this.x = t.x || 0,
                this.y = t.y || 0,
                this.z = t.z || 0,
                this.w = t.w || 0) : (this.x = t || 0,
                this.y = e || 0,
                this.z = i || 0,
                this.w = n || 0),
                this
            },
            add: function(t) {
                return this.x += t.x,
                this.y += t.y,
                this.z += t.z || 0,
                this.w += t.w || 0,
                this
            },
            subtract: function(t) {
                return this.x -= t.x,
                this.y -= t.y,
                this.z -= t.z || 0,
                this.w -= t.w || 0,
                this
            },
            scale: function(t) {
                return this.x *= t,
                this.y *= t,
                this.z *= t,
                this.w *= t,
                this
            },
            length: function() {
                var t = this.x
                  , e = this.y
                  , i = this.z
                  , n = this.w;
                return Math.sqrt(t * t + e * e + i * i + n * n)
            },
            lengthSq: function() {
                var t = this.x
                  , e = this.y
                  , i = this.z
                  , n = this.w;
                return t * t + e * e + i * i + n * n
            },
            normalize: function() {
                var t = this.x
                  , e = this.y
                  , i = this.z
                  , n = this.w
                  , s = t * t + e * e + i * i + n * n;
                return 0 < s && (s = 1 / Math.sqrt(s),
                this.x = t * s,
                this.y = e * s,
                this.z = i * s,
                this.w = n * s),
                this
            },
            dot: function(t) {
                return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w
            },
            lerp: function(t, e) {
                void 0 === e && (e = 0);
                var i = this.x
                  , n = this.y
                  , s = this.z
                  , r = this.w;
                return this.x = i + e * (t.x - i),
                this.y = n + e * (t.y - n),
                this.z = s + e * (t.z - s),
                this.w = r + e * (t.w - r),
                this
            },
            multiply: function(t) {
                return this.x *= t.x,
                this.y *= t.y,
                this.z *= t.z || 1,
                this.w *= t.w || 1,
                this
            },
            divide: function(t) {
                return this.x /= t.x,
                this.y /= t.y,
                this.z /= t.z || 1,
                this.w /= t.w || 1,
                this
            },
            distance: function(t) {
                var e = t.x - this.x
                  , i = t.y - this.y
                  , n = t.z - this.z || 0
                  , s = t.w - this.w || 0;
                return Math.sqrt(e * e + i * i + n * n + s * s)
            },
            distanceSq: function(t) {
                var e = t.x - this.x
                  , i = t.y - this.y
                  , n = t.z - this.z || 0
                  , s = t.w - this.w || 0;
                return e * e + i * i + n * n + s * s
            },
            negate: function() {
                return this.x = -this.x,
                this.y = -this.y,
                this.z = -this.z,
                this.w = -this.w,
                this
            },
            transformMat4: function(t) {
                var e = this.x
                  , i = this.y
                  , n = this.z
                  , s = this.w
                  , r = t.val;
                return this.x = r[0] * e + r[4] * i + r[8] * n + r[12] * s,
                this.y = r[1] * e + r[5] * i + r[9] * n + r[13] * s,
                this.z = r[2] * e + r[6] * i + r[10] * n + r[14] * s,
                this.w = r[3] * e + r[7] * i + r[11] * n + r[15] * s,
                this
            },
            transformQuat: function(t) {
                var e = this.x
                  , i = this.y
                  , n = this.z
                  , s = t.x
                  , r = t.y
                  , o = t.z
                  , a = t.w
                  , h = a * e + r * n - o * i
                  , l = a * i + o * e - s * n
                  , u = a * n + s * i - r * e
                  , c = -s * e - r * i - o * n;
                return this.x = h * a + c * -s + l * -o - u * -r,
                this.y = l * a + c * -r + u * -s - h * -o,
                this.z = u * a + c * -o + h * -r - l * -s,
                this
            },
            reset: function() {
                return this.x = 0,
                this.y = 0,
                this.z = 0,
                this.w = 0,
                this
            }
        });
        n.prototype.sub = n.prototype.subtract,
        n.prototype.mul = n.prototype.multiply,
        n.prototype.div = n.prototype.divide,
        n.prototype.dist = n.prototype.distance,
        n.prototype.distSq = n.prototype.distanceSq,
        n.prototype.len = n.prototype.length,
        n.prototype.lenSq = n.prototype.lengthSq,
        t.exports = n
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(91)
          , r = new n({
            initialize: function(t, e, i, n, s, r, o) {
                void 0 === n && (n = 1),
                void 0 === s && (s = 0),
                void 0 === r && (r = !0),
                void 0 === o && (o = !1),
                this.renderer = t,
                this.framebuffer = null,
                this.texture = null,
                this.width = 0,
                this.height = 0,
                this.scale = n,
                this.minFilter = s,
                this.autoClear = r,
                this.autoResize = !1,
                this.resize(e, i),
                o && this.setAutoResize(!0)
            },
            setAutoResize: function(t) {
                return t && !this.autoResize ? (this.renderer.on(s.RESIZE, this.resize, this),
                this.autoResize = !0) : !t && this.autoResize && (this.renderer.off(s.RESIZE, this.resize, this),
                this.autoResize = !1),
                this
            },
            resize: function(t, e) {
                var i, n = t * this.scale, s = e * this.scale;
                return n === this.width && s === this.height || ((i = this.renderer).deleteFramebuffer(this.framebuffer),
                i.deleteTexture(this.texture),
                t *= this.scale,
                e *= this.scale,
                (t = Math.round(t)) <= 0 && (t = 1),
                (e = Math.round(e)) <= 0 && (e = 1),
                this.texture = i.createTextureFromSource(null, t, e, this.minFilter),
                this.framebuffer = i.createFramebuffer(t, e, this.texture, !1),
                this.width = t,
                this.height = e),
                this
            },
            bind: function(t, e, i) {
                var n;
                void 0 === t && (t = !1),
                t && this.renderer.flush(),
                e && i && this.resize(e, i),
                this.renderer.pushFramebuffer(this.framebuffer, !1, !1, !1),
                t && this.adjustViewport(),
                this.autoClear && ((n = this.renderer.gl).clearColor(0, 0, 0, 0),
                n.clear(n.COLOR_BUFFER_BIT))
            },
            adjustViewport: function() {
                var t = this.renderer.gl;
                t.viewport(0, 0, this.width, this.height),
                t.disable(t.SCISSOR_TEST)
            },
            clear: function() {
                var t = this.renderer
                  , e = t.gl;
                t.pushFramebuffer(this.framebuffer),
                e.disable(e.SCISSOR_TEST),
                e.clearColor(0, 0, 0, 0),
                e.clear(e.COLOR_BUFFER_BIT),
                t.popFramebuffer(),
                t.resetScissor()
            },
            unbind: function(t) {
                void 0 === t && (t = !1);
                var e = this.renderer;
                return t && e.flush(),
                e.popFramebuffer()
            },
            destroy: function() {
                var t = this.renderer;
                t.deleteFramebuffer(this.framebuffer),
                t.deleteTexture(this.texture),
                t.off(s.RESIZE, this.resize, this),
                this.renderer = null,
                this.framebuffer = null,
                this.texture = null
            }
        });
        t.exports = r
    }
    , function(t, e) {
        t.exports = function(t, e) {
            var i;
            if (e)
                "string" == typeof e ? i = document.getElementById(e) : "object" == typeof e && 1 === e.nodeType && (i = e);
            else if (t.parentElement || null === e)
                return t;
            return (i = i || document.body).appendChild(t),
            t
        }
    }
    , function(t, e) {
        t.exports = {
            BACKSPACE: 8,
            TAB: 9,
            ENTER: 13,
            SHIFT: 16,
            CTRL: 17,
            ALT: 18,
            PAUSE: 19,
            CAPS_LOCK: 20,
            ESC: 27,
            SPACE: 32,
            PAGE_UP: 33,
            PAGE_DOWN: 34,
            END: 35,
            HOME: 36,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40,
            PRINT_SCREEN: 42,
            INSERT: 45,
            DELETE: 46,
            ZERO: 48,
            ONE: 49,
            TWO: 50,
            THREE: 51,
            FOUR: 52,
            FIVE: 53,
            SIX: 54,
            SEVEN: 55,
            EIGHT: 56,
            NINE: 57,
            NUMPAD_ZERO: 96,
            NUMPAD_ONE: 97,
            NUMPAD_TWO: 98,
            NUMPAD_THREE: 99,
            NUMPAD_FOUR: 100,
            NUMPAD_FIVE: 101,
            NUMPAD_SIX: 102,
            NUMPAD_SEVEN: 103,
            NUMPAD_EIGHT: 104,
            NUMPAD_NINE: 105,
            NUMPAD_ADD: 107,
            NUMPAD_SUBTRACT: 109,
            A: 65,
            B: 66,
            C: 67,
            D: 68,
            E: 69,
            F: 70,
            G: 71,
            H: 72,
            I: 73,
            J: 74,
            K: 75,
            L: 76,
            M: 77,
            N: 78,
            O: 79,
            P: 80,
            Q: 81,
            R: 82,
            S: 83,
            T: 84,
            U: 85,
            V: 86,
            W: 87,
            X: 88,
            Y: 89,
            Z: 90,
            F1: 112,
            F2: 113,
            F3: 114,
            F4: 115,
            F5: 116,
            F6: 117,
            F7: 118,
            F8: 119,
            F9: 120,
            F10: 121,
            F11: 122,
            F12: 123,
            SEMICOLON: 186,
            PLUS: 187,
            COMMA: 188,
            MINUS: 189,
            PERIOD: 190,
            FORWARD_SLASH: 191,
            BACK_SLASH: 220,
            QUOTES: 222,
            BACKTICK: 192,
            OPEN_BRACKET: 219,
            CLOSED_BRACKET: 221,
            SEMICOLON_FIREFOX: 59,
            COLON: 58,
            COMMA_FIREFOX_WINDOWS: 60,
            COMMA_FIREFOX: 62,
            BRACKET_RIGHT_FIREFOX: 174,
            BRACKET_LEFT_FIREFOX: 175
        }
    }
    , function(t, e) {
        t.exports = {
            PENDING: 0,
            INIT: 1,
            START: 2,
            LOADING: 3,
            CREATING: 4,
            RUNNING: 5,
            PAUSED: 6,
            SLEEPING: 7,
            SHUTDOWN: 8,
            DESTROYED: 9
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , o = i(77)
          , s = i(9)
          , r = i(70)
          , a = i(22)
          , h = i(1)
          , l = i(207)
          , u = i(428)
          , c = new n({
            Extends: s,
            initialize: function(t) {
                s.call(this),
                this.game = t,
                this.jsonCache = t.cache.json,
                this.sounds = [],
                this.mute = !1,
                this.volume = 1,
                this.pauseOnBlur = !0,
                this._rate = 1,
                this._detune = 0,
                this.locked = this.locked || !1,
                this.unlocked = !1,
                t.events.on(a.BLUR, this.onGameBlur, this),
                t.events.on(a.FOCUS, this.onGameFocus, this),
                t.events.on(a.PRE_STEP, this.update, this),
                t.events.once(a.DESTROY, this.destroy, this)
            },
            add: h,
            addAudioSprite: function(t, e) {
                void 0 === e && (e = {});
                var i, n, s = this.add(t, e);
                for (var r in s.spritemap = this.jsonCache.get(t).spritemap,
                s.spritemap)
                    s.spritemap.hasOwnProperty(r) && (i = o(e),
                    n = s.spritemap[r],
                    i.loop = !!n.hasOwnProperty("loop") && n.loop,
                    s.addMarker({
                        name: r,
                        start: n.start,
                        duration: n.end - n.start,
                        config: i
                    }));
                return s
            },
            get: function(t) {
                return u(this.sounds, "key", t)
            },
            getAll: function(t) {
                return l(this.sounds, "key", t)
            },
            play: function(t, e) {
                var i = this.add(t);
                return i.once(r.COMPLETE, i.destroy, i),
                e ? e.name ? (i.addMarker(e),
                i.play(e.name)) : i.play(e) : i.play()
            },
            playAudioSprite: function(t, e, i) {
                var n = this.addAudioSprite(t);
                return n.once(r.COMPLETE, n.destroy, n),
                n.play(e, i)
            },
            remove: function(t) {
                var e = this.sounds.indexOf(t);
                return -1 !== e && (t.destroy(),
                this.sounds.splice(e, 1),
                !0)
            },
            removeAll: function() {
                this.sounds.forEach(function(t) {
                    t.destroy()
                }),
                this.sounds.length = 0
            },
            removeByKey: function(t) {
                for (var e = 0, i = this.sounds.length - 1; 0 <= i; i--) {
                    var n = this.sounds[i];
                    n.key === t && (n.destroy(),
                    this.sounds.splice(i, 1),
                    e++)
                }
                return e
            },
            pauseAll: function() {
                this.forEachActiveSound(function(t) {
                    t.pause()
                }),
                this.emit(r.PAUSE_ALL, this)
            },
            resumeAll: function() {
                this.forEachActiveSound(function(t) {
                    t.resume()
                }),
                this.emit(r.RESUME_ALL, this)
            },
            stopAll: function() {
                this.forEachActiveSound(function(t) {
                    t.stop()
                }),
                this.emit(r.STOP_ALL, this)
            },
            stopByKey: function(t) {
                var e = 0;
                return this.getAll(t).forEach(function(t) {
                    t.stop() && e++
                }),
                e
            },
            unlock: h,
            onBlur: h,
            onFocus: h,
            onGameBlur: function() {
                this.pauseOnBlur && this.onBlur()
            },
            onGameFocus: function() {
                this.pauseOnBlur && this.onFocus()
            },
            update: function(e, i) {
                this.unlocked && (this.unlocked = !1,
                this.locked = !1,
                this.emit(r.UNLOCKED, this));
                for (var t = this.sounds.length - 1; 0 <= t; t--)
                    this.sounds[t].pendingRemove && this.sounds.splice(t, 1);
                this.sounds.forEach(function(t) {
                    t.update(e, i)
                })
            },
            destroy: function() {
                this.game.events.off(a.BLUR, this.onGameBlur, this),
                this.game.events.off(a.FOCUS, this.onGameFocus, this),
                this.game.events.off(a.PRE_STEP, this.update, this),
                this.removeAllListeners(),
                this.removeAll(),
                this.sounds.length = 0,
                this.sounds = null,
                this.game = null
            },
            forEachActiveSound: function(i, n) {
                var s = this;
                this.sounds.forEach(function(t, e) {
                    t && !t.pendingRemove && i.call(n || s, t, e, s.sounds)
                })
            },
            setRate: function(t) {
                return this.rate = t,
                this
            },
            rate: {
                get: function() {
                    return this._rate
                },
                set: function(t) {
                    this._rate = t,
                    this.forEachActiveSound(function(t) {
                        t.calculateRate()
                    }),
                    this.emit(r.GLOBAL_RATE, this, t)
                }
            },
            setDetune: function(t) {
                return this.detune = t,
                this
            },
            detune: {
                get: function() {
                    return this._detune
                },
                set: function(t) {
                    this._detune = t,
                    this.forEachActiveSound(function(t) {
                        t.calculateRate()
                    }),
                    this.emit(r.GLOBAL_DETUNE, this, t)
                }
            }
        });
        t.exports = c
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(9)
          , r = i(70)
          , o = i(17)
          , a = i(1)
          , h = new n({
            Extends: s,
            initialize: function(t, e, i) {
                s.call(this),
                this.manager = t,
                this.key = e,
                this.isPlaying = !1,
                this.isPaused = !1,
                this.totalRate = 1,
                this.duration = this.duration || 0,
                this.totalDuration = this.totalDuration || 0,
                this.config = {
                    mute: !1,
                    volume: 1,
                    rate: 1,
                    detune: 0,
                    seek: 0,
                    loop: !1,
                    delay: 0,
                    pan: 0
                },
                this.currentConfig = this.config,
                this.config = o(this.config, i),
                this.markers = {},
                this.currentMarker = null,
                this.pendingRemove = !1
            },
            addMarker: function(t) {
                return !(!t || !t.name || "string" != typeof t.name || (this.markers[t.name] ? (console.error("addMarker " + t.name + " already exists in Sound"),
                1) : (t = o(!0, {
                    name: "",
                    start: 0,
                    duration: this.totalDuration - (t.start || 0),
                    config: {
                        mute: !1,
                        volume: 1,
                        rate: 1,
                        detune: 0,
                        seek: 0,
                        loop: !1,
                        delay: 0,
                        pan: 0
                    }
                }, t),
                this.markers[t.name] = t,
                0)))
            },
            updateMarker: function(t) {
                return !(!t || !t.name || "string" != typeof t.name || (this.markers[t.name] ? (this.markers[t.name] = o(!0, this.markers[t.name], t),
                0) : (console.warn("Audio Marker: " + t.name + " missing in Sound: " + this.key),
                1)))
            },
            removeMarker: function(t) {
                var e = this.markers[t];
                return e ? (this.markers[t] = null,
                e) : null
            },
            play: function(t, e) {
                if (void 0 === t && (t = ""),
                "object" == typeof t && (e = t,
                t = ""),
                "string" != typeof t)
                    return !1;
                if (t) {
                    if (!this.markers[t])
                        return console.warn("Marker: " + t + " missing in Sound: " + this.key),
                        !1;
                    this.currentMarker = this.markers[t],
                    this.currentConfig = this.currentMarker.config,
                    this.duration = this.currentMarker.duration
                } else
                    this.currentMarker = null,
                    this.currentConfig = this.config,
                    this.duration = this.totalDuration;
                return this.resetConfig(),
                this.currentConfig = o(this.currentConfig, e),
                this.isPlaying = !0,
                !(this.isPaused = !1)
            },
            pause: function() {
                return !(this.isPaused || !this.isPlaying) && (this.isPlaying = !1,
                this.isPaused = !0)
            },
            resume: function() {
                return !(!this.isPaused || this.isPlaying || (this.isPlaying = !0,
                this.isPaused = !1))
            },
            stop: function() {
                return !(!this.isPaused && !this.isPlaying || (this.isPlaying = !1,
                this.isPaused = !1,
                this.resetConfig(),
                0))
            },
            applyConfig: function() {
                this.mute = this.currentConfig.mute,
                this.volume = this.currentConfig.volume,
                this.rate = this.currentConfig.rate,
                this.detune = this.currentConfig.detune,
                this.loop = this.currentConfig.loop,
                this.pan = this.currentConfig.pan
            },
            resetConfig: function() {
                this.currentConfig.seek = 0,
                this.currentConfig.delay = 0
            },
            update: a,
            calculateRate: function() {
                var t = this.currentConfig.detune + this.manager.detune
                  , e = Math.pow(1.0005777895065548, t);
                this.totalRate = this.currentConfig.rate * this.manager.rate * e
            },
            destroy: function() {
                this.pendingRemove || (this.emit(r.DESTROY, this),
                this.pendingRemove = !0,
                this.manager = null,
                this.key = "",
                this.removeAllListeners(),
                this.isPlaying = !1,
                this.isPaused = !1,
                this.config = null,
                this.currentConfig = null,
                this.markers = null,
                this.currentMarker = null)
            }
        });
        t.exports = h
    }
    , function(t, e, i) {
        var n = i(209)
          , s = i(435);
        t.exports = function(t, e) {
            if (void 0 === e && (e = 90),
            !n(t))
                return null;
            if ("string" != typeof e && (e = (e % 360 + 360) % 360),
            90 === e || -270 === e || "rotateLeft" === e)
                (t = s(t)).reverse();
            else if (-90 === e || 270 === e || "rotateRight" === e)
                t.reverse(),
                t = s(t);
            else if (180 === Math.abs(e) || "rotate180" === e) {
                for (var i = 0; i < t.length; i++)
                    t[i].reverse();
                t.reverse()
            }
            return t
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , p = i(18)
          , s = i(11)
          , h = i(15)
          , l = i(1043)
          , r = i(1044)
          , o = i(212)
          , u = i(10)
          , a = i(1045)
          , c = new n({
            Extends: h,
            Mixins: [s.Alpha, s.BlendMode, s.Depth, s.Mask, s.Origin, s.Pipeline, s.ScrollFactor, s.Texture, s.Tint, s.Transform, s.Visible, a],
            initialize: function(t, e, i, n, s, r, o) {
                void 0 === s && (s = ""),
                void 0 === o && (o = 0),
                h.call(this, t, "BitmapText"),
                this.font = n;
                var a = this.scene.sys.cache.bitmapFont.get(n);
                a || console.warn("Invalid BitmapText key: " + n),
                this.fontData = a.data,
                this._text = "",
                this._fontSize = r || this.fontData.size,
                this._letterSpacing = 0,
                this._align = o,
                this._bounds = l(),
                this._dirty = !0,
                this._maxWidth = 0,
                this.wordWrapCharCode = 32,
                this.charColors = [],
                this.dropShadowX = 0,
                this.dropShadowY = 0,
                this.dropShadowColor = 0,
                this.dropShadowAlpha = .5,
                this.fromAtlas = a.fromAtlas,
                this.setTexture(a.texture, a.frame),
                this.setPosition(e, i),
                this.setOrigin(0, 0),
                this.initPipeline(),
                this.setText(s)
            },
            setLeftAlign: function() {
                return this._align = c.ALIGN_LEFT,
                this._dirty = !0,
                this
            },
            setCenterAlign: function() {
                return this._align = c.ALIGN_CENTER,
                this._dirty = !0,
                this
            },
            setRightAlign: function() {
                return this._align = c.ALIGN_RIGHT,
                this._dirty = !0,
                this
            },
            setFontSize: function(t) {
                return this._fontSize = t,
                this._dirty = !0,
                this
            },
            setLetterSpacing: function(t) {
                return void 0 === t && (t = 0),
                this._letterSpacing = t,
                this._dirty = !0,
                this
            },
            setText: function(t) {
                return t || 0 === t || (t = ""),
                Array.isArray(t) && (t = t.join("\n")),
                t !== this.text && (this._text = t.toString(),
                this._dirty = !0,
                this.updateDisplayOrigin()),
                this
            },
            setDropShadow: function(t, e, i, n) {
                return void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                void 0 === n && (n = .5),
                this.dropShadowX = t,
                this.dropShadowY = e,
                this.dropShadowColor = i,
                this.dropShadowAlpha = n,
                this
            },
            setCharacterTint: function(t, e, i, n, s, r, o) {
                void 0 === t && (t = 0),
                void 0 === e && (e = 1),
                void 0 === i && (i = !1),
                void 0 === n && (n = -1),
                void 0 === s && (o = r = s = n);
                var a = this.text.length;
                -1 === e && (e = a),
                t < 0 && (t = a + t),
                t = p(t, 0, a - 1);
                for (var h = p(t + e, t, a), l = this.charColors, u = t; u < h; u++) {
                    var c, d = l[u];
                    -1 === n ? l[u] = null : (c = i ? 1 : 0,
                    d ? (d.tintEffect = c,
                    d.tintTL = n,
                    d.tintTR = s,
                    d.tintBL = r,
                    d.tintBR = o) : l[u] = {
                        tintEffect: c,
                        tintTL: n,
                        tintTR: s,
                        tintBL: r,
                        tintBR: o
                    })
                }
                return this
            },
            setWordTint: function(t, e, i, n, s, r, o) {
                void 0 === e && (e = 1);
                for (var a = this.getTextBounds().words, h = "number" == typeof t, l = 0, u = 0; u < a.length; u++) {
                    var c = a[u];
                    if ((h && u === t || !h && c.word === t) && (this.setCharacterTint(c.i, c.word.length, i, n, s, r, o),
                    ++l === e))
                        return this
                }
                return this
            },
            getTextBounds: function(t) {
                var e = this._bounds;
                return (this._dirty || t || this.scaleX !== e.scaleX || this.scaleY !== e.scaleY) && (l(this, t, !0, e),
                this._dirty = !1),
                e
            },
            getCharacterAt: function(t, e, i) {
                for (var n = this.getLocalPoint(t, e, null, i), s = this.getTextBounds().characters, r = new u, o = 0; o < s.length; o++) {
                    var a = s[o];
                    if (r.setTo(a.x, a.t, a.r - a.x, a.b),
                    r.contains(n.x, n.y))
                        return a
                }
                return null
            },
            updateDisplayOrigin: function() {
                return this._dirty = !0,
                this.getTextBounds(!1),
                this
            },
            setFont: function(t, e, i) {
                var n;
                return void 0 === e && (e = this._fontSize),
                void 0 === i && (i = this._align),
                t === this.font || (n = this.scene.sys.cache.bitmapFont.get(t)) && (this.font = t,
                this.fontData = n.data,
                this._fontSize = e,
                this._align = i,
                this.fromAtlas = !0 === n.fromAtlas,
                this.setTexture(n.texture, n.frame),
                l(this, !1, !0, this._bounds)),
                this
            },
            setMaxWidth: function(t, e) {
                return this._maxWidth = t,
                this._dirty = !0,
                void 0 !== e && (this.wordWrapCharCode = e),
                this
            },
            align: {
                set: function(t) {
                    this._align = t,
                    this._dirty = !0
                },
                get: function() {
                    return this._align
                }
            },
            text: {
                set: function(t) {
                    this.setText(t)
                },
                get: function() {
                    return this._text
                }
            },
            fontSize: {
                set: function(t) {
                    this._fontSize = t,
                    this._dirty = !0
                },
                get: function() {
                    return this._fontSize
                }
            },
            letterSpacing: {
                set: function(t) {
                    this._letterSpacing = t,
                    this._dirty = !0
                },
                get: function() {
                    return this._letterSpacing
                }
            },
            maxWidth: {
                set: function(t) {
                    this._maxWidth = t,
                    this._dirty = !0
                },
                get: function() {
                    return this._maxWidth
                }
            },
            width: {
                get: function() {
                    return this.getTextBounds(!1),
                    this._bounds.global.width
                }
            },
            height: {
                get: function() {
                    return this.getTextBounds(!1),
                    this._bounds.global.height
                }
            },
            toJSON: function() {
                var t = s.ToJSON(this)
                  , e = {
                    font: this.font,
                    text: this.text,
                    fontSize: this.fontSize,
                    letterSpacing: this.letterSpacing,
                    align: this.align
                };
                return t.data = e,
                t
            },
            preDestroy: function() {
                this.charColors.length = 0,
                this._bounds = null,
                this.fontData = null
            }
        });
        c.ALIGN_LEFT = 0,
        c.ALIGN_CENTER = 1,
        c.ALIGN_RIGHT = 2,
        c.ParseFromAtlas = r,
        c.ParseXMLBitmapFont = o,
        t.exports = c
    }
    , function(t, e, i) {
        var n = new (i(0))({
            initialize: function(t) {
                if (this.entries = [],
                Array.isArray(t))
                    for (var e = 0; e < t.length; e++)
                        this.set(t[e])
            },
            set: function(t) {
                return -1 === this.entries.indexOf(t) && this.entries.push(t),
                this
            },
            get: function(t, e) {
                for (var i = 0; i < this.entries.length; i++) {
                    var n = this.entries[i];
                    if (n[t] === e)
                        return n
                }
            },
            getArray: function() {
                return this.entries.slice(0)
            },
            delete: function(t) {
                var e = this.entries.indexOf(t);
                return -1 < e && this.entries.splice(e, 1),
                this
            },
            dump: function() {
                console.group("Set");
                for (var t = 0; t < this.entries.length; t++) {
                    var e = this.entries[t];
                    console.log(e)
                }
                console.groupEnd()
            },
            each: function(t, e) {
                var i, n = this.entries.slice(), s = n.length;
                if (e)
                    for (i = 0; i < s && !1 !== t.call(e, n[i], i); i++)
                        ;
                else
                    for (i = 0; i < s && !1 !== t(n[i], i); i++)
                        ;
                return this
            },
            iterate: function(t, e) {
                var i, n = this.entries.length;
                if (e)
                    for (i = 0; i < n && !1 !== t.call(e, this.entries[i], i); i++)
                        ;
                else
                    for (i = 0; i < n && !1 !== t(this.entries[i], i); i++)
                        ;
                return this
            },
            iterateLocal: function(t) {
                for (var e = [], i = 1; i < arguments.length; i++)
                    e.push(arguments[i]);
                var n = this.entries.length;
                for (i = 0; i < n; i++) {
                    var s = this.entries[i];
                    s[t].apply(s, e)
                }
                return this
            },
            clear: function() {
                return this.entries.length = 0,
                this
            },
            contains: function(t) {
                return -1 < this.entries.indexOf(t)
            },
            union: function(t) {
                var e = new n;
                return t.entries.forEach(function(t) {
                    e.set(t)
                }),
                this.entries.forEach(function(t) {
                    e.set(t)
                }),
                e
            },
            intersect: function(e) {
                var i = new n;
                return this.entries.forEach(function(t) {
                    e.contains(t) && i.set(t)
                }),
                i
            },
            difference: function(e) {
                var i = new n;
                return this.entries.forEach(function(t) {
                    e.contains(t) || i.set(t)
                }),
                i
            },
            size: {
                get: function() {
                    return this.entries.length
                },
                set: function(t) {
                    return t < this.entries.length ? this.entries.length = t : this.entries.length
                }
            }
        });
        t.exports = n
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(11)
          , a = i(15)
          , h = i(189)
          , l = i(92)
          , r = i(1182)
          , o = new n({
            Extends: a,
            Mixins: [s.AlphaSingle, s.BlendMode, s.Depth, s.GetBounds, s.Mask, s.Pipeline, s.ScrollFactor, s.Transform, s.Visible, r],
            initialize: function(t, e, i, n, s, r, o) {
                void 0 === n && (n = 16777215),
                void 0 === s && (s = 128),
                void 0 === r && (r = 1),
                void 0 === o && (o = .1),
                a.call(this, t, "PointLight"),
                this.initPipeline(l.POINTLIGHT_PIPELINE),
                this.setPosition(e, i),
                this.color = h(n),
                this.intensity = r,
                this.attenuation = o,
                this.width = 2 * s,
                this.height = 2 * s,
                this._radius = s
            },
            radius: {
                get: function() {
                    return this._radius
                },
                set: function(t) {
                    this._radius = t,
                    this.width = 2 * t,
                    this.height = 2 * t
                }
            },
            originX: {
                get: function() {
                    return .5
                }
            },
            originY: {
                get: function() {
                    return .5
                }
            },
            displayOriginX: {
                get: function() {
                    return this._radius
                }
            },
            displayOriginY: {
                get: function() {
                    return this._radius
                }
            }
        });
        t.exports = o
    }
    , function(t, e) {
        t.exports = function(t, e) {
            var i = e.width / 2
              , n = e.height / 2
              , s = Math.abs(t.x - e.x - i)
              , r = Math.abs(t.y - e.y - n)
              , o = i + t.radius
              , a = n + t.radius;
            if (o < s || a < r)
                return !1;
            if (s <= i || r <= n)
                return !0;
            var h = s - i
              , l = r - n;
            return h * h + l * l <= t.radius * t.radius
        }
    }
    , function(t, e) {
        t.exports = function(t, e) {
            return !(t.width <= 0 || t.height <= 0 || e.width <= 0 || e.height <= 0 || t.right < e.x || t.bottom < e.y || t.x > e.right || t.y > e.bottom)
        }
    }
    , function(t, e, i) {
        var l = i(6)
          , u = {}
          , n = {
            register: function(t, e, i, n, s) {
                u[t] = {
                    plugin: e,
                    mapping: i,
                    settingsKey: n,
                    configKey: s
                }
            },
            getPlugin: function(t) {
                return u[t]
            },
            install: function(t) {
                var e = t.scene.sys
                  , i = e.settings.input
                  , n = e.game.config;
                for (var s in u) {
                    var r = u[s].plugin
                      , o = u[s].mapping
                      , a = u[s].settingsKey
                      , h = u[s].configKey;
                    l(i, a, n[h]) && (t[o] = new r(t))
                }
            },
            remove: function(t) {
                u.hasOwnProperty(t) && delete u[t]
            }
        };
        t.exports = n
    }
    , function(t, e, i) {
        t.exports = {
            ANY_KEY_DOWN: i(1323),
            ANY_KEY_UP: i(1324),
            COMBO_MATCH: i(1325),
            DOWN: i(1326),
            KEY_DOWN: i(1327),
            KEY_UP: i(1328),
            UP: i(1329)
        }
    }
    , function(t, e) {
        t.exports = function(t, e) {
            return !!t.url && (t.url.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/) ? t.url : e + t.url)
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i, n, s, r) {
            return void 0 === t && (t = ""),
            void 0 === e && (e = !0),
            void 0 === i && (i = ""),
            void 0 === n && (n = ""),
            void 0 === s && (s = 0),
            void 0 === r && (r = !1),
            {
                responseType: t,
                async: e,
                user: i,
                password: n,
                timeout: s,
                headers: void 0,
                header: void 0,
                headerValue: void 0,
                requestedWith: !1,
                overrideMimeType: void 0,
                withCredentials: r
            }
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(243)
          , r = i(73)
          , o = new n({
            Extends: r,
            Mixins: [s.Acceleration, s.Angular, s.Bounce, s.Debug, s.Drag, s.Enable, s.Friction, s.Gravity, s.Immovable, s.Mass, s.Pushable, s.Size, s.Velocity],
            initialize: function(t, e, i, n, s) {
                r.call(this, t, e, i, n, s),
                this.body = null
            }
        });
        t.exports = o
    }
    , function(t, e, i) {
        var r = i(119);
        t.exports = function(t, e, i, n) {
            if (void 0 === i && (i = !1),
            r(t, e, n)) {
                var s = n.data[e][t] || null;
                return s && (-1 !== s.index || i) ? s : null
            }
            return null
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i, n) {
            var s, r, o, a = t.data, h = t.width, l = t.height, u = t.tilemapLayer, c = Math.max(0, e.left), d = Math.min(h, e.right), p = Math.max(0, e.top), f = Math.min(l, e.bottom);
            if (0 === i)
                for (r = p; r < f; r++)
                    for (s = c; a[r] && s < d; s++)
                        (o = a[r][s]) && -1 !== o.index && o.visible && 0 !== o.alpha && n.push(o);
            else if (1 === i)
                for (r = p; r < f; r++)
                    for (s = d; a[r] && c <= s; s--)
                        (o = a[r][s]) && -1 !== o.index && o.visible && 0 !== o.alpha && n.push(o);
            else if (2 === i)
                for (r = f; p <= r; r--)
                    for (s = c; a[r] && s < d; s++)
                        (o = a[r][s]) && -1 !== o.index && o.visible && 0 !== o.alpha && n.push(o);
            else if (3 === i)
                for (r = f; p <= r; r--)
                    for (s = d; a[r] && c <= s; s--)
                        (o = a[r][s]) && -1 !== o.index && o.visible && 0 !== o.alpha && n.push(o);
            return u.tilesDrawn = n.length,
            u.tilesTotal = h * l,
            n
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            var n = i.collideIndexes.indexOf(t);
            e && -1 === n ? i.collideIndexes.push(t) : e || -1 === n || i.collideIndexes.splice(n, 1)
        }
    }
    , function(t, e, i) {
        var r = i(2);
        t.exports = function(t, e, i) {
            if (!e)
                return {
                    i: 0,
                    layers: t.layers,
                    name: "",
                    opacity: 1,
                    visible: !0,
                    x: 0,
                    y: 0
                };
            var n = e.x + r(e, "startx", 0) * t.tilewidth + r(e, "offsetx", 0)
              , s = e.y + r(e, "starty", 0) * t.tileheight + r(e, "offsety", 0);
            return {
                i: 0,
                layers: e.layers,
                name: i.name + e.name + "/",
                opacity: i.opacity * e.opacity,
                visible: i.visible && e.visible,
                x: i.x + n,
                y: i.y + s
            }
        }
    }
    , function(t, e) {
        t.exports = function(o, a, t) {
            return o.hasOwnProperty(a) ? "function" == typeof o[a] ? function(t, e, i, n, s, r) {
                return o[a](t, e, i, n, s, r)
            }
            : function() {
                return o[a]
            }
            : "function" == typeof t ? t : function() {
                return t
            }
        }
    }
    , function(t, e, i) {
        var k = i(265)
          , R = i(13)
          , L = i(99)
          , I = i(80)
          , D = i(162)
          , F = i(583)
          , B = i(263)
          , N = i(6)
          , U = i(264)
          , Y = i(266)
          , X = i(268);
        t.exports = function(t, e, i) {
            void 0 === i && (i = k);
            for (var n = i.targets ? i.targets : B(e), s = F(e), r = D(e, "delay", i.delay), o = D(e, "duration", i.duration), a = N(e, "easeParams", i.easeParams), h = I(N(e, "ease", i.ease), a), l = D(e, "hold", i.hold), u = D(e, "repeat", i.repeat), c = D(e, "repeatDelay", i.repeatDelay), d = L(e, "yoyo", i.yoyo), p = L(e, "flipX", i.flipX), f = L(e, "flipY", i.flipY), g = [], v = 0; v < s.length; v++)
                for (var y = s[v].key, m = s[v].value, x = 0; x < n.length; x++) {
                    var w = U(y, m)
                      , b = X(n[x], x, y, w.getEnd, w.getStart, w.getActive, I(N(m, "ease", h), N(m, "easeParams", a)), D(m, "delay", r), D(m, "duration", o), L(m, "yoyo", d), D(m, "hold", l), D(m, "repeat", u), D(m, "repeatDelay", c), L(m, "flipX", p), L(m, "flipY", f));
                    g.push(b)
                }
            var T = new Y(t,g,n);
            T.offset = R(e, "offset", null),
            T.completeDelay = R(e, "completeDelay", 0),
            T.loop = Math.round(R(e, "loop", 0)),
            T.loopDelay = Math.round(R(e, "loopDelay", 0)),
            T.paused = L(e, "paused", !1),
            T.useFrames = L(e, "useFrames", !1);
            for (var S = N(e, "callbackScope", T), _ = [T, null], E = Y.TYPES, P = 0; P < E.length; P++) {
                var A, M, C = E[P], O = N(e, C, !1);
                O && (A = N(e, C + "Scope", S),
                M = N(e, C + "Params", []),
                T.setCallback(C, O, _.concat(M), A))
            }
            return T
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(102)
          , l = i(2)
          , r = i(132)
          , o = i(185)
          , a = new n({
            initialize: function(t) {
                this.parent = t,
                this.animationManager = t.scene.sys.anims,
                this.animationManager.on(r.REMOVE_ANIMATION, this.globalRemove, this),
                this.textureManager = this.animationManager.textureManager,
                this.anims = null,
                this.isPlaying = !1,
                this.hasStarted = !1,
                this.currentAnim = null,
                this.currentFrame = null,
                this.nextAnim = null,
                this.nextAnimsQueue = [],
                this.timeScale = 1,
                this.frameRate = 0,
                this.duration = 0,
                this.msPerFrame = 0,
                this.skipMissedFrames = !0,
                this.delay = 0,
                this.repeat = 0,
                this.repeatDelay = 0,
                this.yoyo = !1,
                this.showOnStart = !1,
                this.hideOnComplete = !1,
                this.forward = !0,
                this.inReverse = !1,
                this.accumulator = 0,
                this.nextTick = 0,
                this.delayCounter = 0,
                this.repeatCounter = 0,
                this.pendingRepeat = !1,
                this._paused = !1,
                this._wasPlaying = !1,
                this._pendingStop = 0,
                this._pendingStopValue
            },
            chain: function(t) {
                var e = this.parent;
                if (void 0 === t)
                    return this.nextAnimsQueue.length = 0,
                    this.nextAnim = null,
                    e;
                Array.isArray(t) || (t = [t]);
                for (var i = 0; i < t.length; i++) {
                    var n = t[i];
                    null === this.nextAnim ? this.nextAnim = n : this.nextAnimsQueue.push(n)
                }
                return this.parent
            },
            getName: function() {
                return this.currentAnim ? this.currentAnim.key : ""
            },
            getFrameName: function() {
                return this.currentFrame ? this.currentFrame.textureFrame : ""
            },
            load: function(t) {
                this.isPlaying && this.stop();
                var e, i, n, s, r, o = this.animationManager, a = "string" == typeof t ? t : l(t, "key", null), h = this.exists(a) ? this.get(a) : o.get(a);
                return h ? (e = (this.currentAnim = h).getTotalFrames(),
                i = l(t, "frameRate", h.frameRate),
                n = l(t, "duration", h.duration),
                h.calculateDuration(this, e, n, i),
                this.delay = l(t, "delay", h.delay),
                this.repeat = l(t, "repeat", h.repeat),
                this.repeatDelay = l(t, "repeatDelay", h.repeatDelay),
                this.yoyo = l(t, "yoyo", h.yoyo),
                this.showOnStart = l(t, "showOnStart", h.showOnStart),
                this.hideOnComplete = l(t, "hideOnComplete", h.hideOnComplete),
                this.skipMissedFrames = l(t, "skipMissedFrames", h.skipMissedFrames),
                this.timeScale = l(t, "timeScale", this.timeScale),
                (s = l(t, "startFrame", 0)) > h.getTotalFrames() && (s = 0),
                r = h.frames[s],
                0 !== s || this.forward || (r = h.getLastFrame()),
                this.currentFrame = r) : console.warn("Missing animation: " + a),
                this.parent
            },
            pause: function(t) {
                return this._paused || (this._paused = !0,
                this._wasPlaying = this.isPlaying,
                this.isPlaying = !1),
                void 0 !== t && this.setCurrentFrame(t),
                this.parent
            },
            resume: function(t) {
                return this._paused && (this._paused = !1,
                this.isPlaying = this._wasPlaying),
                void 0 !== t && this.setCurrentFrame(t),
                this.parent
            },
            playAfterDelay: function(t, e) {
                var i, n;
                return this.isPlaying ? (i = this.nextAnim,
                n = this.nextAnimsQueue,
                i && n.unshift(i),
                this.nextAnim = t,
                this._pendingStop = 1,
                this._pendingStopValue = e) : (this.delayCounter = e,
                this.play(t, !0)),
                this.parent
            },
            playAfterRepeat: function(t, e) {
                var i, n;
                return void 0 === e && (e = 1),
                this.isPlaying ? (i = this.nextAnim,
                n = this.nextAnimsQueue,
                i && n.unshift(i),
                -1 !== this.repeatCounter && e > this.repeatCounter && (e = this.repeatCounter),
                this.nextAnim = t,
                this._pendingStop = 2,
                this._pendingStopValue = e) : this.play(t),
                this.parent
            },
            play: function(t, e) {
                void 0 === e && (e = !1);
                var i = this.currentAnim
                  , n = this.parent
                  , s = "string" == typeof t ? t : t.key;
                if (e && this.isPlaying && i.key === s)
                    return n;
                if (i && this.isPlaying) {
                    var r = this.animationManager.getMix(i.key, t);
                    if (0 < r)
                        return this.playAfterDelay(t, r)
                }
                return this.forward = !0,
                this.inReverse = !1,
                this._paused = !1,
                this._wasPlaying = !0,
                this.startAnimation(t)
            },
            playReverse: function(t, e) {
                void 0 === e && (e = !1);
                var i = "string" == typeof t ? t : t.key;
                return e && this.isPlaying && this.currentAnim.key === i ? this.parent : (this.forward = !1,
                this.inReverse = !0,
                this._paused = !1,
                this._wasPlaying = !0,
                this.startAnimation(t))
            },
            startAnimation: function(t) {
                this.load(t);
                var e = this.currentAnim
                  , i = this.parent;
                return e && (this.repeatCounter = -1 === this.repeat ? Number.MAX_VALUE : this.repeat,
                e.getFirstTick(this),
                this.isPlaying = !0,
                this.pendingRepeat = !1,
                this.hasStarted = !1,
                this._pendingStop = 0,
                this._pendingStopValue = 0,
                this._paused = !1,
                this.delayCounter += this.delay,
                0 === this.delayCounter && this.handleStart()),
                i
            },
            handleStart: function() {
                this.showOnStart && this.parent.setVisible(!0),
                this.setCurrentFrame(this.currentFrame),
                this.hasStarted = !0,
                this.emitEvents(r.ANIMATION_START)
            },
            handleRepeat: function() {
                this.pendingRepeat = !1,
                this.emitEvents(r.ANIMATION_REPEAT)
            },
            handleStop: function() {
                this._pendingStop = 0,
                this.isPlaying = !1,
                this.emitEvents(r.ANIMATION_STOP)
            },
            handleComplete: function() {
                this._pendingStop = 0,
                this.isPlaying = !1,
                this.hideOnComplete && this.parent.setVisible(!1),
                this.emitEvents(r.ANIMATION_COMPLETE, r.ANIMATION_COMPLETE_KEY)
            },
            emitEvents: function(t, e) {
                var i = this.currentAnim
                  , n = this.currentFrame
                  , s = this.parent
                  , r = n.textureFrame;
                s.emit(t, i, n, s, r),
                e && s.emit(e + i.key, i, n, s, r)
            },
            reverse: function() {
                return this.isPlaying && (this.inReverse = !this.inReverse,
                this.forward = !this.forward),
                this.parent
            },
            getProgress: function() {
                var t = this.currentFrame;
                if (!t)
                    return 0;
                var e = t.progress;
                return this.inReverse && (e *= -1),
                e
            },
            setProgress: function(t) {
                return this.forward || (t = 1 - t),
                this.setCurrentFrame(this.currentAnim.getFrameByProgress(t)),
                this.parent
            },
            setRepeat: function(t) {
                return this.repeatCounter = -1 === t ? Number.MAX_VALUE : t,
                this.parent
            },
            globalRemove: function(t, e) {
                void 0 === e && (e = this.currentAnim),
                this.isPlaying && e.key === this.currentAnim.key && (this.stop(),
                this.setCurrentFrame(this.currentAnim.frames[0]))
            },
            restart: function(t, e) {
                void 0 === t && (t = !1),
                void 0 === e && (e = !1);
                var i = this.currentAnim
                  , n = this.parent;
                return i ? (e && (this.repeatCounter = -1 === this.repeat ? Number.MAX_VALUE : this.repeat),
                i.getFirstTick(this),
                this.emitEvents(r.ANIMATION_RESTART),
                this.isPlaying = !0,
                this.pendingRepeat = !1,
                this.hasStarted = !t,
                this._pendingStop = 0,
                this._pendingStopValue = 0,
                this._paused = !1,
                this.setCurrentFrame(i.frames[0]),
                this.parent) : n
            },
            complete: function() {
                var t;
                return this._pendingStop = 0,
                this.isPlaying = !1,
                this.currentAnim && this.handleComplete(),
                this.nextAnim && (t = this.nextAnim,
                this.nextAnim = 0 < this.nextAnimsQueue.length ? this.nextAnimsQueue.shift() : null,
                this.play(t)),
                this.parent
            },
            stop: function() {
                var t;
                return this._pendingStop = 0,
                this.isPlaying = !1,
                this.currentAnim && this.handleStop(),
                this.nextAnim && (t = this.nextAnim,
                this.nextAnim = this.nextAnimsQueue.shift(),
                this.play(t)),
                this.parent
            },
            stopAfterDelay: function(t) {
                return this._pendingStop = 1,
                this._pendingStopValue = t,
                this.parent
            },
            stopAfterRepeat: function(t) {
                return void 0 === t && (t = 1),
                -1 !== this.repeatCounter && t > this.repeatCounter && (t = this.repeatCounter),
                this._pendingStop = 2,
                this._pendingStopValue = t,
                this.parent
            },
            stopOnFrame: function(t) {
                return this._pendingStop = 3,
                this._pendingStopValue = t,
                this.parent
            },
            getTotalFrames: function() {
                return this.currentAnim ? this.currentAnim.getTotalFrames() : 0
            },
            update: function(t, e) {
                var i = this.currentAnim;
                if (this.isPlaying && i && !i.paused) {
                    if (this.accumulator += e * this.timeScale,
                    1 === this._pendingStop && (this._pendingStopValue -= e,
                    this._pendingStopValue <= 0))
                        return this.stop();
                    if (this.hasStarted) {
                        if (this.accumulator >= this.nextTick && (this.forward ? i.nextFrame(this) : i.previousFrame(this),
                        this.isPlaying && 0 === this._pendingStop && this.skipMissedFrames && this.accumulator > this.nextTick))
                            for (var n = 0; this.forward ? i.nextFrame(this) : i.previousFrame(this),
                            n++,
                            this.isPlaying && this.accumulator > this.nextTick && n < 60; )
                                ;
                    } else
                        this.accumulator >= this.delayCounter && (this.accumulator -= this.delayCounter,
                        this.handleStart())
                }
            },
            setCurrentFrame: function(t) {
                var e = this.parent;
                return this.currentFrame = t,
                e.texture = t.frame.texture,
                e.frame = t.frame,
                e.isCropped && e.frame.updateCropUVs(e._crop, e.flipX, e.flipY),
                t.setAlpha && (e.alpha = t.alpha),
                e.setSizeToFrame(),
                e._originComponent && (t.frame.customPivot ? e.setOrigin(t.frame.pivotX, t.frame.pivotY) : e.updateDisplayOrigin()),
                this.isPlaying && this.hasStarted && (this.emitEvents(r.ANIMATION_UPDATE),
                3 === this._pendingStop && this._pendingStopValue === t && this.stop()),
                e
            },
            nextFrame: function() {
                return this.currentAnim && this.currentAnim.nextFrame(this),
                this.parent
            },
            previousFrame: function() {
                return this.currentAnim && this.currentAnim.previousFrame(this),
                this.parent
            },
            get: function(t) {
                return this.anims ? this.anims.get(t) : null
            },
            exists: function(t) {
                return !!this.anims && this.anims.has(t)
            },
            create: function(t) {
                var e = t.key
                  , i = !1;
                return e && ((i = this.get(e)) || (i = new o(this,e,t),
                this.anims || (this.anims = new s),
                this.anims.set(e, i))),
                i
            },
            generateFrameNames: function(t, e) {
                return this.animationManager.generateFrameNames(t, e)
            },
            generateFrameNumbers: function(t, e) {
                return this.animationManager.generateFrameNumbers(t, e)
            },
            remove: function(t) {
                var e = this.get(t);
                return e && (this.currentAnim === e && this.stop(),
                this.anims.delete(t)),
                e
            },
            destroy: function() {
                this.animationManager.off(r.REMOVE_ANIMATION, this.globalRemove, this),
                this.anims && this.anims.clear(),
                this.animationManager = null,
                this.parent = null,
                this.nextAnim = null,
                this.nextAnimsQueue.length = 0,
                this.currentAnim = null,
                this.currentFrame = null
            },
            isPaused: {
                get: function() {
                    return this._paused
                }
            }
        });
        t.exports = a
    }
    , function(t, e, i) {
        var u = {};
        t.exports = u;
        var n = i(166);
        u._motionWakeThreshold = .18,
        u._motionSleepThreshold = .08,
        u._minBias = .9,
        u.update = function(t, e) {
            for (var i = e * e * e, n = 0; n < t.length; n++) {
                var s, r, o = t[n], a = o.speed * o.speed + o.angularSpeed * o.angularSpeed;
                0 === o.force.x && 0 === o.force.y ? (s = Math.min(o.motion, a),
                r = Math.max(o.motion, a),
                o.motion = u._minBias * s + (1 - u._minBias) * r,
                0 < o.sleepThreshold && o.motion < u._motionSleepThreshold * i ? (o.sleepCounter += 1,
                o.sleepCounter >= o.sleepThreshold && u.set(o, !0)) : 0 < o.sleepCounter && --o.sleepCounter) : u.set(o, !1)
            }
        }
        ,
        u.afterCollisions = function(t, e) {
            for (var i = e * e * e, n = 0; n < t.length; n++) {
                var s, r, o, a, h, l = t[n];
                l.isActive && (r = (s = l.collision).bodyA.parent,
                o = s.bodyB.parent,
                r.isSleeping && o.isSleeping || r.isStatic || o.isStatic || (r.isSleeping || o.isSleeping) && (h = (a = r.isSleeping && !r.isStatic ? r : o) === r ? o : r,
                !a.isStatic && h.motion > u._motionWakeThreshold * i && u.set(a, !1)))
            }
        }
        ,
        u.set = function(t, e) {
            var i = t.isSleeping;
            e ? (t.isSleeping = !0,
            t.sleepCounter = t.sleepThreshold,
            t.positionImpulse.x = 0,
            t.positionImpulse.y = 0,
            t.positionPrev.x = t.position.x,
            t.positionPrev.y = t.position.y,
            t.anglePrev = t.angle,
            t.speed = 0,
            t.angularSpeed = 0,
            t.motion = 0,
            i || n.trigger(t, "sleepStart")) : (t.isSleeping = !1,
            t.sleepCounter = 0,
            i && n.trigger(t, "sleepEnd"))
        }
    }
    , function(t, e, i) {
        var n = {};
        t.exports = n;
        var u = i(32);
        n.on = function(t, e, i) {
            for (var n, s = e.split(" "), r = 0; r < s.length; r++)
                n = s[r],
                t.events = t.events || {},
                t.events[n] = t.events[n] || [],
                t.events[n].push(i);
            return i
        }
        ,
        n.off = function(t, e, i) {
            if (e) {
                "function" == typeof e && (i = e,
                e = u.keys(t.events).join(" "));
                for (var n = e.split(" "), s = 0; s < n.length; s++) {
                    var r = t.events[n[s]]
                      , o = [];
                    if (i && r)
                        for (var a = 0; a < r.length; a++)
                            r[a] !== i && o.push(r[a]);
                    t.events[n[s]] = o
                }
            } else
                t.events = {}
        }
        ,
        n.trigger = function(t, e, i) {
            var n, s, r, o, a = t.events;
            if (a && 0 < u.keys(a).length) {
                i = i || {},
                n = e.split(" ");
                for (var h = 0; h < n.length; h++)
                    if (r = a[s = n[h]]) {
                        (o = u.clone(i, !1)).name = s,
                        o.source = t;
                        for (var l = 0; l < r.length; l++)
                            r[l].apply(t, [o])
                    }
            }
        }
    }
    , function(t, e, i) {
        var a = i(175)
          , s = i(92)
          , r = i(74)
          , n = {
            defaultPipeline: null,
            pipeline: null,
            hasPostPipeline: !1,
            postPipelines: null,
            pipelineData: null,
            initPipeline: function(t) {
                void 0 === t && (t = s.MULTI_PIPELINE);
                var e = this.scene.sys.renderer;
                if (!e)
                    return !1;
                var i = e.pipelines;
                if (this.postPipelines = [],
                this.pipelineData = {},
                i) {
                    var n = i.get(t);
                    if (n)
                        return this.defaultPipeline = n,
                        this.pipeline = n,
                        !0
                }
                return !1
            },
            setPipeline: function(t, e, i) {
                var n = this.scene.sys.renderer;
                if (!n)
                    return this;
                var s, r = n.pipelines;
                return r && ((s = r.get(t)) && (this.pipeline = s),
                e && (this.pipelineData = i ? a(e) : e)),
                this
            },
            setPostPipeline: function(t, e, i) {
                var n = this.scene.sys.renderer;
                if (!n)
                    return this;
                var s = n.pipelines;
                if (s) {
                    Array.isArray(t) || (t = [t]);
                    for (var r = 0; r < t.length; r++) {
                        var o = s.getPostPipeline(t[r], this);
                        o && this.postPipelines.push(o)
                    }
                    e && (this.pipelineData = i ? a(e) : e)
                }
                return this.hasPostPipeline = 0 < this.postPipelines.length,
                this
            },
            setPipelineData: function(t, e) {
                var i = this.pipelineData;
                return void 0 === e ? delete i[t] : i[t] = e,
                this
            },
            getPostPipeline: function(t) {
                for (var e = this.postPipelines, i = [], n = 0; n < e.length; n++) {
                    var s = e[n];
                    ("string" == typeof t && s.name === t || s instanceof t) && i.push(s)
                }
                return 1 === i.length ? i[0] : i
            },
            resetPipeline: function(t, e) {
                return void 0 === t && (t = !1),
                void 0 === e && (e = !1),
                this.pipeline = this.defaultPipeline,
                t && (this.postPipelines = [],
                this.hasPostPipeline = !1),
                e && (this.pipelineData = {}),
                null !== this.pipeline
            },
            resetPostPipeline: function(t) {
                void 0 === t && (t = !1);
                for (var e = this.postPipelines, i = 0; i < e.length; i++)
                    e[i].destroy();
                this.postPipelines = [],
                this.hasPostPipeline = !1,
                t && (this.pipelineData = {})
            },
            removePostPipeline: function(t) {
                for (var e = this.postPipelines, i = e.length - 1; 0 <= i; i--) {
                    var n = e[i];
                    ("string" == typeof t && n.name === t || "string" != typeof t && n instanceof t) && (n.destroy(),
                    r(e, i))
                }
                return this.hasPostPipeline = 0 < this.postPipelines.length,
                this
            },
            getPipelineName: function() {
                return this.pipeline.name
            }
        };
        t.exports = n
    }
    , function(t, e) {
        t.exports = {
            DEFAULT: 0,
            LINEAR: 0,
            NEAREST: 1
        }
    }
    , function(t, e, i) {
        var n = i(4);
        t.exports = function(t, e, i) {
            return void 0 === i && (i = new n),
            i.x = t.x + t.radius * Math.cos(e),
            i.y = t.y + t.radius * Math.sin(e),
            i
        }
    }
    , function(t, e, i) {
        var a = i(4);
        t.exports = function(t, e) {
            void 0 === e && (e = new a);
            var i = 2 * Math.PI * Math.random()
              , n = Math.random() + Math.random()
              , s = 1 < n ? 2 - n : n
              , r = s * Math.cos(i)
              , o = s * Math.sin(i);
            return e.x = t.x + r * t.radius,
            e.y = t.y + o * t.radius,
            e
        }
    }
    , function(t, e, i) {
        var s = i(130)
          , r = i(4);
        t.exports = function(t, e, i) {
            if (void 0 === i && (i = new r),
            e <= 0 || 1 <= e)
                return i.x = t.x,
                i.y = t.y,
                i;
            var n = s(t) * e;
            return .5 < e ? (n -= t.width + t.height) <= t.width ? (i.x = t.right - n,
            i.y = t.bottom) : (i.x = t.x,
            i.y = t.bottom - (n - t.width)) : n <= t.width ? (i.x = t.x + n,
            i.y = t.y) : (i.x = t.right,
            i.y = t.y + (n - t.width)),
            i
        }
    }
    , function(t, e, i) {
        var d = i(67)
          , p = i(4);
        t.exports = function(t, e, i, n) {
            void 0 === n && (n = []),
            !e && 0 < i && (e = d(t) / i);
            for (var s = t.x1, r = t.y1, o = t.x2, a = t.y2, h = 0; h < e; h++) {
                var l = h / e
                  , u = s + (o - s) * l
                  , c = r + (a - r) * l;
                n.push(new p(u,c))
            }
            return n
        }
    }
    , function(t, e, i) {
        var n = i(4);
        t.exports = function(t, e) {
            void 0 === e && (e = new n);
            var i = Math.random();
            return e.x = t.x1 + i * (t.x2 - t.x1),
            e.y = t.y1 + i * (t.y2 - t.y1),
            e
        }
    }
    , function(t, e, i) {
        var n = i(4);
        t.exports = function(t, e) {
            return void 0 === e && (e = new n),
            e.x = t.x + Math.random() * t.width,
            e.y = t.y + Math.random() * t.height,
            e
        }
    }
    , function(t, e) {
        var s = function(t) {
            var e, i, n;
            if ("object" != typeof t || null === t)
                return t;
            for (n in e = Array.isArray(t) ? [] : {},
            t)
                i = t[n],
                e[n] = s(i);
            return e
        };
        t.exports = s
    }
    , function(t, e) {
        t.exports = function(t) {
            var e = {
                name: t.name,
                type: t.type,
                x: t.x,
                y: t.y,
                depth: t.depth,
                scale: {
                    x: t.scaleX,
                    y: t.scaleY
                },
                origin: {
                    x: t.originX,
                    y: t.originY
                },
                flipX: t.flipX,
                flipY: t.flipY,
                rotation: t.rotation,
                alpha: t.alpha,
                visible: t.visible,
                blendMode: t.blendMode,
                textureKey: "",
                frameKey: "",
                data: {}
            };
            return t.texture && (e.textureKey = t.texture.key,
            e.frameKey = t.frame.name),
            e
        }
    }
    , function(t, e, i) {
        var g = i(3);
        t.exports = function(t, e, i, n, s, r, o, a) {
            void 0 === a && (a = new g);
            var h = Math.sin(s)
              , l = Math.cos(s)
              , u = l * r
              , c = h * r
              , d = -h * o
              , p = l * o
              , f = 1 / (u * p + d * -c);
            return a.x = p * f * t + -d * f * e + (n * d - i * p) * f,
            a.y = u * f * e + -c * f * t + (-n * u + i * c) * f,
            a
        }
    }
    , function(t, e) {
        t.exports = function(t, e) {
            void 0 === e && (e = 1);
            for (var i = null, n = 0; n < e; n++)
                i = t.shift(),
                t.push(i);
            return i
        }
    }
    , function(t, e) {
        t.exports = function(t, e) {
            void 0 === e && (e = 1);
            for (var i = null, n = 0; n < e; n++)
                i = t.pop(),
                t.unshift(i);
            return i
        }
    }
    , function(t, e, i) {
        var s = i(4);
        t.exports = function(t, e) {
            void 0 === e && (e = new s);
            var i = Math.random() * Math.PI * 2
              , n = Math.sqrt(Math.random());
            return e.x = t.x + n * Math.cos(i) * t.width / 2,
            e.y = t.y + n * Math.sin(i) * t.height / 2,
            e
        }
    }
    , function(t, e, i) {
        var h = i(4);
        t.exports = function(t, e) {
            void 0 === e && (e = new h);
            var i = t.x2 - t.x1
              , n = t.y2 - t.y1
              , s = t.x3 - t.x1
              , r = t.y3 - t.y1
              , o = Math.random()
              , a = Math.random();
            return 1 <= o + a && (o = 1 - o,
            a = 1 - a),
            e.x = t.x1 + (i * o + s * a),
            e.y = t.y1 + (n * o + r * a),
            e
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i, n, s) {
            var r = n + Math.atan2(t.y - i, t.x - e);
            return t.x = e + s * Math.cos(r),
            t.y = i + s * Math.sin(r),
            t
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            return (t = Math.max(0, Math.min(1, (t - e) / (i - e)))) * t * t * (t * (6 * t - 15) + 10)
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            return t <= e ? 0 : i <= t ? 1 : (t = (t - e) / (i - e)) * t * (3 - 2 * t)
        }
    }
    , function(t, e, i) {
        var n = i(18)
          , s = i(0)
          , r = i(132)
          , o = i(318)
          , v = i(319)
          , y = i(6)
          , m = i(320)
          , a = new s({
            initialize: function(t, e, i) {
                this.manager = t,
                this.key = e,
                this.type = "frame",
                this.frames = this.getFrames(t.textureManager, y(i, "frames", []), y(i, "defaultTextureKey", null), y(i, "sortFrames", !0)),
                this.frameRate = y(i, "frameRate", null),
                this.duration = y(i, "duration", null),
                this.msPerFrame,
                this.skipMissedFrames = y(i, "skipMissedFrames", !0),
                this.delay = y(i, "delay", 0),
                this.repeat = y(i, "repeat", 0),
                this.repeatDelay = y(i, "repeatDelay", 0),
                this.yoyo = y(i, "yoyo", !1),
                this.showOnStart = y(i, "showOnStart", !1),
                this.hideOnComplete = y(i, "hideOnComplete", !1),
                this.paused = !1,
                this.calculateDuration(this, this.getTotalFrames(), this.duration, this.frameRate),
                this.manager.on && (this.manager.on(r.PAUSE_ALL, this.pause, this),
                this.manager.on(r.RESUME_ALL, this.resume, this))
            },
            getTotalFrames: function() {
                return this.frames.length
            },
            calculateDuration: function(t, e, i, n) {
                null === i && null === n ? (t.frameRate = 24,
                t.duration = 24 / e * 1e3) : i && null === n ? (t.duration = i,
                t.frameRate = e / (i / 1e3)) : (t.frameRate = n,
                t.duration = e / n * 1e3),
                t.msPerFrame = 1e3 / t.frameRate
            },
            addFrame: function(t) {
                return this.addFrameAt(this.frames.length, t)
            },
            addFrameAt: function(t, e) {
                var i, n, s = this.getFrames(this.manager.textureManager, e);
                return 0 < s.length && (0 === t ? this.frames = s.concat(this.frames) : t === this.frames.length ? this.frames = this.frames.concat(s) : (i = this.frames.slice(0, t),
                n = this.frames.slice(t),
                this.frames = i.concat(s, n)),
                this.updateFrameSequence()),
                this
            },
            checkFrame: function(t) {
                return 0 <= t && t < this.frames.length
            },
            getFirstTick: function(t) {
                t.accumulator = 0,
                t.nextTick = t.msPerFrame + t.currentFrame.duration
            },
            getFrameAt: function(t) {
                return this.frames[t]
            },
            getFrames: function(t, e, i, n) {
                void 0 === n && (n = !0);
                var s, r, o, a = [], h = 1;
                if ("string" == typeof e && (r = e,
                o = t.get(r).getFrameNames(),
                n && m(o),
                e = [],
                o.forEach(function(t) {
                    e.push({
                        key: r,
                        frame: t
                    })
                })),
                !Array.isArray(e) || 0 === e.length)
                    return a;
                for (g = 0; g < e.length; g++) {
                    var l, u, c, d = e[g], p = y(d, "key", i);
                    p && (l = y(d, "frame", 0),
                    u = t.getFrame(p, l),
                    (c = new v(p,l,h,u)).duration = y(d, "duration", 0),
                    c.isFirst = !s,
                    s && ((s.nextFrame = c).prevFrame = s),
                    a.push(c),
                    s = c,
                    h++)
                }
                if (0 < a.length) {
                    c.isLast = !0,
                    c.nextFrame = a[0],
                    a[0].prevFrame = c;
                    for (var f = 1 / (a.length - 1), g = 0; g < a.length; g++)
                        a[g].progress = g * f
                }
                return a
            },
            getNextTick: function(t) {
                t.accumulator -= t.nextTick,
                t.nextTick = t.msPerFrame + t.currentFrame.duration
            },
            getFrameByProgress: function(t) {
                return t = n(t, 0, 1),
                o(t, this.frames, "progress")
            },
            nextFrame: function(t) {
                var e = t.currentFrame;
                e.isLast ? t.yoyo ? this.handleYoyoFrame(t, !1) : 0 < t.repeatCounter ? t.inReverse && t.forward ? t.forward = !1 : this.repeatAnimation(t) : t.complete() : this.updateAndGetNextTick(t, e.nextFrame)
            },
            handleYoyoFrame: function(t, e) {
                if (e = e || !1,
                t.inReverse === !e && 0 < t.repeatCounter)
                    return 0 !== t.repeatDelay && !t.pendingRepeat || (t.forward = e),
                    void this.repeatAnimation(t);
                var i;
                t.inReverse === e || 0 !== t.repeatCounter ? (i = (t.forward = e) ? t.currentFrame.nextFrame : t.currentFrame.prevFrame,
                this.updateAndGetNextTick(t, i)) : t.complete()
            },
            getLastFrame: function() {
                return this.frames[this.frames.length - 1]
            },
            previousFrame: function(t) {
                var e = t.currentFrame;
                e.isFirst ? t.yoyo ? this.handleYoyoFrame(t, !0) : 0 < t.repeatCounter ? (t.inReverse && !t.forward || (t.forward = !0),
                this.repeatAnimation(t)) : t.complete() : this.updateAndGetNextTick(t, e.prevFrame)
            },
            updateAndGetNextTick: function(t, e) {
                t.setCurrentFrame(e),
                this.getNextTick(t)
            },
            removeFrame: function(t) {
                var e = this.frames.indexOf(t);
                return -1 !== e && this.removeFrameAt(e),
                this
            },
            removeFrameAt: function(t) {
                return this.frames.splice(t, 1),
                this.updateFrameSequence(),
                this
            },
            repeatAnimation: function(t) {
                if (2 === t._pendingStop) {
                    if (0 === t._pendingStopValue)
                        return t.stop();
                    t._pendingStopValue--
                }
                0 < t.repeatDelay && !t.pendingRepeat ? (t.pendingRepeat = !0,
                t.accumulator -= t.nextTick,
                t.nextTick += t.repeatDelay) : (t.repeatCounter--,
                t.forward ? t.setCurrentFrame(t.currentFrame.nextFrame) : t.setCurrentFrame(t.currentFrame.prevFrame),
                t.isPlaying && (this.getNextTick(t),
                t.handleRepeat()))
            },
            toJSON: function() {
                var e = {
                    key: this.key,
                    type: this.type,
                    frames: [],
                    frameRate: this.frameRate,
                    duration: this.duration,
                    skipMissedFrames: this.skipMissedFrames,
                    delay: this.delay,
                    repeat: this.repeat,
                    repeatDelay: this.repeatDelay,
                    yoyo: this.yoyo,
                    showOnStart: this.showOnStart,
                    hideOnComplete: this.hideOnComplete
                };
                return this.frames.forEach(function(t) {
                    e.frames.push(t.toJSON())
                }),
                e
            },
            updateFrameSequence: function() {
                for (var t, e = this.frames.length, i = 1 / (e - 1), n = 0; n < e; n++)
                    (t = this.frames[n]).index = n + 1,
                    t.isFirst = !1,
                    t.isLast = !1,
                    t.progress = n * i,
                    0 === n ? (t.isFirst = !0,
                    1 === e ? (t.isLast = !0,
                    (t.nextFrame = t).prevFrame = t) : (t.isLast = !1,
                    t.prevFrame = this.frames[e - 1],
                    t.nextFrame = this.frames[n + 1])) : n === e - 1 && 1 < e ? (t.isLast = !0,
                    t.prevFrame = this.frames[e - 2],
                    t.nextFrame = this.frames[0]) : 1 < e && (t.prevFrame = this.frames[n - 1],
                    t.nextFrame = this.frames[n + 1]);
                return this
            },
            pause: function() {
                return this.paused = !0,
                this
            },
            resume: function() {
                return this.paused = !1,
                this
            },
            destroy: function() {
                this.manager.off && (this.manager.off(r.PAUSE_ALL, this.pause, this),
                this.manager.off(r.RESUME_ALL, this.resume, this)),
                this.manager.remove(this.key);
                for (var t = 0; t < this.frames.length; t++)
                    this.frames[t].destroy();
                this.frames = [],
                this.manager = null
            }
        });
        t.exports = a
    }
    , function(t, e) {
        t.exports = function(t, e, i, n) {
            var s;
            if (void 0 === e && (e = 0),
            void 0 === i && (i = " "),
            void 0 === n && (n = 3),
            e + 1 >= (t = t.toString()).length)
                switch (n) {
                case 1:
                    t = new Array(e + 1 - t.length).join(i) + t;
                    break;
                case 3:
                    var r = Math.ceil((s = e - t.length) / 2);
                    t = new Array(s - r + 1).join(i) + t + new Array(r + 1).join(i);
                    break;
                default:
                    t += new Array(e + 1 - t.length).join(i)
                }
            return t
        }
    }
    , function(t, e, i) {
        var n = i(327)
          , s = i(189)
          , r = i(331)
          , o = i(332);
        t.exports = function(t) {
            switch (typeof t) {
            case "string":
                return ("rgb" === t.substr(0, 3).toLowerCase() ? o : n)(t);
            case "number":
                return s(t);
            case "object":
                return r(t)
            }
        }
    }
    , function(t, e, i) {
        var a = i(103);
        function h(t, e, i, n) {
            var s = (t + 6 * e) % 6
              , r = Math.min(s, 4 - s, 1);
            return Math.round(255 * (n - n * i * Math.max(0, r)))
        }
        t.exports = function(t, e, i, n) {
            void 0 === e && (e = 1),
            void 0 === i && (i = 1);
            var s = h(5, t, e, i)
              , r = h(3, t, e, i)
              , o = h(1, t, e, i);
            return n ? n.setTo ? n.setTo(s, r, o, n.alpha, !1) : (n.r = s,
            n.g = r,
            n.b = o,
            n.color = a(s, r, o),
            n) : {
                r: s,
                g: r,
                b: o,
                color: a(s, r, o)
            }
        }
    }
    , function(t, e, i) {
        var n = i(38)
          , s = i(330);
        t.exports = function(t) {
            var e = s(t);
            return new n(e.r,e.g,e.b,e.a)
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            return t.x = e - t.width / 2,
            t.y = i - t.height / 2,
            t
        }
    }
    , function(t, e, i) {
        var n = i(105)
          , r = i(136)
          , o = i(31)
          , a = {
            canvas: !1,
            canvasBitBltShift: null,
            file: !1,
            fileSystem: !1,
            getUserMedia: !0,
            littleEndian: !1,
            localStorage: !1,
            pointerLock: !1,
            support32bit: !1,
            vibration: !1,
            webGL: !1,
            worker: !1
        };
        t.exports = function() {
            if ("function" == typeof importScripts)
                return a;
            a.canvas = !!window.CanvasRenderingContext2D;
            try {
                a.localStorage = !!localStorage.getItem
            } catch (t) {
                a.localStorage = !1
            }
            a.file = !!(window.File && window.FileReader && window.FileList && window.Blob),
            a.fileSystem = !!window.requestFileSystem;
            var t, e, i, s = !1;
            return a.webGL = function() {
                if (window.WebGLRenderingContext)
                    try {
                        var t = o.createWebGL(this)
                          , e = t.getContext("webgl") || t.getContext("experimental-webgl")
                          , i = o.create2D(this)
                          , n = i.getContext("2d").createImageData(1, 1);
                        return s = n.data instanceof Uint8ClampedArray,
                        o.remove(t),
                        o.remove(i),
                        !!e
                    } catch (t) {
                        return !1
                    }
                return !1
            }(),
            a.worker = !!window.Worker,
            a.pointerLock = "pointerLockElement"in document || "mozPointerLockElement"in document || "webkitPointerLockElement"in document,
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.oGetUserMedia,
            window.URL = window.URL || window.webkitURL || window.mozURL || window.msURL,
            a.getUserMedia = a.getUserMedia && !!navigator.getUserMedia && !!window.URL,
            r.firefox && r.firefoxVersion < 21 && (a.getUserMedia = !1),
            !n.iOS && (r.ie || r.firefox || r.chrome) && (a.canvasBitBltShift = !0),
            (r.safari || r.mobileSafari) && (a.canvasBitBltShift = !1),
            navigator.vibrate = navigator.vibrate || navigator.webkitVibrate || navigator.mozVibrate || navigator.msVibrate,
            navigator.vibrate && (a.vibration = !0),
            "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array && "undefined" != typeof Uint32Array && (a.littleEndian = (t = new ArrayBuffer(4),
            e = new Uint8Array(t),
            i = new Uint32Array(t),
            e[0] = 161,
            e[1] = 178,
            e[2] = 195,
            e[3] = 212,
            3569595041 === i[0] || 2712847316 !== i[0] && null)),
            a.support32bit = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8ClampedArray && "undefined" != typeof Int32Array && null !== a.littleEndian && s,
            a
        }()
    }
    , function(t, e) {
        var i = "";
        function n(t) {
            for (var e = ["i", "webkitI", "msI", "mozI", "oI"], i = 0; i < e.length; i++) {
                var n = e[i] + "mageSmoothingEnabled";
                if (n in t)
                    return n
            }
            return null
        }
        t.exports = {
            disable: function(t) {
                return "" === i && (i = n(t)),
                i && (t[i] = !1),
                t
            },
            enable: function(t) {
                return "" === i && (i = n(t)),
                i && (t[i] = !0),
                t
            },
            getPrefix: n,
            isEnabled: function(t) {
                return null !== i ? t[i] : null
            }
        }
    }
    , function(t, e, i) {
        var n = i(14)
          , s = i(17)(!1, s = {
            Angle: i(812),
            Distance: i(821),
            Easing: i(826),
            Fuzzy: i(827),
            Interpolation: i(830),
            Pow2: i(835),
            Snap: i(837),
            RandomDataGenerator: i(839),
            Average: i(840),
            Bernstein: i(356),
            Between: i(195),
            CatmullRom: i(194),
            CeilTo: i(841),
            Clamp: i(18),
            DegToRad: i(36),
            Difference: i(842),
            Euler: i(843),
            Factorial: i(357),
            FloatBetween: i(137),
            FloorTo: i(844),
            FromPercent: i(98),
            GetSpeed: i(845),
            IsEven: i(846),
            IsEvenStrict: i(847),
            Linear: i(135),
            MaxAdd: i(848),
            Median: i(849),
            MinSub: i(850),
            Percent: i(851),
            RadToDeg: i(196),
            RandomXY: i(852),
            RandomXYZ: i(853),
            RandomXYZW: i(854),
            Rotate: i(362),
            RotateAround: i(308),
            RotateAroundDistance: i(182),
            RotateTo: i(855),
            RoundAwayFromZero: i(363),
            RoundTo: i(856),
            SinCosTableGenerator: i(857),
            SmootherStep: i(183),
            SmoothStep: i(184),
            ToXY: i(858),
            TransformXY: i(177),
            Within: i(859),
            Wrap: i(68),
            Vector2: i(3),
            Vector3: i(39),
            Vector4: i(140),
            Matrix3: i(364),
            Matrix4: i(69),
            Quaternion: i(365),
            RotateVec3: i(860)
        }, n);
        t.exports = s
    }
    , function(t, e) {
        t.exports = function(t, e, i, n, s) {
            var r = .5 * (n - e)
              , o = .5 * (s - i)
              , a = t * t;
            return (2 * i - 2 * n + r + o) * (t * a) + (-3 * i + 3 * n - 2 * r - o) * a + r * t + i
        }
    }
    , function(t, e) {
        t.exports = function(t, e) {
            return Math.floor(Math.random() * (e - t + 1) + t)
        }
    }
    , function(t, e, i) {
        var n = i(14);
        t.exports = function(t) {
            return t * n.RAD_TO_DEG
        }
    }
    , function(t, e, i) {
        t.exports = {
            Global: ["game", "anims", "cache", "plugins", "registry", "scale", "sound", "textures", "renderer"],
            CoreScene: ["EventEmitter", "CameraManager", "GameObjectCreator", "GameObjectFactory", "ScenePlugin", "DisplayList", "UpdateList"],
            DefaultScene: ["Clock", "DataManagerPlugin", "InputPlugin", "Loader", "TweenManager", "LightsPlugin"]
        }
    }
    , function(t, e, i) {
        var n = new (i(0))({
            initialize: function() {
                this._matrix = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
                this.alpha = 1,
                this._dirty = !0,
                this._data
            },
            set: function(t) {
                return this._matrix = t,
                this._dirty = !0,
                this
            },
            reset: function() {
                var t = this._matrix;
                return t[0] = 1,
                t[1] = 0,
                t[2] = 0,
                t[3] = 0,
                t[4] = 0,
                t[5] = 0,
                t[6] = 1,
                t[7] = 0,
                t[8] = 0,
                t[9] = 0,
                t[10] = 0,
                t[11] = 0,
                t[12] = 1,
                t[13] = 0,
                t[14] = 0,
                t[15] = 0,
                t[16] = 0,
                t[17] = 0,
                t[18] = 1,
                t[19] = 0,
                this._dirty = !0,
                this
            },
            getData: function() {
                var t;
                return this._dirty && ((t = new Float32Array(this._matrix))[4] /= 255,
                t[9] /= 255,
                t[14] /= 255,
                t[19] /= 255,
                this._data = t,
                this._dirty = !1),
                this._data
            },
            brightness: function(t, e) {
                return void 0 === t && (t = 0),
                void 0 === e && (e = !1),
                this.multiply([t, 0, 0, 0, 0, 0, t, 0, 0, 0, 0, 0, t, 0, 0, 0, 0, 0, 1, 0], e)
            },
            saturate: function(t, e) {
                void 0 === t && (t = 0),
                void 0 === e && (e = !1);
                var i = 2 * t / 3 + 1
                  , n = -.5 * (i - 1);
                return this.multiply([i, n, n, 0, 0, n, i, n, 0, 0, n, n, i, 0, 0, 0, 0, 0, 1, 0], e)
            },
            desaturate: function(t) {
                return void 0 === t && (t = !1),
                this.saturate(-1, t)
            },
            hue: function(t, e) {
                void 0 === t && (t = 0),
                void 0 === e && (e = !1),
                t = t / 180 * Math.PI;
                var i = Math.cos(t)
                  , n = Math.sin(t);
                return this.multiply([.213 + .787 * i + -.213 * n, .715 + -.715 * i + -.715 * n, .072 + -.072 * i + .928 * n, 0, 0, .213 + -.213 * i + .143 * n, .715 + i * (1 - .715) + .14 * n, .072 + -.072 * i + -.283 * n, 0, 0, .213 + -.213 * i + -.787 * n, .715 + -.715 * i + .715 * n, .072 + .928 * i + .072 * n, 0, 0, 0, 0, 0, 1, 0], e)
            },
            grayscale: function(t, e) {
                return void 0 === t && (t = 1),
                void 0 === e && (e = !1),
                this.saturate(-t, e)
            },
            blackWhite: function(t) {
                return void 0 === t && (t = !1),
                this.multiply([.3, .6, .1, 0, 0, .3, .6, .1, 0, 0, .3, .6, .1, 0, 0, 0, 0, 0, 1, 0], t)
            },
            contrast: function(t, e) {
                void 0 === t && (t = 0),
                void 0 === e && (e = !1);
                var i = t + 1
                  , n = -.5 * (i - 1);
                return this.multiply([i, 0, 0, 0, n, 0, i, 0, 0, n, 0, 0, i, 0, n, 0, 0, 0, 1, 0], e)
            },
            negative: function(t) {
                return void 0 === t && (t = !1),
                this.multiply([-1, 0, 0, 1, 0, 0, -1, 0, 1, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0], t)
            },
            desaturateLuminance: function(t) {
                return void 0 === t && (t = !1),
                this.multiply([.2764723, .929708, .0938197, 0, -37.1, .2764723, .929708, .0938197, 0, -37.1, .2764723, .929708, .0938197, 0, -37.1, 0, 0, 0, 1, 0], t)
            },
            sepia: function(t) {
                return void 0 === t && (t = !1),
                this.multiply([.393, .7689999, .18899999, 0, 0, .349, .6859999, .16799999, 0, 0, .272, .5339999, .13099999, 0, 0, 0, 0, 0, 1, 0], t)
            },
            night: function(t, e) {
                return void 0 === t && (t = .1),
                void 0 === e && (e = !1),
                this.multiply([-2 * t, -t, 0, 0, 0, -t, 0, t, 0, 0, 0, t, 2 * t, 0, 0, 0, 0, 0, 1, 0], e)
            },
            lsd: function(t) {
                return void 0 === t && (t = !1),
                this.multiply([2, -.4, .5, 0, 0, -.5, 2, -.4, 0, 0, -.4, -.5, 3, 0, 0, 0, 0, 0, 1, 0], t)
            },
            brown: function(t) {
                return void 0 === t && (t = !1),
                this.multiply([.5997023498159715, .34553243048391263, -.2708298674538042, 0, 47.43192855600873, -.037703249837783157, .8609577587992641, .15059552388459913, 0, -36.96841498319127, .24113635128153335, -.07441037908422492, .44972182064877153, 0, -7.562075277591283, 0, 0, 0, 1, 0], t)
            },
            vintagePinhole: function(t) {
                return void 0 === t && (t = !1),
                this.multiply([.6279345635605994, .3202183420819367, -.03965408211312453, 0, 9.651285835294123, .02578397704808868, .6441188644374771, .03259127616149294, 0, 7.462829176470591, .0466055556782719, -.0851232987247891, .5241648018700465, 0, 5.159190588235296, 0, 0, 0, 1, 0], t)
            },
            kodachrome: function(t) {
                return void 0 === t && (t = !1),
                this.multiply([1.1285582396593525, -.3967382283601348, -.03992559172921793, 0, 63.72958762196502, -.16404339962244616, 1.0835251566291304, -.05498805115633132, 0, 24.732407896706203, -.16786010706155763, -.5603416277695248, 1.6014850761964943, 0, 35.62982807460946, 0, 0, 0, 1, 0], t)
            },
            technicolor: function(t) {
                return void 0 === t && (t = !1),
                this.multiply([1.9125277891456083, -.8545344976951645, -.09155508482755585, 0, 11.793603434377337, -.3087833385928097, 1.7658908555458428, -.10601743074722245, 0, -70.35205161461398, -.231103377548616, -.7501899197440212, 1.847597816108189, 0, 30.950940869491138, 0, 0, 0, 1, 0], t)
            },
            polaroid: function(t) {
                return void 0 === t && (t = !1),
                this.multiply([1.438, -.062, -.062, 0, 0, -.122, 1.378, -.122, 0, 0, -.016, -.016, 1.483, 0, 0, 0, 0, 0, 1, 0], t)
            },
            shiftToBGR: function(t) {
                return void 0 === t && (t = !1),
                this.multiply([0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], t)
            },
            multiply: function(t, e) {
                e || this.reset();
                for (var i = this._matrix, n = [], s = 0; s < 20; s++)
                    n[s] = i[s];
                return i[0] = n[0] * t[0] + n[1] * t[5] + n[2] * t[10] + n[3] * t[15],
                i[1] = n[0] * t[1] + n[1] * t[6] + n[2] * t[11] + n[3] * t[16],
                i[2] = n[0] * t[2] + n[1] * t[7] + n[2] * t[12] + n[3] * t[17],
                i[3] = n[0] * t[3] + n[1] * t[8] + n[2] * t[13] + n[3] * t[18],
                i[4] = n[0] * t[4] + n[1] * t[9] + n[2] * t[14] + n[3] * t[19] + n[4],
                i[5] = n[5] * t[0] + n[6] * t[5] + n[7] * t[10] + n[8] * t[15],
                i[6] = n[5] * t[1] + n[6] * t[6] + n[7] * t[11] + n[8] * t[16],
                i[7] = n[5] * t[2] + n[6] * t[7] + n[7] * t[12] + n[8] * t[17],
                i[8] = n[5] * t[3] + n[6] * t[8] + n[7] * t[13] + n[8] * t[18],
                i[9] = n[5] * t[4] + n[6] * t[9] + n[7] * t[14] + n[8] * t[19] + n[9],
                i[10] = n[10] * t[0] + n[11] * t[5] + n[12] * t[10] + n[13] * t[15],
                i[11] = n[10] * t[1] + n[11] * t[6] + n[12] * t[11] + n[13] * t[16],
                i[12] = n[10] * t[2] + n[11] * t[7] + n[12] * t[12] + n[13] * t[17],
                i[13] = n[10] * t[3] + n[11] * t[8] + n[12] * t[13] + n[13] * t[18],
                i[14] = n[10] * t[4] + n[11] * t[9] + n[12] * t[14] + n[13] * t[19] + n[14],
                i[15] = n[15] * t[0] + n[16] * t[5] + n[17] * t[10] + n[18] * t[15],
                i[16] = n[15] * t[1] + n[16] * t[6] + n[17] * t[11] + n[18] * t[16],
                i[17] = n[15] * t[2] + n[16] * t[7] + n[17] * t[12] + n[18] * t[17],
                i[18] = n[15] * t[3] + n[16] * t[8] + n[17] * t[13] + n[18] * t[18],
                i[19] = n[15] * t[4] + n[16] * t[9] + n[17] * t[14] + n[18] * t[19] + n[19],
                this._dirty = !0,
                this
            }
        });
        t.exports = n
    }
    , function(t, e, i) {
        var u = i(10)
          , c = i(14);
        t.exports = function(t, e) {
            if (void 0 === e && (e = new u),
            0 === t.length)
                return e;
            for (var i, n, s, r = Number.MAX_VALUE, o = Number.MAX_VALUE, a = c.MIN_SAFE_INTEGER, h = c.MIN_SAFE_INTEGER, l = 0; l < t.length; l++)
                i = t[l],
                s = Array.isArray(i) ? (n = i[0],
                i[1]) : (n = i.x,
                i.y),
                r = Math.min(r, n),
                o = Math.min(o, s),
                a = Math.max(a, n),
                h = Math.max(h, s);
            return e.x = r,
            e.y = o,
            e.width = a - r,
            e.height = h - o,
            e
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(1)
          , r = new n({
            initialize: function(t, e, i) {
                this._rgb = [0, 0, 0],
                this.onChangeCallback = s,
                this.dirty = !1,
                this.set(t, e, i)
            },
            set: function(t, e, i) {
                return void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                this._rgb = [t, e, i],
                this.onChange(),
                this
            },
            equals: function(t, e, i) {
                var n = this._rgb;
                return n.r === t && n.g === e && n.b === i
            },
            onChange: function() {
                this.dirty = !0;
                var t = this._rgb;
                this.onChangeCallback.call(this, t[0], t[1], t[2])
            },
            r: {
                get: function() {
                    return this._rgb[0]
                },
                set: function(t) {
                    this._rgb[0] = t,
                    this.onChange()
                }
            },
            g: {
                get: function() {
                    return this._rgb[1]
                },
                set: function(t) {
                    this._rgb[1] = t,
                    this.onChange()
                }
            },
            b: {
                get: function() {
                    return this._rgb[2]
                },
                set: function(t) {
                    this._rgb[2] = t,
                    this.onChange()
                }
            },
            destroy: function() {
                this.onChangeCallback = null
            }
        });
        t.exports = r
    }
    , function(t, e, i) {
        var n = {
            CENTER: i(403),
            ORIENTATION: i(404),
            SCALE_MODE: i(405),
            ZOOM: i(406)
        };
        t.exports = n
    }
    , function(t, e) {
        t.exports = function(t) {
            t.parentNode && t.parentNode.removeChild(t)
        }
    }
    , function(t, e) {
        t.exports = {
            MOUSE_DOWN: 0,
            MOUSE_MOVE: 1,
            MOUSE_UP: 2,
            TOUCH_START: 3,
            TOUCH_MOVE: 4,
            TOUCH_END: 5,
            POINTER_LOCK_CHANGE: 6,
            TOUCH_CANCEL: 7,
            MOUSE_WHEEL: 8
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(144)
          , r = i(197)
          , o = i(20)
          , a = i(419)
          , h = i(420)
          , l = i(33)
          , u = i(1)
          , c = i(421)
          , d = new n({
            initialize: function(t, e) {
                this.scene = t,
                this.game,
                this.renderer,
                this.config = e,
                this.settings = c.create(e),
                this.canvas,
                this.context,
                this.anims,
                this.cache,
                this.plugins,
                this.registry,
                this.scale,
                this.sound,
                this.textures,
                this.add,
                this.cameras,
                this.displayList,
                this.events,
                this.make,
                this.scenePlugin,
                this.updateList,
                this.sceneUpdate = u
            },
            init: function(t) {
                this.settings.status = s.INIT,
                this.sceneUpdate = u,
                this.game = t,
                this.renderer = t.renderer,
                this.canvas = t.canvas,
                this.context = t.context;
                var e = t.plugins;
                (this.plugins = e).addToScene(this, r.Global, [r.CoreScene, h(this), a(this)]),
                this.events.emit(o.BOOT, this),
                this.settings.isBooted = !0
            },
            step: function(t, e) {
                var i = this.events;
                i.emit(o.PRE_UPDATE, t, e),
                i.emit(o.UPDATE, t, e),
                this.sceneUpdate.call(this.scene, t, e),
                i.emit(o.POST_UPDATE, t, e)
            },
            render: function(t) {
                var e = this.displayList;
                e.depthSort(),
                this.events.emit(o.PRE_RENDER, t),
                this.cameras.render(t, e),
                this.events.emit(o.RENDER, t)
            },
            queueDepthSort: function() {
                this.displayList.queueDepthSort()
            },
            depthSort: function() {
                this.displayList.depthSort()
            },
            pause: function(t) {
                var e = this.events
                  , i = this.settings;
                return this.settings.active && (i.status = s.PAUSED,
                i.active = !1,
                e.emit(o.PAUSE, this, t)),
                this
            },
            resume: function(t) {
                var e = this.events
                  , i = this.settings;
                return this.settings.active || (i.status = s.RUNNING,
                i.active = !0,
                e.emit(o.RESUME, this, t)),
                this
            },
            sleep: function(t) {
                var e = this.events
                  , i = this.settings;
                return i.status = s.SLEEPING,
                i.active = !1,
                i.visible = !1,
                e.emit(o.SLEEP, this, t),
                this
            },
            wake: function(t) {
                var e = this.events
                  , i = this.settings;
                return i.status = s.RUNNING,
                i.active = !0,
                i.visible = !0,
                e.emit(o.WAKE, this, t),
                i.isTransition && e.emit(o.TRANSITION_WAKE, i.transitionFrom, i.transitionDuration),
                this
            },
            getData: function() {
                return this.settings.data
            },
            isSleeping: function() {
                return this.settings.status === s.SLEEPING
            },
            isActive: function() {
                return this.settings.status === s.RUNNING
            },
            isPaused: function() {
                return this.settings.status === s.PAUSED
            },
            isTransitioning: function() {
                return this.settings.isTransition || null !== this.scenePlugin._target
            },
            isTransitionOut: function() {
                return null !== this.scenePlugin._target && 0 < this.scenePlugin._duration
            },
            isTransitionIn: function() {
                return this.settings.isTransition
            },
            isVisible: function() {
                return this.settings.visible
            },
            setVisible: function(t) {
                return this.settings.visible = t,
                this
            },
            setActive: function(t, e) {
                return t ? this.resume(e) : this.pause(e)
            },
            start: function(t) {
                var e = this.events
                  , i = this.settings;
                t && (i.data = t),
                i.status = s.START,
                i.active = !0,
                i.visible = !0,
                e.emit(o.START, this),
                e.emit(o.READY, this, t)
            },
            shutdown: function(t) {
                var e = this.events
                  , i = this.settings;
                e.off(o.TRANSITION_INIT),
                e.off(o.TRANSITION_START),
                e.off(o.TRANSITION_COMPLETE),
                e.off(o.TRANSITION_OUT),
                i.status = s.SHUTDOWN,
                i.active = !1,
                i.visible = !1,
                this.renderer === l.WEBGL && this.renderer.resetTextures(!0),
                e.emit(o.SHUTDOWN, this, t)
            },
            destroy: function() {
                var t = this.events
                  , e = this.settings;
                e.status = s.DESTROYED,
                e.active = !1,
                e.visible = !1,
                t.emit(o.DESTROY, this),
                t.removeAllListeners();
                for (var i = ["scene", "game", "anims", "cache", "plugins", "registry", "sound", "textures", "add", "camera", "displayList", "events", "make", "scenePlugin", "updateList"], n = 0; n < i.length; n++)
                    this[i[n]] = null
            }
        });
        t.exports = d
    }
    , function(t, e) {
        t.exports = function(t) {
            return t && t[0].toUpperCase() + t.slice(1)
        }
    }
    , function(t, e, i) {
        var n = i(33)
          , s = i(0)
          , a = i(109)
          , o = i(424)
          , r = "Texture.frame missing: "
          , h = new s({
            initialize: function(t, e, i, n, s) {
                Array.isArray(i) || (i = [i]),
                this.manager = t,
                this.key = e,
                this.source = [],
                this.dataSource = [],
                this.frames = {},
                this.customData = {},
                this.firstFrame = "__BASE";
                for (var r = this.frameTotal = 0; r < i.length; r++)
                    this.source.push(new o(this,i[r],n,s))
            },
            add: function(t, e, i, n, s, r) {
                if (this.has(t))
                    return null;
                var o = new a(this,t,e,i,n,s,r);
                return this.frames[t] = o,
                "__BASE" === this.firstFrame && (this.firstFrame = t),
                this.frameTotal++,
                o
            },
            remove: function(t) {
                return !!this.has(t) && (this.get(t).destroy(),
                delete this.frames[t],
                !0)
            },
            has: function(t) {
                return this.frames[t]
            },
            get: function(t) {
                t = t || this.firstFrame;
                var e = this.frames[t];
                return e || (console.warn(r + t),
                e = this.frames[this.firstFrame]),
                e
            },
            getTextureSourceIndex: function(t) {
                for (var e = 0; e < this.source.length; e++)
                    if (this.source[e] === t)
                        return e;
                return -1
            },
            getFramesFromTextureSource: function(t, e) {
                void 0 === e && (e = !1);
                var i, n = [];
                for (var s in this.frames)
                    "__BASE" === s && !e || (i = this.frames[s]).sourceIndex === t && n.push(i);
                return n
            },
            getFrameNames: function(t) {
                void 0 === t && (t = !1);
                var e, i = Object.keys(this.frames);
                return t || -1 !== (e = i.indexOf("__BASE")) && i.splice(e, 1),
                i
            },
            getSourceImage: function(t) {
                null != t && 1 !== this.frameTotal || (t = "__BASE");
                var e = this.frames[t];
                return e ? e.source.image : (console.warn(r + t),
                this.frames.__BASE.source.image)
            },
            getDataSourceImage: function(t) {
                null != t && 1 !== this.frameTotal || (t = "__BASE");
                var e = this.frames[t]
                  , i = e ? e.sourceIndex : (console.warn(r + t),
                this.frames.__BASE.sourceIndex);
                return this.dataSource[i].image
            },
            setDataSource: function(t) {
                Array.isArray(t) || (t = [t]);
                for (var e = 0; e < t.length; e++) {
                    var i = this.source[e];
                    this.dataSource.push(new o(this,t[e],i.width,i.height))
                }
            },
            setFilter: function(t) {
                for (var e = 0; e < this.source.length; e++)
                    this.source[e].setFilter(t);
                for (e = 0; e < this.dataSource.length; e++)
                    this.dataSource[e].setFilter(t)
            },
            destroy: function() {
                for (var t = 0; t < this.source.length; t++)
                    this.source[t].destroy();
                for (t = 0; t < this.dataSource.length; t++)
                    this.dataSource[t].destroy();
                for (var e in this.frames)
                    this.frames[e].destroy();
                this.source = [],
                this.dataSource = [],
                this.frames = {},
                this.manager.removeKey(this.key);
                var i = this.manager.game.renderer;
                i && i.type === n.WEBGL && i.resetTextures(!0),
                this.manager = null
            }
        });
        t.exports = h
    }
    , function(t, e, i) {
        var h = i(78);
        t.exports = function(t, e, i, n, s) {
            void 0 === n && (n = 0),
            void 0 === s && (s = t.length);
            var r = [];
            if (h(t, n, s))
                for (var o = n; o < s; o++) {
                    var a = t[o];
                    (!e || e && void 0 === i && a.hasOwnProperty(e) || e && void 0 !== i && a[e] === i) && r.push(a)
                }
            return r
        }
    }
    , function(t, e, i) {
        t.exports = {
            Matrix: i(1013),
            Add: i(1021),
            AddAt: i(1022),
            BringToTop: i(1023),
            CountAllMatching: i(1024),
            Each: i(1025),
            EachInRange: i(1026),
            FindClosestInSorted: i(318),
            GetAll: i(207),
            GetFirst: i(428),
            GetRandom: i(210),
            MoveDown: i(1027),
            MoveTo: i(1028),
            MoveUp: i(1029),
            MoveAbove: i(1030),
            MoveBelow: i(1031),
            NumberArray: i(322),
            NumberArrayStep: i(1032),
            QuickSelect: i(436),
            Range: i(437),
            Remove: i(93),
            RemoveAt: i(1033),
            RemoveBetween: i(1034),
            RemoveRandomElement: i(1035),
            Replace: i(1036),
            RotateLeft: i(178),
            RotateRight: i(179),
            SafeRange: i(78),
            SendToBack: i(1037),
            SetAll: i(1038),
            Shuffle: i(131),
            SortByDigits: i(320),
            SpliceOne: i(74),
            StableSort: i(79),
            Swap: i(1039)
        }
    }
    , function(t, e) {
        t.exports = function(t) {
            if (!Array.isArray(t) || t.length < 2 || !Array.isArray(t[0]))
                return !1;
            for (var e = t[0].length, i = 1; i < t.length; i++)
                if (t[i].length !== e)
                    return !1;
            return !0
        }
    }
    , function(t, e) {
        t.exports = function(t, e, i) {
            void 0 === e && (e = 0),
            void 0 === i && (i = t.length);
            var n = e + Math.floor(Math.random() * i);
            return void 0 === t[n] ? null : t[n]
        }
    }
    , function(t, e, i) {
        var n = i(0)
          , s = i(9)
          , r = i(438)
          , o = new n({
            Extends: s,
            initialize: function() {
                s.call(this),
                this._pending = [],
                this._active = [],
                this._destroy = [],
                this._toProcess = 0,
                this.checkQueue = !1
            },
            add: function(t) {
                return this._pending.push(t),
                this._toProcess++,
                t
            },
            remove: function(t) {
                return this._destroy.push(t),
                this._toProcess++,
                t
            },
            removeAll: function() {
                for (var t = this._active, e = this._destroy, i = t.length; i--; )
                    e.push(t[i]),
                    this._toProcess++;
                return this
            },
            update: function() {
                if (0 === this._toProcess)
                    return this._active;
                for (var t, e = this._destroy, i = this._active, n = 0; n < e.length; n++) {
                    t = e[n];
                    var s = i.indexOf(t);
                    -1 !== s && (i.splice(s, 1),
                    this.emit(r.PROCESS_QUEUE_REMOVE, t))
                }
                for (e.length = 0,
                e = this._pending,
                n = 0; n < e.length; n++)
                    t = e[n],
                    (!this.checkQueue || this.checkQueue && -1 === i.indexOf(t)) && (i.push(t),
                    this.emit(r.PROCESS_QUEUE_ADD, t));
                return e.length = 0,
                this._toProcess = 0,
                i
            },
            getActive: function() {
                return this._active
            },
            length: {
                get: function() {
                    return this._active.length
                }
            },
            destroy: function() {
                this._toProcess = 0,
                this._pending = [],
                this._active = [],
                this._destroy = []
            }
        });
        t.exports = o
    }
    , function(t, e) {
        function D(t, e) {
            return parseInt(t.getAttribute(e), 10)
        }
        t.exports = function(t, e, i, n, s) {
            void 0 === i && (i = 0),
            void 0 === n && (n = 0);
            var r = e.cutX
              , o = e.cutY
              , a = e.source.width
              , h = e.source.height
              , l = e.sourceIndex
              , u = {}
              , c = t.getElementsByTagName("info")[0]
              , d = t.getElementsByTagName("common")[0];
            u.font = c.getAttribute("face"),
            u.size = D(c, "size"),
            u.lineHeight = D(d, "lineHeight") + n,
            u.chars = {};
            var p, f, g = t.getElementsByTagName("char"), v = void 0 !== e && e.trimmed;
            v && (p = e.height,
            f = e.width);
            for (var y = 0; y < g.length; y++) {
                var m = g[y]
                  , x = D(m, "id")
                  , w = String.fromCharCode(x)
                  , b = D(m, "x")
                  , T = D(m, "y")
                  , S = D(m, "width")
                  , _ = D(m, "height");
                v && (b < f && (f = b),
                T < p && (p = T)),
                v && 0 !== p && 0 !== f && (b -= e.x,
                T -= e.y);
                var E, P = (r + b) / a, A = (o + T) / h, M = (r + b + S) / a, C = (o + T + _) / h;
                u.chars[x] = {
                    x: b,
                    y: T,
                    width: S,
                    height: _,
                    centerX: Math.floor(S / 2),
                    centerY: Math.floor(_ / 2),
                    xOffset: D(m, "xoffset"),
                    yOffset: D(m, "yoffset"),
                    xAdvance: D(m, "xadvance") + i,
                    data: {},
                    kerning: {},
                    u0: P,
                    v0: A,
                    u1: M,
                    v1: C
                },
                !s || 0 === S || 0 === _ || (E = s.add(w, l, b, T, S, _)) && E.setUVs(S, _, P, A, M, C)
            }
            var O = t.getElementsByTagName("kerning");
            for (y = 0; y < O.length; y++) {
                var k = O[y]
                  , R = D(k, "first")
                  , L = D(k, "second")
                  , I = D(k, "amount");
                u.chars[L].kerning[R] = I
            }
            return u
        }
    }
    , function(t, e, i) {
        var n = i(1049)
          , o = i(440)
          , s = i(0)
          , r = i(11)
          , a = i(109)
          , h = i(15)
          , l = i(110)
          , u = new s({
            Extends: h,
            Mixins: [r.Alpha, r.BlendMode, r.Depth, r.Mask, r.Pipeline, r.ScrollFactor, r.Size, r.Texture, r.Transform, r.Visible, n],
            initialize: function(t, e, i, n, s) {
                h.call(this, t, "Blitter"),
                this.setTexture(n, s),
                this.setPosition(e, i),
                this.initPipeline(),
                this.children = new l,
                this.renderList = [],
                this.dirty = !1
            },
            create: function(t, e, i, n, s) {
                void 0 === n && (n = !0),
                void 0 === s && (s = this.children.length),
                void 0 === i ? i = this.frame : i instanceof a || (i = this.texture.get(i));
                var r = new o(this,t,e,i,n);
                return this.children.addAt(r, s, !1),
                this.dirty = !0,
                r
            },
            createFromCallback: function(t, e, i, n) {
                for (var s = this.createMultiple(e, i, n), r = 0; r < s.length; r++) {
                    var o = s[r];
                    t.call(this, o, r)
                }
                return s
            },
            createMultiple: function(i, t, n) {
                void 0 === t && (t = this.frame.name),
                void 0 === n && (n = !0),
                Array.isArray(t) || (t = [t]);
                var s = []
                  , r = this;
                return t.forEach(function(t) {
                    for (var e = 0; e < i; e++)
                        s.push(r.create(0, 0, t, n))
                }),
                s
            },
            childCanRender: function(t) {
                return t.visible && 0 < t.alpha
            },
            getRenderList: function() {
                return this.dirty && (this.renderList = this.children.list.filter(this.childCanRender, this),
                this.dirty = !1),
                this.renderList
            },
            clear: function() {
                this.children.removeAll(),
                this.dirty = !0
            },
            preDestroy: function() {
                this.children.destroy(),
                this.renderList = []
            }
        });
        t.exports = u
    }
    , function(t, e, i) {
        var r = i(208)
          , s = i(35)
          , n = i(0)
          , o = i(11)
          , a = i(75)
          , h = i(15)
          , l = i(10)
          , u = i(1052)
          , c = i(441)
          , d = i(3)
          , p = new n({
            Extends: h,
            Mixins: [o.AlphaSingle, o.BlendMode, o.ComputedSize, o.Depth, o.Mask, o.Pipeline, o.Transform, o.Visible, u],
            initialize: function(t, e, i, n) {
                h.call(this, t, "Container"),
                this.list = [],
                this.exclusive = !0,
                this.maxSize = -1,
                this.position = 0,
                this.localTransform = new o.TransformMatrix,
                this.tempTransformMatrix = new o.TransformMatrix,
                this._sortKey = "",
                this._sysEvents = t.sys.events,
                this.scrollFactorX = 1,
                this.scrollFactorY = 1,
                this.initPipeline(),
                this.setPosition(e, i),
                this.clearAlpha(),
                this.setBlendMode(s.SKIP_CHECK),
                n && this.add(n)
            },
            originX: {
                get: function() {
                    return .5
                }
            },
            originY: {
                get: function() {
                    return .5
                }
            },
            displayOriginX: {
                get: function() {
                    return .5 * this.width
                }
            },
            displayOriginY: {
                get: function() {
                    return .5 * this.height
                }
            },
            setExclusive: function(t) {
                return void 0 === t && (t = !0),
                this.exclusive = t,
                this
            },
            getBounds: function(t) {
                var e;
                if (void 0 === t && (t = new l),
                t.setTo(this.x, this.y, 0, 0),
                this.parentContainer && (e = this.parentContainer.getBoundsTransformMatrix().transformPoint(this.x, this.y),
                t.setTo(e.x, e.y, 0, 0)),
                0 < this.list.length) {
                    var i = this.list
                      , n = new l
                      , s = !1;
                    t.setEmpty();
                    for (var r = 0; r < i.length; r++) {
                        var o = i[r];
                        o.getBounds && (o.getBounds(n),
                        s ? c(n, t, t) : (t.setTo(n.x, n.y, n.width, n.height),
                        s = !0))
                    }
                }
                return t
            },
            addHandler: function(t) {
                t.once(a.DESTROY, this.remove, this),
                this.exclusive && (t.parentContainer && t.parentContainer.remove(t),
                t.removeFromDisplayList(),
                t.parentContainer = this)
            },
            removeHandler: function(t) {
                t.off(a.DESTROY, this.remove),
                this.exclusive && (t.parentContainer = null,
                t.addToDisplayList())
            },
            pointToContainer: function(t, e) {
                void 0 === e && (e = new d),
                this.parentContainer ? this.parentContainer.pointToContainer(t, e) : e = new d(t.x,t.y);
                var i = this.tempTransformMatrix;
                return i.applyITRS(this.x, this.y, this.rotation, this.scaleX, this.scaleY),
                i.invert(),
                i.transformPoint(t.x, t.y, e),
                e
            },
            getBoundsTransformMatrix: function() {
                return this.getWorldTransformMatrix(this.tempTransformMatrix, this.localTransform)
            },
            add: function(t) {
                return r.Add(this.list, t, this.maxSize, this.addHandler, this),
                this
            },
            addAt: function(t, e) {
                return r.AddAt(this.list, t, e, this.maxSize, this.addHandler, this),
                this
            },
            getAt: function(t) {
                return this.list[t]
            },
            getIndex: function(t) {
                return this.list.indexOf(t)
            },
            sort: function(i, t) {
                return i && (void 0 === t && (t = function(t, e) {
                    return t[i] - e[i]
                }
                ),
                r.StableSort(this.list, t)),
                this
            },
            getByName: function(t) {
                return r.GetFirst(this.list, "name", t)
            },
            getRandom: function(t, e) {
                return r.GetRandom(this.list, t, e)
            },
            getFirst: function(t, e, i, n) {
                return r.GetFirst(this.list, t, e, i, n)
            },
            getAll: function(t, e, i, n) {
                return r.GetAll(this.list, t, e, i, n)
            },
            count: function(t, e, i, n) {
                return r.CountAllMatching(this.list, t, e, i, n)
            },
            swap: function(t, e) {
                return r.Swap(this.list, t, e),
                this
            },
            moveTo: function(t, e) {
                return r.MoveTo(this.list, t, e),
                this
            },
            moveAbove: function(t, e) {
                return r.MoveAbove(this.list, t, e),
                this
            },
            moveBelow: function(t, e) {
                return r.MoveBelow(this.list, t, e),
                this
            },
            remove: function(t, e) {
                var i = r.Remove(this.list, t, this.removeHandler, this);
                if (e && i) {
                    Array.isArray(i) || (i = [i]);
                    for (var n = 0; n < i.length; n++)
                        i[n].destroy()
                }
                return this
            },
            removeAt: function(t, e) {
                var i = r.RemoveAt(this.list, t, this.removeHandler, this);
                return e && i && i.destroy(),
                this
            },
            removeBetween: function(t, e, i) {
                var n = r.RemoveBetween(this.list, t, e, this.removeHandler, this);
                if (i)
                    for (var s = 0; s < n.length; s++)
                        n[s].destroy();
                return this
            },
            removeAll: function(t) {
                var e = r.RemoveBetween(this.list, 0, this.list.length, this.removeHandler, this);
                if (t)
                    for (var i = 0; i < e.length; i++)
                        e[i].destroy();
                return this
            },
            bringToTop: function(t) {
                return r.BringToTop(this.list, t),
                this
            },
            sendToBack: function(t) {
                return r.SendToBack(this.list, t),
                this
            },
            moveUp: function(t) {
                return r.MoveUp(this.list, t),
                this
            },
            moveDown: function(t) {
                return r.MoveDown(this.list, t),
                this
            },
            reverse: function() {
                return this.list.reverse(),
                this
            },
            shuffle: function() {
                return r.Shuffle(this.list),
                this
            },
            replace: function(t, e, i) {
                return r.Replace(this.list, t, e) && (this.addHandler(e),
                this.removeHandler(t),
                i && t.destroy()),
                this
            },
            exists: function(t) {
                return -1 < this.list.indexOf(t)
            },
            setAll: function(t, e, i, n) {
                return r.SetAll(this.list, t, e, i, n),
                this
            },
            each: function(t, e) {
                for (var i = [null], n = this.list.slice(), s = n.length, r = 2; r < arguments.length; r++)
                    i.push(arguments[r]);
                for (r = 0; r < s; r++)
                    i[0] = n[r],
                    t.apply(e, i);
                return this
            },
            iterate: function(t, e) {
                for (var i = [null], n = 2; n < arguments.length; n++)
                    i.push(arguments[n]);
                for (n = 0; n < this.list.length; n++)
                    i[0] = this.list[n],
                    t.apply(e, i);
                return this
            },
            setScrollFactor: function(t, e, i) {
                return void 0 === e && (e = t),
                void 0 === i && (i = !1),
                this.scrollFactorX = t,
                this.scrollFactorY = e,
                i && (r.SetAll(this.list, "scrollFactorX", t),
                r.SetAll(this.list, "scrollFactorY", e)),
                this
            },
            length: {
                get: function() {
                    return this.list.length
                }
            },
            first: {
                get: function() {
                    return (this.position = 0) < this.list.length ? this.list[0] : null
                }
            },
            last: {
                get: function() {
                    return 0 < this.list.length ? (this.position = this.list.length - 1,
                    this.list[this.position]) : null
                }
            },
            next: {
                get: function() {
                    return this.position < this.list.length ? (this.position++,
                    this.list[this.position]) : null
                }
            },
            previous: {
                get: function() {
                    return 0 < this.position ? (this.position--,
                    this.list[this.position]) : null
                }
            },
            preDestroy: function() {
                this.removeAll(!!this.exclusive),
                this.localTransform.destroy(),
                this.tempTransformMatrix.destroy(),
                this.list = []
            }
        });
        t.exports = p
    }
    , function(t, e, i) {
        var a = i(148)
          , n = i(0)
          , s = i(1057)
          , r = new n({
            Extends: a,
            Mixins: [s],
            initialize: function(t, e, i, n, s, r, o) {
                a.call(this, t, e, i, n, s, r, o),
                this.type = "DynamicBitmapText",
                this.scrollX = 0,
                this.scrollY = 0,
                this.cropWidth = 0,
                this.cropHeight = 0,
                this.displayCallback,
                this.callbackData = {
                    parent: this,
                    color: 0,
                    tint: {
                        topLeft: 0,
                        topRight: 0,
                        bottomLeft: 0,
                        bottomRight: 0
                    },
                    index: 0,
                    charCode: 0,
                    x: 0,
                    y: 0,
                    scale: 0,
                    rotation: 0,
                    data: 0
                }
            },
            setSize: function(t, e) {
                return this.cropWidth = t,
                this.cropHeight = e,
                this
            },
            setDisplayCallback: function(t) {
                return this.displayCallback = t,
                this
            },
            setScrollX: function(t) {
                return this.scrollX = t,
                this
            },
            setScrollY: function(t) {
                return this.scrollY = t,
                this
            }
        });
        t.exports = r
    }
    , function(t, e, i) {
        var n = i(133)
          , s = i(0)
          , h = i(217)
          , r = i(303)
          , o = i(304)
          , a = i(305)
          , l = i(309)
          , u = i(167)
          , c = i(312)
          , d = i(313)
          , p = i(314)
          , f = i(111)
          , g = i(15)
          , v = i(2)
          , y = i(6)
          , m = i(14)
          , x = i(1063)
          , w = new s({
            Extends: g,
            Mixins: [r, o, a, l, u, d, p, c, x],
            initialize: function(t, e) {
                var i = y(e, "x", 0)
                  , n = y(e, "y", 0);
                g.call(this, t, "Graphics"),
                this.setPosition(i, n),
                this.initPipeline(),
                this.displayOriginX = 0,
                this.displayOriginY = 0,
                this.commandBuffer = [],
                this.defaultFillColor = -1,
                this.defaultFillAlpha = 1,
                this.defaultStrokeWidth = 1,
                this.defaultStrokeColor = -1,
                this.defaultStrokeAlpha = 1,
                this._lineWidth = 1,
                this.setDefaultStyles(e)
            },
            setDefaultStyles: function(t) {
                return y(t, "lineStyle", null) && (this.defaultStrokeWidth = y(t, "lineStyle.width", 1),
                this.defaultStrokeColor = y(t, "lineStyle.color", 16777215),
                this.defaultStrokeAlpha = y(t, "lineStyle.alpha", 1),
                this.lineStyle(this.defaultStrokeWidth, this.defaultStrokeColor, this.defaultStrokeAlpha)),
                y(t, "fillStyle", null) && (this.defaultFillColor = y(t, "fillStyle.color", 16777215),
                this.defaultFillAlpha = y(t, "fillStyle.alpha", 1),
                this.fillStyle(this.defaultFillColor, this.defaultFillAlpha)),
                this
            },
            lineStyle: function(t, e, i) {
                return void 0 === i && (i = 1),
                this.commandBuffer.push(h.LINE_STYLE, t, e, i),
                this._lineWidth = t,
                this
            },
            fillStyle: function(t, e) {
                return void 0 === e && (e = 1),
                this.commandBuffer.push(h.FILL_STYLE, t, e),
                this
            },
            fillGradientStyle: function(t, e, i, n, s, r, o, a) {
                return void 0 === s && (s = 1),
                void 0 === r && (r = s),
                void 0 === o && (o = s),
                void 0 === a && (a = s),
                this.commandBuffer.push(h.GRADIENT_FILL_STYLE, s, r, o, a, t, e, i, n),
                this
            },
            lineGradientStyle: function(t, e, i, n, s, r) {
                return void 0 === r && (r = 1),
                this.commandBuffer.push(h.GRADIENT_LINE_STYLE, t, r, e, i, n, s),
                this
            },
            beginPath: function() {
                return this.commandBuffer.push(h.BEGIN_PATH),
                this
            },
            closePath: function() {
                return this.commandBuffer.push(h.CLOSE_PATH),
                this
            },
            fillPath: function() {
                return this.commandBuffer.push(h.FILL_PATH),
                this
            },
            fill: function() {
                return this.commandBuffer.push(h.FILL_PATH),
                this
            },
            strokePath: function() {
                return this.commandBuffer.push(h.STROKE_PATH),
                this
            },
            stroke: function() {
                return this.commandBuffer.push(h.STROKE_PATH),
                this
            },
            fillCircleShape: function(t) {
                return this.fillCircle(t.x, t.y, t.radius)
            },
            strokeCircleShape: function(t) {
                return this.strokeCircle(t.x, t.y, t.radius)
            },
            fillCircle: function(t, e, i) {
                return this.beginPath(),
                this.arc(t, e, i, 0, m.PI2),
                this.fillPath(),
                this
            },
            strokeCircle: function(t, e, i) {
                return this.beginPath(),
                this.arc(t, e, i, 0, m.PI2),
                this.strokePath(),
                this
            },
            fillRectShape: function(t) {
                return this.fillRect(t.x, t.y, t.width, t.height)
            },
            strokeRectShape: function(t) {
                return this.strokeRect(t.x, t.y, t.width, t.height)
            },
            fillRect: function(t, e, i, n) {
                return this.commandBuffer.push(h.FILL_RECT, t, e, i, n),
                this
            },
            strokeRect: function(t, e, i, n) {
                var s = this._lineWidth / 2
                  , r = t - s
                  , o = t + s;
                return this.beginPath(),
                this.moveTo(t, e),
                this.lineTo(t, e + n),
                this.strokePath(),
                this.beginPath(),
                this.moveTo(t + i, e),
                this.lineTo(t + i, e + n),
                this.strokePath(),
                this.beginPath(),
                this.moveTo(r, e),
                this.lineTo(o + i, e),
                this.strokePath(),
                this.beginPath(),
                this.moveTo(r, e + n),
                this.lineTo(o + i, e + n),
                this.strokePath(),
                this
            },
            fillRoundedRect: function(t, e, i, n, s) {
                void 0 === s && (s = 20);
                var r = s
                  , o = s
                  , a = s
                  , h = s;
                return "number" != typeof s && (r = v(s, "tl", 20),
                o = v(s, "tr", 20),
                a = v(s, "bl", 20),
                h = v(s, "br", 20)),
                this.beginPath(),
                this.moveTo(t + r, e),
                this.lineTo(t + i - o, e),
                this.arc(t + i - o, e + o, o, -m.TAU, 0),
                this.lineTo(t + i, e + n - h),
                this.arc(t + i - h, e + n - h, h, 0, m.TAU),
                this.lineTo(t + a, e + n),
                this.arc(t + a, e + n - a, a, m.TAU, Math.PI),
                this.lineTo(t, e + r),
                this.arc(t + r, e + r, r, -Math.PI, -m.TAU),
                this.fillPath(),
                this
            },
            strokeRoundedRect: function(t, e, i, n, s) {
                void 0 === s && (s = 20);
                var r = s
                  , o = s
                  , a = s
                  , h = s;
                return "number" != typeof s && (r = v(s, "tl", 20),
                o = v(s, "tr", 20),
                a = v(s, "bl", 20),
                h = v(s, "br", 20)),
                this.beginPath(),
                this.moveTo(t + r, e),
                this.lineTo(t + i - o, e),
                this.moveTo(t + i - o, e),
                this.arc(t + i - o, e + o, o, -m.TAU, 0),
                this.lineTo(t + i, e + n - h),
                this.moveTo(t + i, e + n - h),
                this.arc(t + i - h, e + n - h, h, 0, m.TAU),
                this.lineTo(t + a, e + n),
                this.moveTo(t + a, e + n),
                this.arc(t + a, e + n - a, a, m.TAU, Math.PI),
                this.lineTo(t, e + r),
                this.moveTo(t, e + r),
                this.arc(t + r, e + r, r, -Math.PI, -m.TAU),
                this.strokePath(),
                this
            },
            fillPointShape: function(t, e) {
                return this.fillPoint(t.x, t.y, e)
            },
            fillPoint: function(t, e, i) {
                return !i || i < 1 ? i = 1 : (t -= i / 2,
                e -= i / 2),
                this.commandBuffer.push(h.FILL_RECT, t, e, i, i),
                this
            },
            fillTriangleShape: function(t) {
                return this.fillTriangle(t.x1, t.y1, t.x2, t.y2, t.x3, t.y3)
            },
            strokeTriangleShape: function(t) {
                return this.strokeTriangle(t.x1, t.y1, t.x2, t.y2, t.x3, t.y3)
            },
            fillTriangle: function(t, e, i, n, s, r) {
                return this.commandBuffer.push(h.FILL_TRIANGLE, t, e, i, n, s, r),
                this
            },
            strokeTriangle: function(t, e, i, n, s, r) {
                return this.commandBuffer.push(h.STROKE_TRIANGLE, t, e, i, n, s, r),
                this
            },
            strokeLineShape: function(t) {
                return this.lineBetween(t.x1, t.y1, t.x2, t.y2)
            },
            lineBetween: function(t, e, i, n) {
                return this.beginPath(),
                this.moveTo(t, e),
                this.lineTo(i, n),
                this.strokePath(),
                this
            },
            lineTo: function(t, e) {
                return this.commandBuffer.push(h.LINE_TO, t, e),
                this
            },
            moveTo: function(t, e) {
                return this.commandBuffer.push(h.MOVE_TO, t, e),
                this
            },
            strokePoints: function(t, e, i, n) {
                void 0 === e && (e = !1),
                void 0 === i && (i = !1),
                void 0 === n && (n = t.length),
                this.beginPath(),
                this.moveTo(t[0].x, t[0].y);
                for (var s = 1; s < n; s++)
                    this.lineTo(t[s].x, t[s].y);
                return e && this.lineTo(t[0].x, t[0].y),
                i && this.closePath(),
                this.strokePath(),
                this
            },
            fillPoints: function(t, e, i, n) {
                void 0 === e && (e = !1),
                void 0 === i && (i = !1),
                void 0 === n && (n = t.length),
                this.beginPath(),
                this.moveTo(t[0].x, t[0].y);
                for (var s = 1; s < n; s++)
                    this.lineTo(t[s].x, t[s].y);
                return e && this.lineTo(t[0].x, t[0].y),
                i && this.closePath(),
                this.fillPath(),
                this
            },
            strokeEllipseShape: function(t, e) {
                void 0 === e && (e = 32);
                var i = t.getPoints(e);
                return this.strokePoints(i, !0)
            },
            strokeEllipse: function(t, e, i, n, s) {
                void 0 === s && (s = 32);
                var r = new f(t,e,i,n).getPoints(s);
                return this.strokePoints(r, !0)
            },
            fillEllipseShape: function(t, e) {
                void 0 === e && (e = 32);
                var i = t.getPoints(e);
                return this.fillPoints(i, !0)
            },
            fillEllipse: function(t, e, i, n, s) {
                void 0 === s && (s = 32);
    